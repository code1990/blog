第7章　API网关服务：Spring Cloud Zuul	217
快速入门	219
-- 构建网关	220
-- 请求路由	221
-- 请求过滤	223
路由详解	226
-- 传统路由配置	226
-- 服务路由配置	228
-- 服务路由的默认规则	229
-- 自定义路由映射规则	229
-- 路径匹配	230
-- 路由前缀	233
-- 本地跳转	234
--  Cookie与头信息	235
-- Hystrix和Ribbon支持	236
过滤器详解	238
-- 过滤器	238
-- 请求生命周期	239
-- 核心过滤器	240
-- 异常处理	244
-- 禁用过滤器	256
动态加载	257
-- 动态路由	257
-- 动态过滤器	261



8 使用Zuul 构建微服务网关. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113
8.1 为什么要使用微服务网关113
8.2 Zuul 简介115
8.3 编写Zuul 微服务网关115
8.4 Zuul 的路由端点118
8.5 Zuul 的路由配置详解119
8.6 Zuul 的安全与Header 122
8.6.1 敏感Header 的设置122
8.6.2 忽略Header 123
8.7 使用Zuul 上传文件124
8.7.1 编写文件上传微服务124
8.8 Zuul 的过滤器127
8.8.1 过滤器类型与请求生命周期127
8.8.2 编写Zuul 过滤器128
8.8.3 禁用Zuul 过滤器130
8.9 Zuul 的容错与回退130
8.9.1 为Zuul 添加回退131
8.10 Zuul 的高可用133
8.10.1 Zuul 客户端也注册到了Eureka Server 上133
8.10.2 Zuul 客户端未注册到Eureka Server 上133
8.11 使用Sidecar 整合非JVM 微服务134
8.11.1 编写Node.js 微服务135
8.11.2 编写Sidecar 136
8.11.3 Sidecar 的端点138
8.11.4 Sidecar 与Node.js 微服务分离部署139
8.11.5 Sidecar 原理分析139

第7章　API网关  103
7.1　Zuul 简介  103
7.2　使用 Zuul 构建微服务网关  104
7.2.1　简单使用  104
7.2.2　集成Eureka  105
7.3　Zuul 路由配置  105
7.4　Zuul过滤器讲解  106
7.4.1　过滤器类型  106
7.4.2　请求生命周期  107
7.4.3　使用过滤器  108
7.4.4　过滤器禁用  109
7.4.5　过滤器中传递数据  110
7.4.6　过滤器拦截请求  111
7.4.7　过滤器中异常处理  113
7.5　Zuul 容错和回退  115
7.5.1　容错机制  115
7.5.2　回退机制  116
7.6　Zuul使用小经验  118
7.6.1　/routes 端点  118
7.6.2　/filters 端点  118
7.6.3　文件上传  119
7.6.4　请求响应信息输出  121
7.6.5　Zuul自带的Debug功能  124
7.7　Zuul 高可用  126
7.8　本章小结  127



第9章 路由网关Spring Cloud Zuul 124
9．1 为什么需要Zuul 124
9．2 Zuul的工作原理 124
9．3 案例实战 126
9．3．1 搭建Zuul服务 126
9．3．2 在Zuul上配置API接口的版本号 129
9．3．3 在Zuul上配置熔断器 130
9．3．4 在Zuul中使用过滤器 131
9．3．5 Zuul的常见使用方式 133



第7章　微服务集群网关	143
7.1　Zuul框架介绍	144
7.1.1　关于Zuul	144
7.1.2　Zuul的功能	144
7.2　在Web项目中使用Zuul	145
7.2.1　Web项目整合Zuul	145
7.2.2　测试路由功能	145
7.2.3　过滤器运行机制	147
7.3　在微服务集群中初试Zuul	148
7.3.1　集群搭建	149
7.3.2　路由到集群服务	150
7.3.3　Zuul Http客户端	153
7.4　路由配置	153
7.4.1　简单路由	154
7.4.2　跳转路由	155
7.4.3　Ribbon路由	155
7.4.4　自定义路由规则	156
7.4.5　忽略路由	157
7.5　Zuul的其他配置	157
7.5.1　请求头配置	157
7.5.2　路由端点	158
7.5.3　Zuul与Hystrix	158
7.5.4　在Zuul中预加载Ribbon	161
7.6　Zuul功能进阶	161
7.6.1　过滤器优先级	161
7.6.2　自定义过滤器	162
7.6.3　动态加载过滤器	163
7.6.4　禁用过滤器	165
7.6.5　请求上下文	166
7.6.6　@EnableZuulServer注解	168
7.6.7　error过滤器	169
7.6.8　动态路由	171
7.7　本章小结	172



5.4 本章小结 109
第6章 Spring Cloud Netflix Zuul与API网关 110
6.1 服务网关的设计理念 111
6.1.1 服务网关的作用 111
6.1.2 服务网关的结构和功能 112
6.2 使用Zuul构建服务网关 113
6.2.1 构建Zuul服务器 113
6.2.2 配置Zuul服务路由 115
6.3 Zuul基本架构 120
6.3.1 ZuulFilter组件架构 120
6.3.2 使用Zuul过滤器 124
6.4 本章小结 129



第7章　API网关 96
7.1　Zuul 简介 96
7.2　使用Zuul构建微服务网关 97
7.2.1　简单使用 97
7.2.2　集成Eureka 98
7.3　Zuul路由配置 98
7.4　Zuul过滤器讲解 99
7.4.1　过滤器类型 100
7.4.2　请求生命周期 100
7.4.3　使用过滤器 101
7.4.4　过滤器禁用 103
7.4.5　过滤器中传递数据 103
7.4.6　过滤器拦截请求 104
7.4.7　过滤器中异常处理 106
7.5　Zuul容错和回退 108
7.5.1　容错机制 108
7.5.2　回退机制 109
7.6　Zuul高可用 111
7.7　本章小结 111

第7章　路由网关：Zuul63
7.1　使用Zuul64
7.2　业务场景深入解析65
7.3　小结71

第 10章 服务网关 135
10．1 服务网关的实现原理 135
10．2 断言工厂 136
10．2．1 After路由断言工厂 136
10．2．2 Header断言工厂 138
10．2．3 Cookie路由断言工厂 139
10．2．4 Host路由断言工厂 140
10．2．5 Method路由断言工厂 140
10．2．6 Path 路由断言工厂 141
10．2．7 Query 路由断言工厂 141
10．3 过滤器 142
10．3．1 过滤器的作用 143
10．3．2 过滤器的生命周期 144
10．3．3 网关过滤器 144
10．3．4 全局过滤器 151
10．4 限流 153
10．4．1 常见的限流算法 153
10．4．2 服务网关的限流 154
10．5 服务化 156
10．5．1 工程介绍 156
10．5．2 service-gateway工程详细介绍 157
10．6 总结 159



第9章　路由网关Spring Cloud Zuul 126
9.1　为什么需要Zuul 126
9.2　Zuul的工作原理 126
9.3　案例实战 128
9.3.1　搭建Zuul服务 128
9.3.2　在Zuul上配置API接口的
版本号 131
9.3.3　在Zuul上配置熔断器 132
9.3.4　在Zuul中使用过滤器 133
9.3.5　Zuul的常见使用方式 135

第15章　API 网关扩展  244
15.1　用户认证  244
15.1.1　动态管理不需要拦截的 API 请求  244
15.1.2　创建认证的用户服务  246
15.1.3　路由之前的认证  247
15.1.4　向下游微服务中传递认证之后的用户信息  248
15.1.5　内部服务间的用户信息传递  248
15.2　服务限流  250
15.2.1　限流算法  250
15.2.2　单节点限流  251
15.2.3　集群限流  255
15.2.4　具体服务限流  258
15.2.5　具体接口限流  258
15.3　服务降级  262
15.4　灰度发布  264
15.4.1　原理讲解  264
15.4.2　根据用户做灰度发布  265
15.4.3　根据 IP 做灰度发布  268
15.5　本章小结  268

第13章　API网关扩展 172
13.1　用户认证 172
13.1.1　动态管理不需要拦截的API请求 172
13.1.2　创建认证的用户服务 174
13.1.3　路由之前的认证 175
13.1.4　向下游微服务中传递认证之后的用户信息 176
13.1.5　内部服务间的用户信息传递 177
13.2　服务限流 179
13.2.1　限流算法 179
13.2.2　单节点限流 179
13.2.3　集群限流 184
13.2.4　具体服务限流 187
13.2.5　具体接口限流 188
13.3　服务降级 194
13.4　灰度发布 196
13.4.1　原理讲解 196
13.4.2　根据用户做灰度发布 197
13.4.3　根据IP做灰度发布 200
13.5　本章小结 200
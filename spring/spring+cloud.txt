1	{"count":35,"start":0,"total":35,"books":[{"rating":{"max":10,"numRaters":194,"average":"7.8","min":0},"subtitle":"","author":["翟永超"],"pubdate":"2017-5","tags":[{"count":159,"name":"微服务","title":"微服务"},{"count":154,"name":"SpringCloud","title":"SpringCloud"},{"count":105,"name":"Spring","title":"Spring"},{"count":86,"name":"Java","title":"Java"},{"count":52,"name":"架构","title":"架构"},{"count":49,"name":"计算机","title":"计算机"},{"count":39,"name":"Cloud","title":"Cloud"},{"count":29,"name":"编程","title":"编程"}],"origin_title":"","image":"https://img3.doubanio.com\/view\/subject\/m\/public\/s29434190.jpg","binding":"平装","translator":[],"catalog":"第1章　基础知识\t1\n什么是微服务架构\t1\n-- 与单体系统的区别\t1\n-- 如何实施微服务\t2\n为什么选择Spring Cloud\t6\nSpring Cloud简介\t7\n版本说明\t8\n第2章　微服务构建：Spring Boot\t11\n框架简介\t12\n快速入门\t13\n-- 项目构建与解析\t13\n-- 实现RESTful API\t17\n配置详解\t20\n-- 配置文件\t20\n-- 自定义参数\t22\n-- 参数引用\t22\n-- 使用随机数\t23\n-- 命令行参数\t23\n-- 多环境配置\t24\n-- 加载顺序\t25\n监控与管理\t26\n-- 初识actuator\t27\n-- 原生端点\t28\n小结\t38\n第3章　服务治理：Spring Cloud Eureka\t39\n服务治理\t39\n-- Netflix Eureka\t40\n--搭建服务注册中心\t41\n--注册服务提供者\t43\n--高可用注册中心\t46\n--服务发现与消费\t48\nEureka详解\t51\n--基础架构\t52\n--服务治理机制\t52\n--源码分析\t56\n配置详解\t65\n--服务注册类配置\t65\n--服务实例类配置\t67\n跨平台支持\t71\n第4章　客户端负载均衡：Spring Cloud Ribbon\t73\n客户端负载均衡\t73\nRestTemplate详解\t75\n-- GET请求\t75\n-- POST请求\t77\n-- PUT请求\t79\n-- DELETE请求\t79\n源码分析\t80\n-- 负载均衡器\t91\n-- 负载均衡策略\t109\n配置详解\t123\n--自动化配置\t124\n-- Camden版本对RibbonClient配置的优化\t125\n-- 参数配置\t127\n-- 与Eureka结合\t127\n重试机制\t128\n第5章　服务容错保护：Spring Cloud Hystrix\t130\n快速入门\t131\n原理分析\t135\n-- 工作流程\t135\n-- 断路器原理\t144\n-- 依赖隔离\t148\n使用详解\t151\n-- 创建请求命令\t151\n-- 定义服务降级\t154\n-- 异常处理\t157\n-- 命令名称、分组以及线程池划分\t158\n-- 请求缓存\t159\n-- 请求合并\t166\n属性详解\t172\n-- Command属性\t174\n-- collapser属性\t184\n-- threadPool属性\t185\nHystrix仪表盘\t187\nTurbine集群监控\t192\n-- 构建监控聚合服务\t192\n-- 与消息代理结合\t196\n第6章　声明式服务调用：Spring Cloud Feign\t199\n快速入门\t200\n参数绑定\t202\n继承特性\t205\nRibbon配置\t209\n全局配置\t209\n指定服务配置\t209\n重试机制\t210\nHystrix配置\t211\n全局配置\t211\n禁用Hystrix\t211\n指定命令配置\t212\n服务降级配置\t212\n其他配置\t214\n第7章　API网关服务：Spring Cloud Zuul\t217\n快速入门\t219\n-- 构建网关\t220\n-- 请求路由\t221\n-- 请求过滤\t223\n路由详解\t226\n-- 传统路由配置\t226\n-- 服务路由配置\t228\n-- 服务路由的默认规则\t229\n-- 自定义路由映射规则\t229\n-- 路径匹配\t230\n-- 路由前缀\t233\n-- 本地跳转\t234\n--  Cookie与头信息\t235\n-- Hystrix和Ribbon支持\t236\n过滤器详解\t238\n-- 过滤器\t238\n-- 请求生命周期\t239\n-- 核心过滤器\t240\n-- 异常处理\t244\n-- 禁用过滤器\t256\n动态加载\t257\n-- 动态路由\t257\n-- 动态过滤器\t261\n第8章　分布式配置中心：Spring Cloud Config\t267\n快速入门\t267\n-- 构建配置中心\t268\n-- 配置规则详解\t269\n-- 客户端配置映射\t272\n服务端详解\t274\n-- 基础架构\t274\n-- Git配置仓库\t276\n-- SVN配置仓库\t279\n-- 本地仓库\t279\n-- 本地文件系统\t279\n-- 健康监测\t280\n-- 属性覆盖\t281\n-- 安全保护\t281\n-- 加密解密\t282\n-- 高可用配置\t286\n客户端详解\t286\n--  URI指定配置中心\t287\n-- 服务化配置中心\t287\n-- 失败快速响应与重试\t290\n-- 获取远程配置\t292\n-- 动态刷新配置\t293\n第9章　消息总线：Spring Cloud Bus\t295\n消息代理\t295\nRabbitMQ实现消息总线\t296\n-- 基本概念\t297\n-- 安装与使用\t298\n-- 快速入门\t302\n-- 整合Spring Cloud Bus\t306\n-- 原理分析\t307\n-- 指定刷新范围\t308\n-- 架构优化\t309\n-- RabbitMQ配置\t310\nKafka实现消息总线\t312\n-- Kafka简介\t312\n-- 快速入门\t313\n--整合Spring Cloud Bus\t315\n-- Kafka配置\t318\n深入理解\t318\n-- 源码分析\t320\n-- 其他消息代理的支持\t342\n第10章　消息驱动的微服务：Spring Cloud Stream\t344\n快速入门\t344\n核心概念\t349\n-- 绑定器\t350\n-- 发布-订阅模式\t351\n-- 消费组\t353\n-- 消息分区\t354\n使用详解\t355\n-- 开启绑定功能\t355\n-- 绑定消息通道\t356\n-- 消息生产与消费\t360\n-- 响应式编程\t366\n-- 消费组与消息分区\t368\n-- 消息类型\t370\n绑定器详解\t373\n-- 绑定器SPI\t373\n-- 自动化配置\t374\n-- 多绑定器配置\t374\n--  RabbitMQ与Kafka绑定器\t376\n配置详解\t376\n-- 基础配置\t377\n-- 绑定通道配置\t377\n-- 绑定器配置\t379\n第11章　分布式服务跟踪：Spring Cloud Sleuth\t386\n快速入门\t386\n-- 准备工作\t386\n-- 实现跟踪\t389\n跟踪原理\t390\n抽样收集\t392\n与Logstash整合\t394\n与Zipkin整合\t397\n--  HTTP收集\t398\n-- 消息中间件收集\t402\n-- 收集原理\t404\n-- 数据存储\t414\n--  API接口\t417\n附录A　Starter POMs\t419\n后记\t421","pages":"440","images":{"small":"https://img3.doubanio.com\/view\/subject\/s\/public\/s29434190.jpg","large":"https://img3.doubanio.com\/view\/subject\/l\/public\/s29434190.jpg","medium":"https://img3.doubanio.com\/view\/subject\/m\/public\/s29434190.jpg"},"alt":"https:\/\/book.douban.com\/subject\/27025912\/","id":"27025912","publisher":"电子工业出版社","isbn10":"7121313014","isbn13":"9787121313011","title":"Spring Cloud微服务实战","url":"https:\/\/api.douban.com\/v2\/book\/27025912","alt_title":"","author_intro":"","summary":"《Spring Cloud微服务实战》从时下流行的微服务架构概念出发，详细介绍了Spring Cloud针对微服务架构中几大核心要素的解决方案和基础组件。对于各个组件的介绍，《Spring Cloud微服务实战》主要以示例与源码结合的方式来帮助读者更好地理解这些组件的使用方法以及运行原理。同时，在介绍的过程中，还包含了作者在实践中所遇到的一些问题和解决思路，可供读者在实践中作为参考。\n《Spring Cloud微服务实战》适合所有Java开发人员，尤其适合正在做微服务架构技术选型或正在实施微服务架构的团队查阅和参考。","price":"89"},{"rating":{"max":10,"numRaters":90,"average":"6.2","min":0},"subtitle":"","author":["周立"],"pubdate":"2017-5","tags":[{"count":56,"name":"微服务","title":"微服务"},{"count":47,"name":"spring-cloud","title":"spring-cloud"},{"count":26,"name":"docker","title":"docker"},{"count":24,"name":"Java","title":"Java"},{"count":17,"name":"架构","title":"架构"},{"count":15,"name":"计算机","title":"计算机"},{"count":15,"name":"spring","title":"spring"},{"count":13,"name":"microservice","title":"microservice"}],"origin_title":"","image":"https://img9.doubanio.com\/view\/subject\/m\/public\/s29434185.jpg","binding":"平装","translator":[],"catalog":"1 微服务架构概述. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1\n1.1 单体应用架构存在的问题1\n1.2 如何解决单体应用架构存在的问题3\n1.3 什么是微服务3\n1.4 微服务架构的优点与挑战5\n1.4.1 微服务架构的优点5\n1.4.2 微服务架构面临的挑战5\n1.5 微服务设计原则6\n1.6 如何实现微服务架构7\n1.6.1 技术选型7\n1.6.2 架构图及常用组件8\n2 微服务开发框架——Spring Cloud . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10\n2.1 Spring Cloud 简介10\n2.2 Spring Cloud 特点10\n2.3 Spring Cloud 版本11\n2.3.1 版本简介11\n2.3.2 子项目一览12\n2.3.3 Spring Cloud\/Spring Boot 版本兼容性13\n3 开始使用Spring Cloud 实战微服务. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14\n3.1 Spring Cloud 实战前提14\n3.1.1 技术储备14\n3.1.2 工具及软件版本15\n3.2 服务提供者与服务消费者16\n3.3 编写服务提供者16\n3.3.1 手动编写项目17\n3.3.2 使用Spring Initializr 快速创建Spring Boot 项目21\n3.4 编写服务消费者23\n3.5 为项目整合Spring Boot Actuator 25\n3.6 硬编码有哪些问题27\n4 微服务注册与发现. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29\n4.1 服务发现简介29\n4.2 Eureka 简介31\n4.3 Eureka 原理31\n4.4 编写Eureka Server 33\n4.5 将微服务注册到Eureka Server 上35\n4.6 Eureka Server 的高可用36\n4.6.1 将应用注册到Eureka Server 集群上38\n4.7 为Eureka Server 添加用户认证39\n4.7.1 将微服务注册到需认证的Eureka Server 40\n4.8 理解Eureka 的元数据41\n4.8.1 改造用户微服务41\n4.8.2 改造电影微服务41\n4.9 Eureka Server 的REST 端点43\n4.9.1 示例45\n4.9.2 注销微服务实例49\n4.10 Eureka 的自我保护模式51\n4.11 多网卡环境下的IP 选择52\n4.11.1 忽略指定名称的网卡52\n4.11.2 使用正则表达式，指定使用的网络地址52\n4.11.3 只使用站点本地地址53\n4.11.4 手动指定IP 地址53\n4.12 Eureka 的健康检查53\n5 使用Ribbon 实现客户端侧负载均衡. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56\n5.1 Ribbon 简介56\n5.2 为服务消费者整合Ribbon 57\n5.3 使用Java 代码自定义Ribbon 配置60\n5.4 使用属性自定义Ribbon 配置63\n5.5 脱离Eureka 使用Ribbon 64\n6 使用Feign 实现声明式REST 调用. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66\n6.1 Feign 简介67\n6.2 为服务消费者整合Feign 67\n6.3 自定义Feign 配置69\n6.4 手动创建Feign 72\n6.4.1 修改用户微服务72\n6.4.2 修改电影微服务76\n6.5 Feign 对继承的支持78\n6.6 Feign 对压缩的支持79\n6.7 Feign 的日志80\n6.8 使用Feign 构造多参数请求82\n6.8.1 GET 请求多参数的URL 82\n6.8.2 POST 请求包含多个参数83\n7 使用Hystrix 实现微服务的容错处理. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85\n7.1 实现容错的手段85\n7.1.1 雪崩效应85\n7.1.2 如何容错86\n7.2 使用Hystrix 实现容错88\n7.2.1 Hystrix 简介88\n7.2.2 通用方式整合Hystrix 89\n7.2.3 Hystrix 断路器的状态监控与深入理解91\n7.2.4 Hystrix 线程隔离策略与传播上下文93\n7.2.5 Feign 使用Hystrix 96\n7.3 Hystrix 的监控101\n7.3.1 Feign 项目的Hystrix 监控102\n7.4 使用Hystrix Dashboard 可视化监控数据103\n7.5 使用Turbine 聚合监控数据105\n7.5.1 Turbine 简介105\n7.5.2 使用Turbine 监控多个微服务105\n7.5.3 使用消息中间件收集数据108\n8 使用Zuul 构建微服务网关. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113\n8.1 为什么要使用微服务网关113\n8.2 Zuul 简介115\n8.3 编写Zuul 微服务网关115\n8.4 Zuul 的路由端点118\n8.5 Zuul 的路由配置详解119\n8.6 Zuul 的安全与Header 122\n8.6.1 敏感Header 的设置122\n8.6.2 忽略Header 123\n8.7 使用Zuul 上传文件124\n8.7.1 编写文件上传微服务124\n8.8 Zuul 的过滤器127\n8.8.1 过滤器类型与请求生命周期127\n8.8.2 编写Zuul 过滤器128\n8.8.3 禁用Zuul 过滤器130\n8.9 Zuul 的容错与回退130\n8.9.1 为Zuul 添加回退131\n8.10 Zuul 的高可用133\n8.10.1 Zuul 客户端也注册到了Eureka Server 上133\n8.10.2 Zuul 客户端未注册到Eureka Server 上133\n8.11 使用Sidecar 整合非JVM 微服务134\n8.11.1 编写Node.js 微服务135\n8.11.2 编写Sidecar 136\n8.11.3 Sidecar 的端点138\n8.11.4 Sidecar 与Node.js 微服务分离部署139\n8.11.5 Sidecar 原理分析139\n9 使用Spring Cloud Config 统一管理微服务配置. . . . . . . . . . . . . . . . . . . . . . . 142\n9.1 为什么要统一管理微服务配置142\n9.2 Spring Cloud Config 简介143\n9.3 编写Config Server 144\n9.3.1 Config Server 的端点145\n9.4 编写Config Client 147\n9.5 Config Server 的Git 仓库配置详解149\n9.6 Config Server 的健康状况指示器152\n9.7 配置内容的加解密153\n9.7.1 安装JCE 153\n9.7.2 Config Server 的加解密端点153\n9.7.3 对称加密153\n9.7.4 存储加密的内容154\n9.7.5 非对称加密155\n9.8 使用\/refresh 端点手动刷新配置155\n9.9 使用Spring Cloud Bus 自动刷新配置157\n9.9.1 Spring Cloud Bus 简介157\n9.9.2 实现自动刷新158\n9.9.3 局部刷新159\n9.9.4 架构改进159\n9.9.5 跟踪总线事件160\n9.10 Spring Cloud Config 与Eureka 配合使用161\n9.11 Spring Cloud Config 的用户认证162\n9.11.1 Config Client 连接需用户认证的Config Server 163\n9.12 Config Server 的高可用164\n9.12.1 Git 仓库的高可用164\n9.12.2 RabbitMQ 的高可用164\n9.12.3 Config Server 自身的高可用165\n10 使用Spring Cloud Sleuth 实现微服务跟踪. . . . . . . . . . . . . . . . . . . . . . . . . . . . 167\n10.1 为什么要实现微服务跟踪167\n10.2 Spring Cloud Sleuth 简介168\n10.3 整合Spring Cloud Sleuth 170\n10.4 Spring Cloud Sleuth 与ELK 配合使用172\n10.5 Spring Cloud Sleuth 与Zipkin 配合使用176\n10.5.1 Zipkin 简介176\n10.5.2 编写Zipkin Server 176\n10.5.3 微服务整合Zipkin 178\n10.5.4 使用消息中间件收集数据181\n10.5.5 存储跟踪数据183\n11 Spring Cloud 常见问题与总结. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186\n11.1 Eureka 常见问题186\n11.1.1 Eureka 注册服务慢186\n11.1.2 已停止的微服务节点注销慢或不注销187\n11.1.3 如何自定义微服务的Instance ID 188\n11.1.4 Eureka 的UNKNOWN 问题总结与解决189\n11.2 Hystrix\/Feign 整合Hystrix 后首次请求失败190\n11.2.1 原因分析191\n11.2.2 解决方案191\n11.3 Turbine 聚合的数据不完整191\n11.3.1 解决方案192\n11.4 Spring Cloud 各组件配置属性193\n11.4.1 Spring Cloud 的配置193\n11.4.2 原生配置193\n11.5 Spring Cloud 定位问题思路总结194\n12 Docker 入门. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 197\n12.1 Docker 简介197\n12.2 Docker 的架构197\n12.3 安装Docker 199\n12.3.1 系统要求199\n12.3.2 移除非官方软件包199\n12.3.3 设置Yum 源199\n12.3.4 安装Dokcer 200\n12.3.5 卸载Docker 201\n12.4 配置镜像加速器201\n12.5 Docker 常用命令202\n12.5.1 Docker 镜像常用命令202\n12.5.2 Docker 容器常用命令204\n13 将微服务运行在Docker 上. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 209\n13.1 使用Dockerfile 构建Docker 镜像209\n13.1.1 Dockerfile 常用指令210\n13.1.2 使用Dockerfile 构建镜像215\n13.2 使用Docker Registry 管理Docker 镜像217\n13.2.1 使用Docker Hub 管理镜像217\n13.2.2 使用私有仓库管理镜像219\n13.3 使用Maven 插件构建Docker 镜像220\n13.3.1 快速入门221\n13.3.2 插件读取Dockerfile 进行构建222\n13.3.3 将插件绑定在某个phase 执行223\n13.3.4 推送镜像224\n13.4 常见问题与总结226\n14 使用Docker Compose 编排微服务. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 227\n14.1 Docker Compose 简介227\n14.2 安装Docker Compose 227\n14.2.1 安装Compose 228\n14.2.2 安装Compose 命令补全工具228\n14.3 Docker Compose 快速入门229\n14.3.1 基本步骤229\n14.3.2 入门示例229\n14.3.3 工程、服务、容器230\n14.4 docker-compose.yml 常用命令230\n14.4.1 build 230\n14.4.2 command 231\n14.4.3 dns 231\n14.4.4 dns_search 231\n14.4.5 environment 231\n14.4.6 env_file 232\n14.4.7 expose 232\n14.4.8 external_links 232\n14.4.9 image 232\n14.4.10 links 232\n14.4.11 networks 233\n14.4.12 network_mode 233\n14.4.13 ports 233\n14.4.14 volumes 233\n14.4.15 volumes_from 234\n14.5 docker-compose 常用命令234\n14.5.1 build 234\n14.5.2 help 235\n14.5.3 kill 235\n14.5.4 logs 235\n14.5.5 port 235\n14.5.6 ps 235\n14.5.7 pull 235\n14.5.8 rm 236\n14.5.9 run 236\n14.5.10 scale 236\n14.5.11 start 236\n14.5.12 stop 236\n14.5.13 up 236\n14.6 Docker Compose 网络设置237\n14.6.1 基本概念237\n14.6.2 更新容器237\n14.6.3 links 238\n14.6.4 指定自定义网络238\n14.6.5 配置默认网络239\n14.6.6 使用已存在的网络239\n14.7 综合实战：使用Docker Comose 编排Spring Cloud 微服务240\n14.7.1 编排Spring Cloud 微服务240\n14.7.2 编排高可用的Eureka Server 243\n14.7.3 编排高可用Spring Cloud 微服务集群及动态伸缩245\n14.8 常见问题与总结247\n后记. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 248","pages":"268","images":{"small":"https://img9.doubanio.com\/view\/subject\/s\/public\/s29434185.jpg","large":"https://img9.doubanio.com\/view\/subject\/l\/public\/s29434185.jpg","medium":"https://img9.doubanio.com\/view\/subject\/m\/public\/s29434185.jpg"},"alt":"https:\/\/book.douban.com\/subject\/27028228\/","id":"27028228","publisher":"电子工业出版社","isbn10":"7121312719","isbn13":"9787121312717","title":"Spring Cloud与Docker微服务架构实战","url":"https:\/\/api.douban.com\/v2\/book\/27028228","alt_title":"","author_intro":"周立，Spring Cloud中国社区联合发起人。拥有近7年的软件系统开发经验，多年系统架构经验。对Spring Cloud、微服务、持续集成、持续交付有一定见地。\n热爱技术交流，曾代表公司参加全球微服务架构高峰论坛、QCon等技术沙龙。拥抱开源，在GitHub与Git@OSC上开源多个项目，并获得了开源中国的推荐，例如开源电子书《使用Spring Cloud与Docker实战微服务》等。\n笔者博客：http:\/\/itmuch.com，定期分享Spring Cloud相关博客。读者可扫码关注Spring Cloud 中国社区公众号以及作者公众号。","summary":"作为一部帮助大家实现微服务架构落地的作品，《Spring Cloud与Docker微服务架构实战》覆盖了微服务理论、微服务开发框架（Spring Cloud）以及运行平台（Docker）三大主题。全书可分为三部分，第1章对微服务架构进行了系统的介绍；第2-11章使用Spring Cloud开发框架编写了一个“电影售票系统”；第12-14章则讲解了如何将微服务应用运行在Docker之上。全书Demo驱动学习，以连贯的场景、具体的代码示例来引导读者学习相关知识，最终使用特定的技术栈实现微服务架构的落地。","price":"69"},{"rating":{"max":10,"numRaters":67,"average":"7.7","min":0},"subtitle":"","author":["尹吉欢　著"],"pubdate":"2019-6-18","tags":[{"count":48,"name":"SpringCloud","title":"SpringCloud"},{"count":41,"name":"微服务","title":"微服务"},{"count":30,"name":"好书，值得一读","title":"好书，值得一读"},{"count":19,"name":"Spring","title":"Spring"},{"count":16,"name":"java","title":"java"},{"count":12,"name":"微服务，算法，好书","title":"微服务，算法，好书"},{"count":7,"name":"计算机","title":"计算机"},{"count":5,"name":"云计算","title":"云计算"}],"origin_title":"","image":"https://img3.doubanio.com\/view\/subject\/m\/public\/s33305372.jpg","binding":"平装","translator":[],"catalog":"Contents 目　　录\n赞誉\n前言\n第一部分　准备篇\n第1章　Spring Cloud 与微服务概述  2\n1.1　传统的单体应用  2\n1.1.1　改进单体应用的架构  2\n1.1.2　向微服务靠拢  3\n1.2　什么是微服务  4\n1.2.1　使用微服务架构的优势和劣势  4\n1.2.2　重构前的准备工作  5\n1.3　什么是Spring Cloud  5\n1.3.1　Spring Cloud模块介绍  6\n1.3.2　Spring Cloud版本介绍  6\n1.4　本章小结  7\n第2章　实战前的准备工作  8\n2.1　开发环境的准备  8\n2.2　Spring Boot入门  9\n2.2.1　Spring Boot简介  9\n2.2.2　搭建Spring Boot项目  9\n2.2.3　编写第一个REST接口  11\n2.2.4　读取配置文件  11\n2.2.5　profiles多环境配置  13\n2.2.6　热部署  13\n2.2.7　actuator监控  15\n2.2.8　自定义actuator端点  17\n2.2.9　统一异常处理  18\n2.2.10　异步执行  20\n2.2.11　随机端口  22\n2.2.12　编译打包  24\n2.3　Spring Boot Starter自定义  25\n2.3.1　Spring Boot Starter项目创建  25\n2.3.2　自动创建客户端  26\n2.3.3　使用Starter  27\n2.3.4　使用注解开启Starter自动构建  27\n2.3.5　使用配置开启Starter自动构建  28\n2.3.6　配置Starter内容提示  29\n2.4　本章小结  29\n第二部分　基础篇\n第3章　Eureka 注册中心  32\n3.1　Eureka  32\n3.2　使用 Eureka 编写注册中心服务  33\n3.3　编写服务提供者  35\n3.3.1　创建项目注册到Eureka  35\n3.3.2　编写提供接口  36\n3.4　编写服务消费者  37\n3.4.1　直接调用接口  37\n3.4.2　通过Eureka来消费接口  38\n3.5　开启 Eureka 认证  38\n3.6　Eureka 高可用搭建  39\n3.6.1　高可用原理  39\n3.6.2　搭建步骤  40\n3.7　常用配置讲解  41\n3.7.1　关闭自我保护  41\n3.7.2　自定义Eureka的\nInstanceID  41\n3.7.3　自定义实例跳转链接  42\n3.7.4　快速移除已经失效的服务信息  43\n3.8　扩展使用  44\n3.8.1　Eureka REST API  44\n3.8.2　元数据使用  46\n3.8.3　EurekaClient使用  47\n3.8.4　健康检查  49\n3.8.5　服务上下线监控  50\n3.9　本章小结  51\n第4章　客户端负载均衡 Ribbon  52\n4.1　Ribbon  52\n4.1.1　Ribbon模块  52\n4.1.2　Ribbon 使用  53\n4.2　RestTemplate 结合 Ribbon 使用  54\n4.2.1　使用 RestTemplate 与整合 Ribbon  54\n4.2.2　RestTemplate 负载均衡示例  57\n4.2.3　@LoadBalanced 注解原理  58\n4.2.4　Ribbon API 使用  62\n4.2.5　Ribbon 饥饿加载  63\n4.3　负载均衡策略介绍  64\n4.4　自定义负载策略  65\n4.5　配置详解  66\n4.5.1　常用配置  66\n4.5.2　代码配置 Ribbon  67\n4.5.3　配置文件方式配置Ribbon  67\n4.6　重试机制  68\n4.7　本章小结  69\n第5章　声明式REST客户端Feign  70\n5.1　使用 Feign 调用服务接口  70\n5.1.1　在Spring Cloud中集成Feign  71\n5.1.2　使用Feign调用接口  71\n5.2　自定义 Feign的配置  72\n5.2.1　日志配置  72\n5.2.2　契约配置  73\n5.2.3　Basic认证配置  74\n5.2.4　超时时间配置  75\n5.2.5　客户端组件配置  75\n5.2.6　GZIP压缩配置  76\n5.2.7　编码器解码器配置  77\n5.2.8　使用配置自定义Feign的配置  78\n5.2.9　继承特性  78\n5.2.10　多参数请求构造  80\n5.3　脱离 Spring Cloud 使用 Feign  80\n5.3.1　原生注解方式  81\n5.3.2　构建Feign对象  82\n5.3.3　其他配置  83\n5.4　本章小结  83\n第6章　Hystrix 服务容错处理  84\n6.1　Hystrix  84\n6.1.1　Hystrix的简单使用  84\n6.1.2　回退支持  85\n6.1.3　信号量策略配置  86\n6.1.4　线程隔离策略配置  86\n6.1.5　结果缓存  87\n6.1.6　缓存清除  88\n6.1.7　合并请求  89\n6.2　在 Spring Cloud 中使用Hystrix  91\n6.2.1　简单使用  91\n6.2.2　配置详解  92\n6.2.3　Feign整合Hystrix服务容错  95\n6.2.4　Feign中禁用Hystrix  97\n6.3　Hystrix 监控  97\n6.4　整合 Dashboard 查看监控数据  98\n6.5　Turbine 聚合集群数据  100\n6.5.1　Turbine使用  100\n6.5.2　context-path导致监控失败  101\n6.6　本章小结  102\n第7章　API网关  103\n7.1　Zuul 简介  103\n7.2　使用 Zuul 构建微服务网关  104\n7.2.1　简单使用  104\n7.2.2　集成Eureka  105\n7.3　Zuul 路由配置  105\n7.4　Zuul过滤器讲解  106\n7.4.1　过滤器类型  106\n7.4.2　请求生命周期  107\n7.4.3　使用过滤器  108\n7.4.4　过滤器禁用  109\n7.4.5　过滤器中传递数据  110\n7.4.6　过滤器拦截请求  111\n7.4.7　过滤器中异常处理  113\n7.5　Zuul 容错和回退  115\n7.5.1　容错机制  115\n7.5.2　回退机制  116\n7.6　Zuul使用小经验  118\n7.6.1　\/routes 端点  118\n7.6.2　\/filters 端点  118\n7.6.3　文件上传  119\n7.6.4　请求响应信息输出  121\n7.6.5　Zuul自带的Debug功能  124\n7.7　Zuul 高可用  126\n7.8　本章小结  127\n第三部分　实战篇\n第8章　API 网关之Spring Cloud Gateway  130\n8.1　Spring Cloud Gateway介绍  130\n8.2　Spring Cloud Gateway工作原理  131\n8.3　Spring Cloud Gateway快速上手  131\n8.3.1　创建Gateway项目  131\n8.3.2　路由转发示例  132\n8.3.3　整合Eureka路由  133\n8.3.4　整合Eureka的默认路由  133\n8.4　Spring Cloud Gateway路由断言工厂  134\n8.4.1　路由断言工厂使用  134\n8.4.2　自定义路由断言工厂  136\n8.5　Spring Cloud Gateway过滤器工厂  137\n8.5.1　Spring Cloud Gateway过滤器工厂使用  137\n8.5.2　自定义Spring Cloud Gateway过滤器工厂  138\n8.6　全局过滤器  140\n8.7　实战案例  143\n8.7.1　限流实战  143\n8.7.2　熔断回退实战  145\n8.7.3　跨域实战  145\n8.7.4　统一异常处理  147\n8.7.5　重试机制  150\n8.8　本章小结  151\n第9章　自研分布式配置管理  152\n9.1　自研配置管理框架 Smconf 简介  152\n9.2　Smconf 工作原理  153\n9.3　Smconf 部署  154\n9.3.1　Mongodb 安装  154\n9.3.2　Zookeeper 安装  155\n9.3.3　Smconf Server 部署  156\n9.4　项目中集成 Smconf  157\n9.4.1　集成Smconf  157\n9.4.2　使用Smconf  158\n9.4.3　配置更新回调  159\n9.5　Smconf 详细使用  160\n9.5.1　源码编译问题  160\n9.5.2　后台账号管理  160\n9.5.3　REST API  161\n9.6　Smconf 源码解析  163\n9.6.1　Client启动  163\n9.6.2　启动加载配置  165\n9.6.3　配置修改推送原理  166\n9.7　本章小结  167\n第10章　分布式配置中心Apollo  168\n10.1　Apollo简介  168\n10.2　Apollo的核心功能点  168\n10.3　Apollo核心概念  170\n10.4　Apollo本地部署  171\n10.5　Apollo Portal管理后台使用  172\n10.6　Java中使用Apollo  174\n10.6.1　普通Java项目中使用  174\n10.6.2　Spring Boot中使用  177\n10.7　Apollo的架构设计  179\n10.7.1　Apollo架构设计介绍  179\n10.7.2　Apollo服务端设计  181\n10.7.3　Apollo客户端设计  188\n10.7.4　Apollo高可用设计  195\n10.8　本章小结  196\n第11章　Sleuth 服务跟踪  197\n11.1　Spring Cloud 集成 Sleuth  197\n11.2　整合 Logstash  198\n11.2.1　ELK 简介  198\n11.2.2　输出 JSON 格式日志  198\n11.3　整合 Zipkin  200\n11.3.1　Zipkin 数据收集服务  200\n11.3.2　项目集成 Zipkin 发送调用链数据  201\n11.3.3　抽样采集数据  203\n11.3.4　异步任务线程池定义  203\n11.3.5　TracingFilter  204\n11.3.6　监控本地方法  205\n11.3.7　过滤不想跟踪的请求  206\n11.3.8　用 RabbitMq 代替 Http 发送调用链数据  206\n11.3.9　用 Elasticsearch 存储调用链数据  207\n11.4　本章小结  208\n第12章　微服务之间调用的安全认证  209\n12.1　什么是 JWT  209\n12.2　创建统一的认证服务  210\n12.2.1　表结构  210\n12.2.2　JWT工具类封装  210\n12.2.3　认证接口  212\n12.3　服务提供方进行调用认证  212\n12.4　服务消费方申请 Token  214\n12.5　Feign 调用前统一申请 Token 传递到调用的服务中  216\n12.6　RestTemplate调用前统一申请 Token 传递到调用的服务中  217\n12.7　Zuul 中传递 Token 到路由的服务中  218\n12.8　本章小结  219\n第13章　Spring Boot Admin  220\n13.1　Spring Boot Admin 的使用方法  220\n13.1.1　创建 Spring Boot Admin项目  220\n13.1.2　将服务注册到 Spring Boot Admin  221\n13.1.3　监控内容介绍  223\n13.1.4　如何在 Admin 中查看各个服务的日志  225\n13.2　开启认证  226\n13.3　集成 Eureka  227\n13.4　监控服务  228\n13.4.1　邮件警报  228\n13.4.2　自定义钉钉警报  229\n13.5　本章小结  232\n第14章　服务的API文档管理  233\n14.1　Swagger 简介  233\n14.2　集成 Swagger 管理 API 文档  234\n14.2.1　项目中集成 Swagger  234\n14.2.2　使用 Swagger 生成文档  234\n14.2.3　在线测试接口  235\n14.3　Swagger 注解  236\n14.4　Eureka 控制台快速查看 Swagger 文档  240\n14.5　请求认证  240\n14.6　Zuul中聚合多个服务Swagger  241\n14.7　本章小结  242\n第四部分　高级篇\n第15章　API 网关扩展  244\n15.1　用户认证  244\n15.1.1　动态管理不需要拦截的 API 请求  244\n15.1.2　创建认证的用户服务  246\n15.1.3　路由之前的认证  247\n15.1.4　向下游微服务中传递认证之后的用户信息  248\n15.1.5　内部服务间的用户信息传递  248\n15.2　服务限流  250\n15.2.1　限流算法  250\n15.2.2　单节点限流  251\n15.2.3　集群限流  255\n15.2.4　具体服务限流  258\n15.2.5　具体接口限流  258\n15.3　服务降级  262\n15.4　灰度发布  264\n15.4.1　原理讲解  264\n15.4.2　根据用户做灰度发布  265\n15.4.3　根据 IP 做灰度发布  268\n15.5　本章小结  268\n第16章　微服务之缓存  269\n16.1　Guava Cache 本地缓存  269\n16.1.1　Guava Cache 简介  269\n16.1.2　代码示例  270\n16.1.3　回收策略  270\n16.2　Redis 缓存  271\n16.2.1　用 Redistemplate 操作 Redis  271\n16.2.2　用 Repository 操作 Redis  272\n16.2.3　Spring Cache 缓存数据  274\n16.2.4　缓存异常处理  278\n16.2.5　自定义缓存工具类  279\n16.3　防止缓存穿透方案  282\n16.3.1　什么是缓存穿透  282\n16.3.2　缓存穿透的危害  282\n16.3.3　解决方案  282\n16.3.4　布隆过滤器介绍  283\n16.3.5　代码示例  283\n16.4　防止缓存雪崩方案  284\n16.4.1　什么是缓存雪崩  284\n16.4.2　缓存雪崩的危害  284\n16.4.3　解决方案  284\n16.4.4　代码示例  285\n16.4.5　分布式锁方式  285\n16.5　本章小结  286\n第17章　微服务之存储  287\n17.1　存储选型  287\n17.2　Mongodb  288\n17.2.1　集成 Spring Data Mongodb  288\n17.2.2　添加数据操作  288\n17.2.3　索引使用  290\n17.2.4　修改数据操作  291\n17.2.5　删除数据操作  293\n17.2.6　查询数据操作  294\n17.2.7　GridFS 操作  295\n17.2.8　用 Repository方式操作数据  296\n17.2.9　自增 ID 实现  300\n17.2.10　批量更新扩展  303\n17.3　Mysql  304\n17.3.1　集成 Spring Jdbc-Template  304\n17.3.2　JdbcTemplate 代码示例  305\n17.3.3　封装 JdbcTemplate 操作 Mysql 更简单  305\n17.3.4　扩展 JdbcTemplate 使用方式  306\n17.3.5　常见问题  310\n17.4　Elasticsearch  312\n17.4.1　集成 Spring Data Elasticsearch  312\n17.4.2　Repository 示例  312\n17.4.3　ElasticsearchTemplate 示例  315\n17.4.4　索引构建方式  318\n17.5　本章小结  319\n第18章　微服务之分布式事务解决方案  320\n18.1　两阶段型  320\n18.2　TCC 补偿型  321\n18.3　最终一致性  321\n18.3.1　原理讲解  321\n18.3.2　创建可靠性消息服务  323\n18.3.3　消息存储表设计  324\n18.3.4　提供服务接口  325\n18.3.5　创建消息发送系统  329\n18.3.6　消费消息逻辑  332\n18.3.7　消息管理系统  335\n18.4　最大努力通知型事务  335\n18.5　本章小结  335\n第19章　分布式任务调度  336\n19.1　Elastic-Job  336\n19.1.1　Elastic-Job 介绍  336\n19.1.2　任务调度目前存在的问题  336\n19.1.3　为什么选择 Elastic-Job  337\n19.2　快速集成  338\n19.3　任务使用  339\n19.3.1　简单任务  339\n19.3.2　数据流任务  340\n19.3.3　脚本任务  340\n19.4　配置参数讲解  341\n19.4.1　注册中心配置  341\n19.4.2　作业配置  342\n19.4.3　dataflow 独有配置  343\n19.4.4　script独有配置  343\n19.5　多节点并行调度  344\n19.5.1　分片概念  344\n19.5.2　任务节点分片策略  344\n19.5.3　业务数据分片处理  345\n19.6　事件追踪  347\n19.7　扩展功能  349\n19.7.1　自定义监听器  349\n19.7.2　定义异常处理  349\n19.8　运维平台  350\n19.8.1　功能列表  350\n19.8.2　部署运维平台  351\n19.8.3　运维平台使用  351\n19.9　使用经验分享  355\n19.9.1　任务的划分和监控  355\n19.9.2　任务的扩展性和节点数量  355\n19.9.3　任务的重复执行  355\n19.9.4　overwrite 覆盖问题  356\n19.9.5　流水式任务  356\n19.10　本章小结  357\n第20章　分库分表解决方案  358\n20.1　Sharding-JDBC  358\n20.1.1　介绍  358\n20.1.2　功能列表  359\n20.1.3　相关概念  359\n20.2　快速集成  360\n20.3　读写分离实战  362\n20.3.1　准备数据  362\n20.3.2　配置读写分离  363\n20.3.3　验证读从库  363\n20.3.4　验证写主库  365\n20.3.5　Hint 强制路由主库  366\n20.4　分库分表实战  367\n20.4.1　常用分片算法  367\n20.4.2　使用分片算法  368\n20.4.3　不分库只分表实战  368\n20.4.4　既分库又分表实战  372\n20.5　分布式主键  375\n20.6　本章小结  377\n第21章　最佳生产实践经验  378\n21.1　开发环境和测试环境共用Eureka  378\n21.2　Swagger和Actuator访问进行权限控制  379\n21.3　Spring Boot Admin监控被保护的服务  380\n21.4　Apollo配置中心简化版搭建分享  380\n21.5　Apollo使用小经验  382\n21.5.1　公共配置  382\n21.5.2　账号权限  383\n21.5.3　环境配置和项目配置  385\n21.6　Apollo动态调整日志级别  385\n21.7　Apollo存储加密  387\n21.8　扩展Apollo支持存储加解密  390\n21.9　Apollo结合Zuul实现动态路由  391\n21.10　Apollo整合Archaius  393\n21.11　Elastic-Job的Spring-Boot-Starter封装  394\n21.12　Spring Boot中Mongodb多数据源封装  396\n21.13　Zuul中对API进行加解密  398\n21.14　本章小结  400","pages":"400","images":{"small":"https://img3.doubanio.com\/view\/subject\/s\/public\/s33305372.jpg","large":"https://img3.doubanio.com\/view\/subject\/l\/public\/s33305372.jpg","medium":"https://img3.doubanio.com\/view\/subject\/m\/public\/s33305372.jpg"},"alt":"https:\/\/book.douban.com\/subject\/34441728\/","id":"34441728","publisher":"机械工业出版社","isbn10":"7111627318","isbn13":"9787111627319","title":"Spring Cloud微服务：入门、实战与进阶","url":"https:\/\/api.douban.com\/v2\/book\/34441728","alt_title":"","author_intro":"资深Java技术专家和微服务技术专家，在Spring Cloud和微服务方面有丰富的经验。喜欢写代码，研究技术，主要关注分布式、高并发、后端服务，座右铭是“简单的技术爱好者”。\n一直在上海从事Java服务端开发工作，前端也略有涉及。曾就职于鲁班软件，一起唱等互联网公司，目前就职于房产大数据公司房价网，担任技术经理，负责公司产品的开发和管理工作。\n2016年创办了自己的技术网站‘猿天地’，主要提供Java相关技术的分享和视频课程。","summary":"这是一部从技术原理、工程实践和进阶提升3个维度讲解Spring Cloud微服务架构与开发的著作。\n作者在Spring Cloud微服务领域有丰富的工程实践经验，它将带领读者零基础入门Spring Cloud微服务，并快速掌握动手实践能力，最终进阶为Spring Cloud微服务领域的技术达人。\n全书共21章，分为4个部分：\n第一部分 准备篇（第1~2章）\n首先对微服务和Spring Cloud的概念、优劣势、功能模块等做了整体性的介绍，然后演示了如何搭建Spring Cloud的开发环境，最后对Spring Boot做了详细的介绍。\n第二部分 基础篇（第3~7章）\n对Eureka 注册中心、客户端负载均衡 Ribbon、声明式 REST 客户端 Feign、Hystrix 服务容错处理、API 网关等Spring Cloud的重要模块的技术原理、配置、使用等做了详尽的讲解。\n第三部分 实战篇（第8~14章）\n对微服务架构中的普遍问题给出了实战解决方案，包括选择配置中心、自研发配置中心、分布式跟踪、微服务安全认证、Spring Boot Admin 管理微服务、快速生成 API 文档等实用性内容。\n第四部分 高级篇（15-21）\n重点讲解了Spring Cloud的扩展性的使用，比如API网关、微服务的缓存和存储、分布式事务解决方案、任务调度、分库分表，以及大量优秀的生产实践经验等。","series":{"id":"34304","title":"云计算与虚拟化技术丛书"},"price":"89.00元"},{"rating":{"max":10,"numRaters":9,"average":"0.0","min":0},"subtitle":"Spring Boot、Spring Cloud与Cloud Foundry弹性系统设计","author":["乔西·朗 (Josh Long)","肯尼·巴斯塔尼 (Kenny Bastani)"],"pubdate":"2018-7-1","tags":[{"count":18,"name":"Java","title":"Java"},{"count":10,"name":"微服务","title":"微服务"},{"count":9,"name":"云原生Java","title":"云原生Java"},{"count":6,"name":"计算机","title":"计算机"},{"count":3,"name":"云原生","title":"云原生"},{"count":2,"name":"软件开发","title":"软件开发"},{"count":2,"name":"架构","title":"架构"},{"count":2,"name":"java","title":"java"}],"origin_title":"Cloud Native Java: Designing Resilient Systems with Spring Boot, Spring Cloud, and Cloud Foundry","image":"https://img3.doubanio.com\/view\/subject\/m\/public\/s29873853.jpg","binding":"平装","translator":["张若飞","宋净超"],"catalog":"目录\n前言（James Watters）.......................................................xv\n前言（Rod Johnson）........................................................ xvii\n前言................................................................................ xix\n第Ⅰ部分　基础知识\n第1 章　云原生应用程序.......................................................... 3\n亚马逊的故事 ........................................................................................................ 3\n平台的承诺 ............................................................................................................ 5\n模式 ........................................................................................................................ 7\n可扩展性 ................................................................................................................. 7\n可靠性 .................................................................................................................... 8\n敏捷性 ..................................................................................................................... 8\nNetflix 的故事 ......................................................................................................... 9\n微服务 ................................................................................................................. 11\n拆分单体系统 ...................................................................................................... 12\nNetflix OSS ......................................................................................................... 13\n云原生Java ......................................................................................................... 14\n十二要素原则 ....................................................................................................... 14\n代码库 ................................................................................................................. 15\n依赖 ..................................................................................................................... 15\n配置 ..................................................................................................................... 16\nx ｜ 目录\n后端服务 ............................................................................................................. 17\n构建、发布、运行 .............................................................................................. 17\n进程 ..................................................................................................................... 17\n端口绑定 ............................................................................................................. 18\n并发 ..................................................................................................................... 18\n易处理 ................................................................................................................. 18\n开发\/ 生产环境一致 ........................................................................................... 19\n日志 ..................................................................................................................... 19\n管理进程 ............................................................................................................. 19\n总结 ........................................................................................................................ 20\n第2 章　训练营：Spring Boot 和Cloud Foundry......................21\n什么是Spring Boot ................................................................................................ 21\nSpring Initializr 入门 .............................................................................................. 21\nSpring Tool Suite 入门 ............................................................................................ 30\n安装Spring Tool Suite（STS）............................................................................. 30\n使用Spring Initializr 创建一个新项目 ................................................................ 31\nSpring 指南大全 ................................................................................................... 36\n遵循STS 中的指南 ............................................................................................. 38\n配置 ....................................................................................................................... 40\nCloud Foundry 平台 ............................................................................................... 52\n总结 ....................................................................................................................... 66\n第3 章　符合十二要素程序风格的配置....................................... 67\n令人迷惑的“配置”合并 ........................................................................................... 67\nSpring 框架对配置的支持 .................................................................................... 67\nPropertyPlaceholderConfigurer ............................................................................ 68\nEnvironment 接口和@Value 注解 ....................................................................... 69\nProfile .................................................................................................................. 71\n启动配置 ............................................................................................................. 73\n使用Spring Cloud Config Server 进行中心化、日志型的配置................................... 76\nSpring Cloud Config Server ................................................................................. 76\nSpring Cloud Config 客户端 ................................................................................ 78\n安全 ..................................................................................................................... 79\n目录 ｜ xi\n可刷新的配置 ....................................................................................................... 79\n总结 ...................................................................................................................... 83\n第４章　测试..................................................................... 85\n测试的构成 ........................................................................................................... 86\n在Spring Boot 中进行测试 ................................................................................... 86\n集成测试 ............................................................................................................. 88\n测试切片 ............................................................................................................. 89\n测试中的Mock ................................................................................................... 89\n使用@SpringBootTest 中的Servlet 容器 ............................................................ 93\n测试分片 ............................................................................................................. 94\n端到端测试 ......................................................................................................... 102\n测试分布式系统 ................................................................................................ 102\n消费者驱动的契约测试 ..................................................................................... 104\nSpring Cloud Contract ....................................................................................... 105\n总结 .................................................................................................................... 113\n第5 章　迁移遗留的应用程序................................................. 115\n契约 .................................................................................................................... 115\n迁移应用程序环境 ................................................................................................ 116\n开箱即用的构建包（Buildpacks） ..................................................................... 116\n自定义的构建包 ................................................................................................ 117\n容器化的应用程序 ............................................................................................ 118\n将应用程序迁移到云上的微重构 ........................................................................ 119\n连接后端服务 .................................................................................................... 120\n用Spring 实现服务平等 .................................................................................... 121\n总结 .................................................................................................................... 133\n第Ⅱ部分　Web 服务\n第6 章　REST API........................................................... 137\n伦纳德· 理查森的成熟模型 .................................................................................. 137\n使用Spring MVC 实现简单的REST API ................................................................. 139\n内容协商 .............................................................................................................. 142\nxii ｜ 目录\n读写二进制数据 ................................................................................................ 142\nGoogle Protocol Buffers .................................................................................... 145\n错误处理 ............................................................................................................. 150\n超媒体 ................................................................................................................. 152\n媒体类型和模式 ................................................................................................ 158\nAPI 版本 ............................................................................................................. 159\n编写REST API 文档 ........................................................................................... 162\n客户端 ................................................................................................................ 167\n用于临时浏览和交互的REST 客户端 ............................................................... 167\nRestTemplate ..................................................................................................... 171\n总结 ................................................................................................................... 177\n第7 章　路由.................................................................... 179\nDiscoveryClient 接口 .......................................................................................... 180\nCloud Foundry Route 服务 .................................................................................. 190\n总结 ...................................................................................................................... 195\n第8 章　边缘服务............................................................... 197\nGreetings 服务 ...................................................................................................... 198\n一个简单的边缘服务 ........................................................................................... 200\nNetflix Feign ........................................................................................................ 202\n使用Netflix Zuul 进行过滤和代理 ........................................................................... 204\n自定义Zuul 过滤器 ........................................................................................... 214\n边缘服务的安全 .................................................................................................... 218\nOAuth ................................................................................................................... 219\n服务端应用程序 ................................................................................................ 220\nHTML5 和JavaScript 单页面应用程序 ............................................................. 221\n没有用户的应用 ................................................................................................ 221\n受信任的客户端 ................................................................................................ 221\nSpring Security .................................................................................................... 222\nSpring Cloud Security ........................................................................................... 227\n一个Spring Security OAuth 授权服务器 ........................................................... 227\n保护Greetings 资源服务器的安全 .................................................................... 232\n创建一个受OAuth 保护的单页面应用程序 ...................................................... 238\n总结 ..................................................................................................................... 247\n目录 ｜ xiii\n第Ⅲ部分　数据整合\n第9 章　数据管理............................................................... 251\n数据建模 ............................................................................................................... 251\n关系数据库管理系统（RDBMS） ...................................................................... 252\nNoSQL............................................................................................................... 253\nSpring Data ......................................................................................................... 253\nSpring Data 应用程序的结构 ............................................................................. 254\n域类 ................................................................................................................... 254\n库 ...................................................................................................................... 254\n为领域数据组织Java 包 .................................................................................... 255\n使用JDBC 访问RDBMS 数据 ............................................................................... 258\nSpring 的JDBC 支持 ........................................................................................... 259\nSpring Data 示例 ................................................................................................. 261\nSpring Data JPA.................................................................................................... 264\nAccount Service ................................................................................................. 264\n集成测试 ........................................................................................................... 274\nSpring Data MongoDB ......................................................................................... 275\nOrder Service ..................................................................................................... 275\n集成测试 ........................................................................................................... 282\nSpring Data Neo4j ............................................................................................... 284\nInventory Service ............................................................................................... 284\n集成测试 ........................................................................................................... 294\nSpring Data Redis ................................................................................................ 297\n高速缓存 ........................................................................................................... 298\n总结 .................................................................................................................... 302\n第10 章　消息系统............................................................. 303\nSpring Integration 的事件驱动架构 ..................................................................... 304\n消息端点 ........................................................................................................... 305\n使用简单的组件构建复杂的系统 ...................................................................... 306\n消息代理、桥接、竞争消费者模式和事件溯源 ................................................... 314\n发布—订阅目的地 ............................................................................................ 314\n点对点目的地 .................................................................................................... 315\nxiv ｜ 目录\nSpring Cloud Stream .......................................................................................... 315\n流生产者 ........................................................................................................... 316\n流消费者 ........................................................................................................... 321\n总结 .................................................................................................................... 323\n第11 章　批处理和任务........................................................ 325\n批处理工作 ........................................................................................................ 325\nSpring Batch ....................................................................................................... 326\n我们的第一个批处理作业 ................................................................................. 327\n调度 .................................................................................................................... 336\n通过消息传递远程分区Spring 批处理作业 ............................................................. 337\n任务管理 ............................................................................................................. 346\n通过Workflow 进行的以工作流为中心的整合 ........................................................ 348\n使用消息传递的分布式......................................................................................... 362\n总结 ..................................................................................................................... 362\n第12 章　数据集成............................................................. 363\n分布式事务 .......................................................................................................... 364\n故障隔离和优雅的降级........................................................................................ 364\nsaga 模式 ............................................................................................................. 369\nCQRS（命令查询责任分离） .............................................................................. 369\n投诉API ............................................................................................................ 371\n投诉统计API .................................................................................................... 383\nSpring Cloud Data Flow ...................................................................................... 385\nStream ............................................................................................................... 387\n任务 ................................................................................................................... 390\nREST API .......................................................................................................... 391\n实现Data Flow 客户端 ...................................................................................... 392\n总结 .................................................................................................................... 407\n第IV 部分　生产\n第13 章　可观测的系统....................................................... 411\n你构建，你运行 ................................................................................................. 412\n目录 ｜ xv\n谋杀神秘微服务 .................................................................................................. 413\n十二要素运维 ..................................................................................................... 413\n新方式 ................................................................................................................. 414\n可观测性 ............................................................................................................ 416\n推与拉的可观测性和解析率 ................................................................................ 416\n使用Spring Boot Actuator 捕获应用程序的当前状态 .......................................... 417\n度量 ...................................................................................................................... 418\n通过\/info 端点识别服务 ......................................................................................... 431\n健康检查 ............................................................................................................. 432\n审计事件 .............................................................................................................. 436\n应用程序日志 ...................................................................................................... 439\n指定日志输出 .................................................................................................... 440\n指定日志级别 .................................................................................................... 441\n分布式跟踪 ......................................................................................................... 445\n用Spring Cloud Sleuth 寻找线索 ...................................................................... 446\n多少数据是足够的 ............................................................................................ 447\nOpenZipkin ：一张图片胜过千丝万缕 ............................................................... 448\n跟踪其他平台和技术 ......................................................................................... 454\n仪表板 ................................................................................................................ 455\n使用Hystrix 仪表板监控下游服务 .................................................................... 455\nCodecentric 的Spring Boot Admin .................................................................... 459\nOrdina Microservices 仪表板 ............................................................................. 462\nPivotal Cloud Foundry 的AppsManager ............................................................ 463\n修复 .................................................................................................................. 465\n总结 ................................................................................................................... 467\n第14 章　服务代理.............................................................................................469\n创建后台服务 .................................................................................................. 470\n平台视图 ............................................................................................................ 472\n使用Spring Cloud Cloud Foundry Service Broker 实现服务代理 ........................ 473\n简单的Amazon S3 服务代理 ............................................................................ 473\n服务目录 ........................................................................................................... 474\n管理服务实例 .................................................................................................... 476\n服务绑定 ........................................................................................................... 482\n保护服务代理 .................................................................................................... 486\nxvi ｜ 目录\n部署 ................................................................................................................... 487\n使用BOSH 发布 ............................................................................................... 487\n使用Cloud Foundry 发布 .................................................................................. 488\n注册Amazon S3 Service Broker ....................................................................... 489\n创建Amazon S3 服务实例 ................................................................................ 490\n消费服务实例 .................................................................................................... 491\nS3 客户端应用程序 ........................................................................................... 493\n运行测试 ........................................................................................................... 496\n总结 .................................................................................................................. 496\n第15 章　持续交付.............................................................497\n持续集成之外 .................................................................................................. 497\nJohn Allspaw 在Flickr 以及后来的Etsy ........................................................... 498\nNetflix 的Adrian Cockroft ................................................................................ 499\n亚马逊的持续交付 ............................................................................................ 500\n流水线 ................................................................................................................ 500\n测试 .................................................................................................................... 501\n持续交付微服务 ................................................................................................502\n工具 .................................................................................................................. 503\nConcourse ......................................................................................................... 503\n容器 ................................................................................................................... 504\n持续交付微服务 ................................................................................................. 504\n安装Concourse ................................................................................................. 505\n基本的管道设计 ................................................................................................ 506\n持续集成 ........................................................................................................... 518\n消费者驱动的协约测试......................................................................................  518\nUser 微服务流水线 ............................................................................................ 519\n数据 ................................................................................................................... 522\n生产 ................................................................................................................... 523\n第V 部分　附录\n附录A　在Java EE 中使用Spring Boot................................527\n索引............................................................................... 552","pages":"600","images":{"small":"https://img3.doubanio.com\/view\/subject\/s\/public\/s29873853.jpg","large":"https://img3.doubanio.com\/view\/subject\/l\/public\/s29873853.jpg","medium":"https://img3.doubanio.com\/view\/subject\/m\/public\/s29873853.jpg"},"alt":"https:\/\/book.douban.com\/subject\/30270037\/","id":"30270037","publisher":"电子工业出版社","isbn10":"7121342510","isbn13":"9787121342516","title":"云原生Java","url":"https:\/\/api.douban.com\/v2\/book\/30270037","alt_title":"Cloud Native Java: Designing Resilient Systems with Spring Boot, Spring Cloud, and Cloud Foundry","author_intro":"Josh Long是一名Spring developer advocate，是InfoQ.com Java团队的编辑。他也是多部著作的主要作者，如Spring Recipes, 2nd Edition(Apress)。\nKenny Bastani是Pivotal的一名Spring developer advocate。作为一名开源贡献者和软件架构博主（WWW.kennybastani.com），他为软件开发者提供关于构建事件驱动的微服务和无服务器架构方面的教程。他也在一些行业会议上做演讲，如OSCON、SpringOne Platform和GOTO大会。","summary":"无论是传统IT行业，还是互联网行业，都正处于行业历史上最剧烈的变革中 ：大量的系统正在从传统的IT架构转向基于云的架构， 开发模式也正在从开发和运维分工的传统模式，逐渐转向统一的“DevOps”模式。Java技术已经进入了新的生命周期，大量被用于构建现代的、基于云的应用程序。 本书详细阐述了开发云原生应用程序的机遇和挑战，明确指出了成功实现的方向，并且重点介绍了微服务框架Spring Boot。Spring Boot可以轻松创建任何粒度的 Spring服务，并部署到现代的容器环境中。本书主要面向正在使用 Spring Boot、SpringCloud和Cloud Foundry， 以便更快、更好地构建软件的Java\/JVM 开发人员。\n本书一共分为4个部分共15章。第1章和第2章介绍了云原生思想产生的背景，然后介绍了Spring Foundry。第3章介绍了如何配置Spring Boot应用程序。第4章介绍了如何测试Spring应用程序，从如何测试最简单的组件到测试分布式系统。第5章介绍了可以将应用程序迁移到Cloud Foundry等云平台的轻量级重构方式。第6章介绍了如何使用Spring构建HTTP和RESTful服务。第7章介绍了在分布式系统中控制请求进出的常用方法。第8章介绍了如何构建一个响应外部请求的服务。第9章介绍了如何使用Spring Data在Spring中管理数据。这为领域驱动的思想奠定了基础。第10章介绍了如何使用Spring中事件驱动、消息中心化的能力，来集成分布式服务和数据。第11章介绍了如何利用云平台（如Cloud Foundry）的能力来处理长期运行的工作。第12章介绍了在分布式系统中管理状态的一些方法。第13章介绍了如何构建具备可观测性和可操作性的系统。第14章介绍了如何构建类似于Cloud Foundry平台的服务代理。第15章介绍了持续交付背后的思想。","price":"CNY 128.00"},{"rating":{"max":10,"numRaters":5,"average":"0.0","min":0},"subtitle":"","author":["周立"],"pubdate":"2018-7","tags":[{"count":17,"name":"SpringCloud","title":"SpringCloud"},{"count":8,"name":"Docker","title":"Docker"},{"count":5,"name":"技术-SpringCloud","title":"技术-SpringCloud"},{"count":3,"name":"软件开发","title":"软件开发"},{"count":3,"name":"IT","title":"IT"},{"count":2,"name":"架构","title":"架构"},{"count":2,"name":"Java","title":"Java"},{"count":1,"name":"计算科学","title":"计算科学"}],"origin_title":"","image":"https://img3.doubanio.com\/view\/subject\/m\/public\/s29823921.jpg","binding":"平装","translator":[],"catalog":"1 微服务架构概述  1\n1.1 单体应用架构存在的问题  . 1\n1.2 如何解决单体应用架构存在的问题  3\n1.3 什么是微服务  . 3\n1.4 微服务架构的优点与挑战  . 4\n1.4.1 微服务架构的优点  5\n1.4.2 微服务架构面临的挑战  5\n1.5 微服务设计原则  6\n1.6 如何实现微服务架构  7\n1.6.1 技术选型  7\n1.6.2 架构图及常用组件  8\n2 微服务开发框架——Spring Cloud  . 9\n2.1 Spring Cloud 简介  . 9\n2.2 Spring Cloud 特点  . 10\n2.3 Spring Cloud 版本  . 10\n2.3.1 版本简介  10\n2.3.2 子项目一览  . 12\n2.3.3 Spring Cloud\/Spring Boot 版本兼容性  . 13\n3 开始使用Spring Cloud 实战微服务  14\n3.1 Spring Cloud 实战前提  14\n3.1.1 技术储备  14\n3.1.2 工具及软件版本  . 15\n3.2 服务提供者与服务消费者  . 16\n3.3 编写服务提供者  16\n3.3.1 手动编写项目  . 17\n3.3.2 使用Spring Initializr 快速创建Spring Boot 项目  . 21\n3.4 编写服务消费者  23\n3.5 为项目整合Spring Boot Actuator  . 25\n3.6 硬编码有哪些问题  28\n4 微服务注册与发现  30\n4.1 服务发现简介  . 30\n4.2 Eureka 简介  . 32\n4.3 Eureka 原理  . 32\n4.4 编写Eureka Server  34\n4.5 将微服务注册到Eureka Server 上  36\n4.6 Eureka Server 的高可用  38\n4.6.1 编写高可用Eureka Server  38\n4.6.2 将应用注册到Eureka Server 集群上  41\n4.7 用户认证  . 41\n4.7.1 为Eureka Server 添加用户认证  . 41\n4.7.2 将微服务注册到需认证的Eureka Server  43\n4.8 Eureka 的元数据  43\n4.8.1 改造用户微服务  . 43\n4.8.2 改造电影微服务  . 44\n4.9 Eureka Server 的REST 端点  46\n4.9.1 示例  47\n4.9.2 注销微服务实例  . 52\n4.10 Eureka 的自我保护模式  . 53\n4.11 多网卡环境下的IP 选择  . 54\n4.12 Eureka 的健康检查  56\n4.13 排除Jersey 依赖  . 57\n5 使用Ribbon 实现客户端侧负载均衡  . 59\n5.1 Ribbon 简介  59\n5.2 为服务消费者整合Ribbon  . 60\n5.3 Ribbon 配置自定义  63\n5.3.1 使用Java 代码自定义Ribbon 配置  63\n5.3.2 使用属性自定义Ribbon 配置  67\n5.4 脱离Eureka 使用Ribbon  68\n5.5 饥饿加载  . 70\n6 使用Feign 实现声明式REST 调用  . 72\n6.1 Feign 简介  73\n6.2 为服务消费者整合Feign  73\n6.3 自定义Feign 配置  . 75\n6.3.1 使用Java 代码自定义Feign 配置  . 75\n6.3.2 使用属性自定义Feign 配置  79\n6.4 手动创建Feign  80\n6.4.1 修改用户微服务  . 80\n6.4.2 修改电影微服务  . 84\n6.5 Feign 对继承的支持  . 86\n6.6 Feign 对压缩的支持  . 87\n6.7 Feign 的日志  87\n6.7.1 编码方式设置日志级别  88\n6.7.2 使用属性配置日志级别  89\n6.8 使用Feign 构造多参数请求  90\n6.8.1 GET 请求多参数的URL  . 90\n6.8.2 POST 请求包含多个参数  91\n6.9 使用Feign 上传文件  92\n7 使用Hystrix 实现微服务的容错处理  . 94\n7.1 实现容错的手段  94\n7.1.1 雪崩效应  95\n7.1.2 如何容错  95\n7.2 使用Hystrix 实现容错  . 97\n7.2.1 Hystrix 简介  . 97\n7.2.2 通用方式整合Hystrix  98\n7.2.3 Hystrix 断路器的状态监控与深入理解  102\n7.2.4 Hystrix 线程隔离策略与传播上下文  103\n7.2.5 Feign 使用Hystrix  . 106\n7.3 Hystrix 的监控  112\n7.4 使用Hystrix Dashboard 可视化监控数据  . 113\n7.5 使用Turbine 聚合监控数据  116\n7.5.1 Turbine 简介  116\n7.5.2 使用Turbine 监控多个微服务  117\n7.5.3 使用消息中间件收集数据  119\n8 使用Zuul 构建微服务网关  124\n8.1 为什么要使用微服务网关  . 124\n8.2 Zuul 简介  . 126\n8.3 编写Zuul 微服务网关  . 126\n8.4 管理端点  . 129\n8.4.1 routes 端点  129\n8.4.2 filters 端点  131\n8.5 路由配置详解  . 132\n8.6 Zuul 的安全与Header  . 136\n8.6.1 敏感Header 的设置  . 136\n8.6.2 忽略Header  . 136\n8.7 使用Zuul 上传文件  . 137\n8.8 Zuul 的过滤器  140\n8.8.1 过滤器类型与请求生命周期  . 140\n8.8.2 内置过滤器详解  . 141\n8.8.3 编写Zuul 过滤器  144\n8.8.4 禁用Zuul 过滤器  146\n8.9 Zuul 的容错与回退  146\n8.10 饥饿加载  . 149\n8.11 Query String 编码  . 150\n8.12 Hystrix 隔离策略与线程池  . 150\n8.12.1 隔离策略  150\n8.12.2 线程池配置  . 151\n8.13 Zuul 的高可用  152\n8.13.1 Zuul 客户端也注册到了Eureka Server 上  . 152\n8.13.2 Zuul 客户端未注册到Eureka Server 上  152\n8.14 使用Sidecar 整合非JVM 微服务  . 154\n8.14.1 编写Node.js 微服务  . 154\n8.14.2 编写Sidecar  . 155\n8.14.3 Sidecar 的端点  . 157\n8.14.4 Sidecar 与Node.js 微服务分离部署  . 158\n8.14.5 Sidecar 原理分析  158\n8.15 使用Zuul 聚合微服务  . 160\n9 使用Spring Cloud Config 统一管理微服务配置  166\n9.1 为什么要统一管理微服务配置  . 166\n9.2 Spring Cloud Config 简介  167\n9.3 编写Config Server  . 168\n9.4 编写Config Client  . 171\n9.5 Config Server 的Git 仓库配置详解  . 173\n9.5.1 占位符支持  . 173\n9.5.2 模式匹配  174\n9.5.3 搜索目录  174\n9.5.4 启动时加载配置文件  175\n9.6 Config Server 的健康状况指示器  . 176\n9.7 配置内容的加解密  177\n9.7.1 安装JCE  177\n9.7.2 Config Server 的加解密端点  177\n9.7.3 对称加密  177\n9.7.4 存储加密的内容  . 178\n9.7.5 非对称加密  . 179\n9.8 使用\/refresh 端点手动刷新配置  180\n9.9 使用Spring Cloud Bus 自动刷新配置  . 181\n9.9.1 Spring Cloud Bus 简介  181\n9.9.2 实现自动刷新  . 182\n9.9.3 局部刷新  183\n9.9.4 架构改进  184\n9.9.5 跟踪总线事件  . 184\n9.10 Spring Cloud Config 与Eureka 配合使用  186\n9.11 Spring Cloud Config 的用户认证  . 187\n9.12 Config Server 的高可用  188\n9.12.1 Git 仓库的高可用  188\n9.12.2 RabbitMQ 的高可用  . 189\n9.12.3 Config Server 自身的高可用  189\n10 使用Spring Cloud Sleuth 实现微服务跟踪  . 191\n10.1 为什么要实现微服务跟踪  . 191\n10.2 Spring Cloud Sleuth 简介  . 192\n10.3 整合Spring Cloud Sleuth  . 194\n10.4 Spring Cloud Sleuth 与ELK 配合使用  . 196\n10.5 Spring Cloud Sleuth 与Zipkin 配合使用  . 200\n10.5.1 Zipkin 简介  . 200\n10.5.2 编写Zipkin Server  . 200\n10.5.3 微服务整合Zipkin  . 202\n10.5.4 Zipkin 与Eureka 配合使用  . 205\n10.5.5 使用消息中间件收集数据  206\n10.5.6 使用Elasticsearch 存储跟踪数据  209\n10.5.7 依赖关系图  . 211\n11 Spring Cloud 常见问题与总结  . 213\n11.1 Eureka 常见问题  213\n11.1.1 Eureka 注册服务慢  213\n11.1.2 已停止的微服务节点注销慢或不注销  214\n11.1.3 如何自定义微服务的Instance ID  . 215\n11.1.4 Eureka 的UNKNOWN 问题总结与解决  217\n11.2 整合Hystrix 后首次请求失败  218\n11.2.1 原因分析  218\n11.2.2 解决方案  218\n11.3 Turbine 聚合的数据不完整  219\n11.4 Spring Cloud 各组件超时  220\n11.4.1 RestTemplate 的超时  . 221\n11.4.2 Ribbon 的超时  . 221\n11.4.3 Feign 的超时  221\n11.4.4 Hystrix 的超时  222\n11.4.5 Zuul 的超时  . 222\n11.5 Spring Cloud 各组件重试  223\n11.5.1 重试步骤  224\n11.5.2 基于HTTP 响应码重试  224\n11.5.3 关闭重试  224\n11.5.4 注意点  224\n11.6 Spring Cloud 各组件调优  225\n11.6.1 Tomcat 参数  . 225\n11.6.2 Hystrix 参数  . 225\n11.6.3 Feign 参数  226\n11.6.4 Zuul 参数  . 226\n11.7 Spring Cloud 各组件配置属性  228\n11.7.1 Spring Boot 的配置  228\n11.7.2 Spring Cloud 的配置  . 228\n11.7.3 原生配置  229\n11.8 Spring Cloud 定位问题思路总结  . 229\n12 Docker 入门  232\n12.1 Docker 简介  232\n12.2 版本与迭代计划  232\n12.2.1 版本区别  233\n12.2.2 迭代计划  233\n12.3 Docker 的架构  234\n12.4 安装Docker  236\n12.4.1 CentOS 7 安装Docker  . 236\n12.4.2 Ubuntu 安装Docker  . 239\n12.4.3 Windows 安装Docker  244\n12.4.4 Mac OS 安装Docker  . 245\n12.5 配置镜像加速器  245\n12.6 Docker 常用命令  246\n12.6.1 Docker 镜像常用命令  246\n12.6.2 Docker 容器常用命令  252\n13 将微服务运行在Docker 上  260\n13.1 使用Dockerfile 构建Docker 镜像  260\n13.1.1 Dockerfile 常用指令  . 261\n13.1.2 使用Dockerfile 构建镜像  266\n13.2 使用Docker Registry 管理Docker 镜像  . 268\n13.2.1 使用Docker Hub 管理镜像  . 268\n13.2.2 使用私有仓库管理镜像  270\n13.3 使用Maven 插件构建Docker 镜像  . 271\n13.3.1 快速入门  272\n13.3.2 插件读取Dockerfile 进行构建  273\n13.3.3 将插件绑定在某个phase 执行  274\n13.3.4 推送镜像  275\n13.4 常见问题与总结  277\n14 使用Docker Compose 编排微服务  . 278\n14.1 Docker Compose 简介  . 278\n14.2 安装Docker Compose  . 279\n14.2.1 安装Compose  . 279\n14.2.2 安装Compose 命令补全工具  . 279\n14.3 Docker Compose 快速入门  . 280\n14.3.1 基本步骤  280\n14.3.2 入门示例  280\n14.3.3 工程、服务、容器  281\n14.4 docker-compose.yml 常用命令  . 281\n14.5 docker-compose 常用命令  . 285\n14.6 Docker Compose 网络设置  . 286\n14.6.1 基本概念  286\n14.6.2 更新容器  287\n14.6.3 links  287\n14.6.4 指定自定义网络  . 288\n14.6.5 配置默认网络  . 289\n14.6.6 使用已存在的网络  289\n14.7 综合实战：使用Docker Comose 编排Spring Cloud 微服务  289\n14.7.1 编排Spring Cloud 微服务  289\n14.7.2 编排高可用的Eureka Server  293\n14.7.3 编排高可用Spring Cloud 微服务集群及动态伸缩  . 295\n14.8 常见问题与总结  297\n后记  298\n附录A：本书配套代码  . 299\n附录B：Spring Cloud YES——快速开发脚手架  300\n附录C：使用Docker 快速安装本书中的组件  301","ebook_url":"https:\/\/read.douban.com\/ebook\/58296989\/","pages":"328","images":{"small":"https://img3.doubanio.com\/view\/subject\/s\/public\/s29823921.jpg","large":"https://img3.doubanio.com\/view\/subject\/l\/public\/s29823921.jpg","medium":"https://img3.doubanio.com\/view\/subject\/m\/public\/s29823921.jpg"},"alt":"https:\/\/book.douban.com\/subject\/30278673\/","id":"30278673","publisher":"电子工业出版社","isbn10":"7121340151","isbn13":"9787121340154","title":"Spring Cloud与Docker微服务架构实战（第2版）","url":"https:\/\/api.douban.com\/v2\/book\/30278673","alt_title":"","author_intro":"周立，Spring Cloud中国社区联合发起人。拥有近7年的软件系统开发经验，多年系统架构经验。对Spring Cloud、微服务、持续集成、持续交付有一定见地。\n热爱技术交流，曾代表公司参加全球微服务架构高峰论坛、QCon等技术沙龙。拥抱开源，在GitHub与Git@OSC上开源多个项目，并获得了开源中国的推荐，例如开源电子书 《使用Spring Cloud与Docker实战微服务》等。\n笔者博客：http:\/\/itmuch.com，定期分享Spring Cloud相关博客。读者可扫码关注Spring Cloud 中国社区公众号以及作者公众号。","summary":"《Spring Cloud与Docker微服务架构实战（第2版）》基于Spring Cloud Edgware RELEASE 与Docker 17.09，以指导技术团队实现微服务架构落地为宗旨，覆盖微服务理论、微服务开发框架（Spring Cloud）及运行平台（Docker）三大主题。全书分为3部分，第1 部分对微服务架构进行系统介绍；第2 部分使用Spring Cloud 开发框架编写一个“电影售票系统”；第3 部分讲解如何将微服务应用运行在Docker 之上。全书采用精心设计的Demo 驱动，以连贯的场景、真实的代码示例来引导读者学习用强大的微服务技术实现架构设计。作为第2 版，《Spring Cloud与Docker微服务架构实战（第2版）》增补大量新版本框架独有的技术特性及其技巧、用例，以帮助读者避开升级中可能遇到的困难与陷阱。\n《Spring Cloud与Docker微服务架构实战（第2版）》适合Java 工程师、架构师及运维人员及技术爱好者阅读。","ebook_price":"55.30","price":"79.00元"},{"rating":{"max":10,"numRaters":20,"average":"7.9","min":0},"subtitle":"","author":["许进","叶志远","钟尊发，蔡波斯 等"],"pubdate":"2018-10-1","tags":[{"count":13,"name":"springcloud","title":"springcloud"},{"count":9,"name":"Java","title":"Java"},{"count":7,"name":"计算机","title":"计算机"},{"count":5,"name":"spring","title":"spring"},{"count":4,"name":"软件开发","title":"软件开发"},{"count":4,"name":"DEV","title":"DEV"},{"count":3,"name":"编程","title":"编程"},{"count":3,"name":"技术","title":"技术"}],"origin_title":"","image":"https://img1.doubanio.com\/view\/subject\/m\/public\/s29890589.jpg","binding":"","translator":[],"catalog":"","pages":"","images":{"small":"https://img1.doubanio.com\/view\/subject\/s\/public\/s29890589.jpg","large":"https://img1.doubanio.com\/view\/subject\/l\/public\/s29890589.jpg","medium":"https://img1.doubanio.com\/view\/subject\/m\/public\/s29890589.jpg"},"alt":"https:\/\/book.douban.com\/subject\/30338647\/","id":"30338647","publisher":"机械工业出版社","isbn10":"7111609395","isbn13":"9787111609391","title":"重新定义Spring Cloud实战","url":"https:\/\/api.douban.com\/v2\/book\/30338647","alt_title":"","author_intro":"","summary":"","series":{"id":"34304","title":"云计算与虚拟化技术丛书"},"price":""},{"rating":{"max":10,"numRaters":5,"average":"0.0","min":0},"subtitle":"全栈技术与案例解析","author":["尹吉欢"],"pubdate":"2018-7","tags":[{"count":2,"name":"Spring","title":"Spring"},{"count":2,"name":"Cloud","title":"Cloud"}],"origin_title":"","image":"https://img9.doubanio.com\/view\/subject\/m\/public\/s29848444.jpg","binding":"平装","translator":[],"catalog":"前言\n第一部分　准备篇\n第1章　Spring Cloud与微服务概述 2\n1.1　传统的单体应用 2\n1.1.1　改进单体应用的架构 2\n1.1.2　向微服务靠拢 3\n1.2　什么是微服务 4\n1.2.1　使用微服务架构的优势和劣势 4\n1.2.2　重构前的准备工作 5\n1.3　什么是Spring Cloud 5\n1.3.1　Spring Cloud模块介绍 5\n1.3.2　Spring Cloud版本介绍 6\n1.4　本章小结 7\n第2章　实战前的准备工作 8\n2.1　开发环境的准备 8\n2.2　Spring Boot入门 9\n2.2.1　Spring Boot简介 9\n2.2.2　搭建Spring Boot项目 9\n2.2.3　编写第一个REST接口 11\n2.2.4　读取配置文件 11\n2.2.5　profiles多环境配置 13\n2.2.6　热部署 13\n2.2.7　actuator监控 15\n2.2.8　统一异常处理 16\n2.2.9　异步执行 18\n2.2.10　随机端口 21\n2.3　本章小结 23\n第二部分　基础篇\n第3章　Eureka注册中心 26\n3.1　Eureka 26\n3.2　使用Eureka编写注册中心服务 27\n3.3　编写服务提供者 29\n3.3.1　创建项目注册到Eureka 29\n3.3.2　编写提供接口 30\n3.4　编写服务消费者 31\n3.4.1　直接调用接口 31\n3.4.2　通过Eureka来消费接口 32\n3.5　开启Eureka认证 33\n3.6　Eureka高可用搭建 33\n3.6.1　高可用原理 33\n3.6.2　搭建步骤 34\n3.7　常用配置讲解 35\n3.7.1　关闭自我保护 35\n3.7.2　自定义Eureka的Instance ID 35\n3.7.3　自定义实例跳转链接 36\n3.7.4　快速移除已经失效的服务信息 37\n3.8　扩展使用 38\n3.8.1　Eureka REST API 38\n3.8.2　元数据使用 40\n3.8.3　EurekaClient使用 41\n3.8.4　健康检查 43\n3.8.5　服务上下线监控 45\n3.9　本章小结 46\n第4章　客户端负载均衡Ribbon 47\n4.1　Ribbon 47\n4.1.1　Ribbon模块 47\n4.1.2　Ribbon使用 48\n4.2　RestTemplate结合Ribbon使用 49\n4.2.1　使用RestTemplate与整合Ribbon 49\n4.2.2　RestTemplate负载均衡示例 52\n4.2.3　@LoadBalanced注解原理 53\n4.2.4　Ribbon API使用 57\n4.2.5　Ribbon饥饿加载 58\n4.3　负载均衡策略介绍 59\n4.4　自定义负载策略 60\n4.5　配置详解 61\n4.5.1　常用配置 61\n4.5.2　代码配置Ribbon 62\n4.6　重试机制 63\n4.7　本章小结 64\n第5章　声明式REST客户端Feign 65\n5.1　使用Feign调用服务接口 65\n5.1.1　在Spring Cloud中集成Feign 66\n5.1.2　使用Feign调用接口 66\n5.2　自定义Feign的配置 67\n5.2.1　日志配置 67\n5.2.2　契约配置 69\n5.2.3　Basic认证配置 69\n5.2.4　超时时间配置 70\n5.2.5　客户端组件配置 71\n5.2.6　GZIP压缩配置 72\n5.2.7　编码器解码器配置 72\n5.3　脱离Spring Cloud 使用Feign 73\n5.3.1　原生注解方式 73\n5.3.2　构建Feign对象 74\n5.3.3　其他配置 75\n5.4　本章小结 76\n第6章　Hystrix 服务容错处理 77\n6.1　Hystrix 77\n6.1.1　Hystrix的简单使用 77\n6.1.2　回退支持 78\n6.1.3　信号量策略配置 79\n6.1.4　线程隔离策略配置 79\n6.1.5　结果缓存 80\n6.1.6　缓存清除 81\n6.1.7　合并请求 83\n6.2　在Spring Cloud中使用Hystrix 84\n6.2.1　简单使用 84\n6.2.2　配置详解 85\n6.2.3　Feign整合Hystrix服务容错 88\n6.2.4　Feign中禁用Hystrix 90\n6.3　Hystrix监控 91\n6.4　整合Dashboard查看监控数据 92\n6.5　Turbine聚合集群数据 94\n6.5.1　Turbine使用 94\n6.5.2　context-path导致监控失败 95\n6.6　本章小结 95\n第7章　API网关 96\n7.1　Zuul 简介 96\n7.2　使用Zuul构建微服务网关 97\n7.2.1　简单使用 97\n7.2.2　集成Eureka 98\n7.3　Zuul路由配置 98\n7.4　Zuul过滤器讲解 99\n7.4.1　过滤器类型 100\n7.4.2　请求生命周期 100\n7.4.3　使用过滤器 101\n7.4.4　过滤器禁用 103\n7.4.5　过滤器中传递数据 103\n7.4.6　过滤器拦截请求 104\n7.4.7　过滤器中异常处理 106\n7.5　Zuul容错和回退 108\n7.5.1　容错机制 108\n7.5.2　回退机制 109\n7.6　Zuul高可用 111\n7.7　本章小结 111\n第三部分　实战篇\n第8章　分布式配置管理 114\n8.1　自研配置管理框架Smconf简介 114\n8.2　Smconf工作原理 115\n8.3　Smconf 部署 116\n8.3.1　Mongodb安装 116\n8.3.2　Zookeeper安装 117\n8.3.3　Smconf Server部署 118\n8.4　项目中集成Smconf 119\n8.4.1　集成Smconf 119\n8.4.2　使用Smconf 120\n8.4.3　配置更新回调 121\n8.5　Smconf详细使用 122\n8.5.1　源码编译问题 122\n8.5.2　后台账号管理 122\n8.5.3　REST API 123\n8.6　Smconf源码解析 125\n8.6.1　Client启动 125\n8.6.2　启动加载配置 127\n8.6.3　配置修改推送原理 128\n8.7　本章小结 129\n第9章　Sleuth服务跟踪 130\n9.1　Spring Cloud集成Sleuth 130\n9.2　整合Logstash 131\n9.2.1　ELK简介 131\n9.2.2　输出JSON格式日志 131\n9.3　整合Zipkin 133\n9.3.1　创建Zipkin数据收集服务 133\n9.3.2　项目集成Zipkin发送调用链数据 134\n9.3.3　抽样采集数据 135\n9.3.4　用RabbitMq代替Http发送调用链数据 135\n9.3.5　用Elasticsearch存储调用链数据 136\n9.4　本章小结 137\n第10章　微服务之间调用的安全认证 138\n10.1　什么是JWT 138\n10.2　创建统一的认证服务 139\n10.2.1　表结构 139\n10.2.2　JWT工具类封装 139\n10.2.3　认证接口 141\n10.3　服务提供方进行调用认证 142\n10.4　服务消费方申请Token 143\n10.5　Feign调用前统一申请Token传递到调用的服务中 145\n10.6　Zuul中传递Token到路由的服务中 147\n10.7　本章小结 148\n第11章　Spring Boot Admin 149\n11.1　Spring Boot Admin的使用方法 149\n11.1.1　创建Spring Boot Admin项目 149\n11.1.2　将服务注册到Spring Boot Admin 150\n11.1.3　如何在Admin中查看各个服务的日志 151\n11.2　开启认证 152\n11.3　集成Eureka 153\n11.4　集成Turbine 154\n11.5　监控服务 155\n11.5.1　邮件警报 156\n11.5.2　自定义钉钉警报 156\n11.6　本章小结 159\n第12章　服务的API文档管理 160\n12.1　Swagger简介 160\n12.2　集成Swagger管理API文档 161\n12.2.1　封装Swagger Starter 161\n12.2.2　在项目中集成Swagger starter 162\n12.2.3　使用Swagger生成文档 162\n12.2.4　在线测试接口 163\n12.3　Swagger注解 164\n12.4　Eureka 控制台快速查看Swagger文档 169\n12.5　本章小结 169\n第四部分　高级篇\n第13章　API网关扩展 172\n13.1　用户认证 172\n13.1.1　动态管理不需要拦截的API请求 172\n13.1.2　创建认证的用户服务 174\n13.1.3　路由之前的认证 175\n13.1.4　向下游微服务中传递认证之后的用户信息 176\n13.1.5　内部服务间的用户信息传递 177\n13.2　服务限流 179\n13.2.1　限流算法 179\n13.2.2　单节点限流 179\n13.2.3　集群限流 184\n13.2.4　具体服务限流 187\n13.2.5　具体接口限流 188\n13.3　服务降级 194\n13.4　灰度发布 196\n13.4.1　原理讲解 196\n13.4.2　根据用户做灰度发布 197\n13.4.3　根据IP做灰度发布 200\n13.5　本章小结 200\n第14章　微服务之缓存 201\n14.1　Guava Cache本地缓存 201\n14.1.1　Guava Cache简介 201\n14.1.2　代码示例 202\n14.1.3　回收策略 202\n14.2　Redis缓存 203\n14.2.1　用Redistemplate 操作Redis 203\n14.2.2　用Repository操作Redis 204\n14.2.3　Spring Cache 缓存数据 206\n14.2.4　扩展Spring Cache支持对每个缓存的时间配置 211\n14.2.5　缓存异常处理 212\n14.2.6　自定义缓存工具类 214\n14.3　防止缓存穿透方案 216\n14.3.1　什么是缓存穿透 216\n14.3.2　缓存穿透的危害 216\n14.3.3　解决方案 217\n14.3.4　布隆过滤器介绍 217\n14.3.5　代码示例 217\n14.4　防止缓存雪崩方案 219\n14.4.1　什么是缓存雪崩 219\n14.4.2　缓存雪崩的危害 219\n14.4.3　解决方案 219\n14.4.4　代码示例 219\n14.4.5　分布式锁方式 220\n14.5　本章小结 221\n第15章　微服务之存储 222\n15.1　存储选型 222\n15.2　Mongodb 223\n15.2.1　集成Spring Data Mongodb 223\n15.2.2　添加数据操作 223\n15.2.3　索引使用 225\n15.2.4　修改数据操作 227\n15.2.5　删除数据操作 228\n15.2.6　查询数据操作 229\n15.2.7　GridFS操作 231\n15.2.8　用Repository方式操作数据 232\n15.2.9　自增ID实现 236\n15.2.10　批量更新扩展 239\n15.3　Mysql 243\n15.3.1　集成Spring JdbcTemplate 243\n15.3.2　JdbcTemplate代码示例 243\n15.3.3　封装JdbcTemplate 操作Mysql更简单 244\n15.3.4　扩展JdbcTemplate使用方式 244\n15.3.5　常见问题 248\n15.4　Elasticsearch 251\n15.4.1　集成Spring Data Elasticsearch 251\n15.4.2　Repository示例 251\n15.4.3　ElasticsearchTemplate示例 254\n15.4.4　索引构建方式 257\n15.5　本章小结 259\n第16章　微服务之分布式事物解决方案 260\n16.1　两阶段型 260\n16.2　TCC补偿型 261\n16.3　最终一致性 261\n16.3.1　原理讲解 261\n16.3.2　创建可靠性消息服务 263\n16.3.3　消息存储表设计 264\n16.3.4　提供服务接口 265\n16.3.5　创建消息发送系统 269\n16.3.6　消费消息逻辑 273\n16.3.7　消息管理系统 275\n16.4　最大努力通知型事物 276\n16.4.1　介绍 276\n16.4.2　原理 276\n16.5　本章小结 276\n第17章　分布式任务调度 277\n17.1　Elastic-Job 277\n17.1.1　Elastic-Job介绍 277\n17.1.2　任务调度目前存在的问题 277\n17.1.3　为什么选择Elastic-Job 278\n17.2　快速集成 279\n17.3　任务使用 280\n17.3.1　简单任务 280\n17.3.2　数据流任务 281\n17.3.3　脚本任务 282\n17.4　配置参数讲解 282\n17.4.1　注册中心配置 283\n17.4.2　作业配置 283\n17.4.3　dataflow独有配置 284\n17.4.4　script独有配置 284\n17.5　多节点并行调度 285\n17.5.1　分片概念 285\n17.5.2　任务节点分片策略 285\n17.5.3　业务数据分片处理 286\n17.6　事件追踪 289\n17.7　扩展功能 290\n17.7.1　自定义监听器 290\n17.7.2　定义异常处理 291\n17.8　运维平台 291\n17.8.1　功能列表 292\n17.8.2　部署运维平台 292\n17.8.3　运维平台使用 293\n17.9　使用经验分享 296\n17.9.1　任务的划分和监控 296\n17.9.2　任务的扩展性和节点数量 297\n17.9.3　任务的重复执行 297\n17.9.4　overwrite覆盖问题 298\n17.9.5　流水式任务 298\n17.10　本章小结 299\n第18章　分库分表解决方案 300\n18.1　Sharding-JDBC 300\n18.1.1　介绍 300\n18.1.2　功能列表 301\n18.1.3　相关概念 301\n18.2　快速集成 302\n18.3　读写分离实战 304\n18.3.1　准备数据 304\n18.3.2　配置读写分离 304\n18.3.3　验证读从库 305\n18.3.4　验证写主库 307\n18.3.5　Hint强制路由主库 308\n18.4　分库分表实战 309\n18.4.1　常用分片算法 310\n18.4.2　使用分片算法 310\n18.4.3　不分库只分表实战 311\n18.4.4　既分库又分表实战 314\n18.5　分布式主键 317\n18.6　本章小结 319","pages":"319","images":{"small":"https://img9.doubanio.com\/view\/subject\/s\/public\/s29848444.jpg","large":"https://img9.doubanio.com\/view\/subject\/l\/public\/s29848444.jpg","medium":"https://img9.doubanio.com\/view\/subject\/m\/public\/s29848444.jpg"},"alt":"https:\/\/book.douban.com\/subject\/30303108\/","id":"30303108","publisher":"机械工业出版社","isbn10":"7111601556","isbn13":"9787111601555","title":"Spring Cloud微服务","url":"https:\/\/api.douban.com\/v2\/book\/30303108","alt_title":"","author_intro":"尹吉欢（YinJiHuan）\nJava开发工程师，在Spring Cloud和微服务方面有丰富的经验。喜欢写代码，研究技术，座右铭是“简单的技术爱好者”。\n一直在上海从事Java服务端开发工作，前端也略有涉及。曾就职于鲁班软件，一起唱等互联网公司，目前就职于房产大数据公司房价网，担任技术经理，负责公司产品的开发和管理工作。\n2016年创办了自己的技术网站‘猿天地’，主要提供Java相关技术的分享和视频课程。主要关注分布式、高并发、后端服务，目前的重心是微服务。","summary":"本书内容共18章，共分为4个部分。第1部分为准备篇，准备篇当中会对微服务以及SpringCloud做一个整体的介绍，同时将SpringCloud的基础内容进行讲解，比如SpringBoot。第2部分为基础篇，基础篇当中会对SpringCloud的几大常用模块进行讲解和简单使用。第3部分为实战篇，实战篇当中会通过对在微服务架构中普遍遇到的问题进行实战解决讲解。第4部分为高级篇，高级篇当中就是对SpringCloud进行一些扩展性的使用，比如API网关怎么限流，怎么做灰度发布等。","series":{"id":"34304","title":"云计算与虚拟化技术丛书"},"price":"79.00"},{"rating":{"max":10,"numRaters":1,"average":"0.0","min":0},"subtitle":"Build and deploy Java microservices using Spring Cloud, Istio, and Kubernetes","author":["Magnus Larsson"],"pubdate":"2019-9-20","tags":[{"count":1,"name":"软件工程","title":"软件工程"},{"count":1,"name":"分布式","title":"分布式"}],"origin_title":"","image":"https://img1.doubanio.com\/view\/subject\/m\/public\/s33542789.jpg","binding":"Paperback","translator":[],"catalog":"Table of Contents\nIntroduction to Microservices\nIntroduction to Spring Boot\nCreating a Set of Cooperating Microservices\nDeploying Our Microservices Using Docker\nAdding an API Description Using OpenAPI\/Swagger\nAdding Persisitence\nDeveloping Reactive Microservices\nIntroduction to Spring Cloud\nAdding Service Discovery Using Netflix Eureka and Ribbon\nUsing Spring Cloud Gateway to Hide Microservices Behind an Edge Server\nSecuring Access to APIs\nCentralized Configuration\nImproving Resilience using Resilience4j\nUnderstanding Distributed Tracing\nIntroduction to Kubernetes\nDeploying Our Microservices to Kubernetes\nImplementing Kubernetes Features as an Alternative\nUsing a Service Mesh to Improve Observability and Management\nCentralized Logging with the EFK Stack\nMonitoring Microservices","pages":"668","images":{"small":"https://img1.doubanio.com\/view\/subject\/s\/public\/s33542789.jpg","large":"https://img1.doubanio.com\/view\/subject\/l\/public\/s33542789.jpg","medium":"https://img1.doubanio.com\/view\/subject\/m\/public\/s33542789.jpg"},"alt":"https:\/\/book.douban.com\/subject\/34923105\/","id":"34923105","publisher":"Packt Publishing","isbn10":"1789613477","isbn13":"9781789613476","title":"Hands-On Microservices with Spring Boot and Spring Cloud","url":"https:\/\/api.douban.com\/v2\/book\/34923105","alt_title":"","author_intro":"Magnus Larsson has been in the IT industry for more than 30 years, working as a consultant for large companies in Sweden such as Volvo, Ericsson, and AstraZeneca. He has seen a lot of different communication technologies come and go over the years, such as RPC, CORBA, SOAP, and REST. In the past, he struggled with the challenges associated with distributed systems as there was no substantial help from the software available at that time. This has, however, changed dramatically over the last few years with the introduction of open source projects such as Spring Cloud, Netflix OSS, Docker, and Kubernetes. Over the last five years, Magnus has been helping customers use these new software technologies and has also done several presentations and blog posts on the subject.","summary":"Book Description\nMicroservices architecture allows developers to build and maintain applications with ease, and enterprises are rapidly adopting it to build software using Spring Boot as their default framework. With this book, you'll learn how to efficiently build and deploy microservices using Spring Boot.\nThis microservices book will take you through tried and tested approaches to building distributed systems and implementing microservices architecture in your organization. Starting with a set of simple cooperating microservices developed using Spring Boot, you'll learn how you can add functionalities such as persistence, make your microservices reactive, and describe their APIs using Swagger\/OpenAPI. As you advance, you'll understand how to add different services from Spring Cloud to your microservice system. The book also demonstrates how to deploy your microservices using Kubernetes and manage them with Istio for improved security and traffic management. Finally, you'll explore centralized log management using the EFK stack and monitor microservices using Prometheus and Grafana.\nBy the end of this book, you'll be able to build microservices that are scalable and robust using Spring Boot and Spring Cloud.\nWhat you will learn\nBuild reactive microservices using Spring Boot\nDevelop resilient and scalable microservices using Spring Cloud\nUse OAuth 2.0\/OIDC and Spring Security to protect public APIs\nImplement Docker to bridge the gap between development, testing, and production\nDeploy and manage microservices using Kubernetes\nApply Istio for improved security, observability, and traffic management","price":"USD 39.99"},{"rating":{"max":10,"numRaters":0,"average":"0.0","min":0},"subtitle":"","author":["Piotr Minkowski"],"pubdate":"2018-4-26","tags":[],"origin_title":"Mastering Spring Cloud","image":"https://img1.doubanio.com\/view\/subject\/m\/public\/s32273299.jpg","binding":"","translator":[],"catalog":"","pages":"432","images":{"small":"https://img1.doubanio.com\/view\/subject\/s\/public\/s32273299.jpg","large":"https://img1.doubanio.com\/view\/subject\/l\/public\/s32273299.jpg","medium":"https://img1.doubanio.com\/view\/subject\/m\/public\/s32273299.jpg"},"alt":"https:\/\/book.douban.com\/subject\/33387408\/","id":"33387408","publisher":"","isbn10":"1788475437","isbn13":"9781788475433","title":"Mastering Spring Cloud","url":"https:\/\/api.douban.com\/v2\/book\/33387408","alt_title":"Mastering Spring Cloud","author_intro":"","summary":"Developing, deploying, and operating cloud applications should be as easy as local applications. This should be the governing principle behind any cloud platform, library, or tool. Spring Cloud-an open-source library-makes it easy to develop JVM applications for the cloud. In this book, you will be introduced to Spring Cloud and will master its features from the application developer's point of view.\nThis book begins by introducing you to microservices for Spring and the available feature set in Spring Cloud. You will learn to configure the Spring Cloud server and run the Eureka server to enable service registration and discovery. Then you will learn about techniques related to load balancing and circuit breaking and utilize all features of the Feign client. The book now delves into advanced topics where you will learn to implement distributed tracing solutions for Spring Cloud and build message-driven microservice architectures. Before running an application on Docker container s, you will master testing and securing techniques with Spring Cloud.","price":""},{"rating":{"max":10,"numRaters":0,"average":"0.0","min":0},"subtitle":"Native Cloud Orchestration Services for Microservice Applications on Modern Runtimes","author":[],"pubdate":"2019-12-17","tags":[{"count":1,"name":"软件工程","title":"软件工程"},{"count":1,"name":"计算机科学","title":"计算机科学"},{"count":1,"name":"Java","title":"Java"}],"origin_title":"","image":"https://img3.doubanio.com\/view\/subject\/m\/public\/s31108472.jpg","binding":"Paperback","translator":[],"catalog":"","pages":"335","images":{"small":"https://img3.doubanio.com\/view\/subject\/s\/public\/s31108472.jpg","large":"https://img3.doubanio.com\/view\/subject\/l\/public\/s31108472.jpg","medium":"https://img3.doubanio.com\/view\/subject\/m\/public\/s31108472.jpg"},"alt":"https:\/\/book.douban.com\/subject\/32214810\/","id":"32214810","publisher":"Apress","isbn10":"1484212401","isbn13":"9781484212400","title":"Spring Cloud Data Flow","url":"https:\/\/api.douban.com\/v2\/book\/32214810","alt_title":"","author_intro":"Felipe Gutierrez is a solutions software architect, with a bachelors and master degree in computer science from Instituto Tecnologico y de Estudios Superiores de Monterrey Campus Ciudad de Mexico. With over 20 years of IT experience, during which time he developed programs for companies in multiple vertical industries, such as government, retail, healthcare, education, and banking. Right now, he is currently working as a principal technical instructor for Pivotal, specializing in Cloud Foundry, Spring Framework, Spring Cloud Native Applications, Groovy, and RabbitMQ, among other technologies. He has worked as a solutions architect for big companies like Nokia, Apple, Redbox, and Qualcomm, among others. He is also the author of Introducing Spring Framework, Pro Spring Boot and Spring Boot Messaging, all published by Apress.","summary":"Work with big data applications by using Spring Cloud Data Flow as a unified, distributed and extensible system for data ingestion and integration, real-time analytics and data processing pipelines, batch processing, and data export. With this book, you will develop a foundation for creating applications that use real-time data streaming by combining different technologies and use the full power of Spring Cloud Data Flow.\nThe first part of the book begins with an overview of the cloud, microservices, and big data, before moving on to the Spring projects essential to modern big data applications in Java: Spring Integration, Spring Batch, Spring Cloud Stream, and Spring Cloud Task. The second part of the book covers the internals of Spring Cloud Data Flow, giving you the insights and knowledge required to build the applications you need. You'll learn how to use Spring Data Flow's DSL and how to integrate with third-party cloud platform solutions, such as Cloud Foundry and Kubernetes.\nFinally, the book covers Spring Cloud Data Flow applications to impart practical, useful skills for real-world applications of the technologies covered throughout the rest of the book.\n\nWhat you will learn:\nSee the Spring Cloud Data Flow internals\nMaster Spring Cloud Data Flow architecture, data processing, and DSL\nIntegrate Spring Cloud Data Flow with Cloud Foundry, and Kubernetes\nUse Spring Cloud Data Flow local server, Cloud Foundry, and more\nDiscover the Spring Cloud Data Flow applications and how to use them\nWork with source, processor, sink, tasks, Spring Flo and its GUI, and analytics via the new Micrometer stack for realtime visibility with Prometheus and Grafana","price":"USD 49.99"},{"rating":{"max":10,"numRaters":3,"average":"0.0","min":0},"subtitle":"","author":["方志朋"],"pubdate":"2019-9-1","tags":[{"count":5,"name":"微服务","title":"微服务"},{"count":2,"name":"软件开发","title":"软件开发"},{"count":2,"name":"SpringCloud组件","title":"SpringCloud组件"},{"count":1,"name":"基础","title":"基础"},{"count":1,"name":"Programming","title":"Programming"}],"origin_title":"","image":"https://img1.doubanio.com\/view\/subject\/m\/public\/s33524837.jpg","binding":"平装","translator":[],"catalog":"第 1章 微服务简介1\n1．1 单体架构及其存在的不足 1\n1．1．1 单体架构简介 1\n1．1．2 单体架构存在的不足 2\n1．1．3 单体架构使用服务器集群及存在的不足 2\n1．2 微服务 3\n1．2．1 什么是微服务 4\n1．2．2 微服务的优势 8\n1．3 微服务的不足 9\n1．3．1 微服务的复杂度 9\n1．3．2 分布式事务 9\n1．3．3 服务的划分 11\n1．3．4 服务的部署 11\n1．4 微服务和SOA的关系 12\n1．5 微服务的设计原则 12\n第 2章 Spring Cloud简介 14\n2．1 微服务应该具备的功能 14\n2．1．1 服务的注册与发现 15\n2．1．2 服务的负载均衡 15\n2．1．3 服务的容错 16\n2．1．4 服务网关 18\n2．1．5 服务配置的统一管理 19\n2．1．6 服务链路追踪 20\n2．2 Spring Cloud 20\n2．2．1 简介 20\n2．2．2 常用组件 21\n2．2．3 项目一览 22\n2．3 Dubbo简介 23\n2．4 Spring Cloud与Dubbo比较 24\n2．5 Kubernetes简介 25\n2．6 Spring Could与Kubernetes比较 27\n2．7 总结 28\n第3章 构建微服务的准备 29\n3．1 JDK的安装 29\n3．1．1 JDK的下载和安装 29\n3．1．2 环境变量的配置 29\n3．2 IDEA的安装 30\n3．2．1 IDEA的下载 30\n3．2．2 用IDEA创建一个Spring Boot工程 31\n3．2．3 用IDEA启动多个Spring Boot工程实例 33\n3．3 构建工具Maven的使用 34\n3．3．1 Maven简介 34\n3．3．2 Maven的安装 34\n3．3．3 Maven的核心概念 36\n3．3．4 编写Pom文件 36\n3．3．5 Maven构建项目的生命周期 38\n3．3．6 常用的Maven命令 39\n第4章 开发框架Spring Boot 41\n4．1 Spring Boot简介 41\n4．1．1 Spring Boot的特点 41\n4．1．2 Spring Boot的优点 42\n4．2 用IDEA构建Spring Boot工程 42\n4．2．1 项目结构 42\n4．2．2 在Spring Boot工程中构建Web程序 43\n4．2．3 Spring Boot的测试 44\n4．3 Spring Boot配置文件详解 45\n4．3．1 自定义属性 45\n4．3．2 将配置文件的属性赋给实体类 46\n4．3．3 自定义配置文件 47\n4．3．4 多个环境的配置文件 48\n4．4 运行状态监控Actuator 48\n4．4．1 查看运行程序的健康状态 50\n4．4．2 查看运行程序的Bean 51\n4．4．3 使用Actuator关闭应用程序 53\n4．4．4 使用shell连接Actuator 54\n4．5 Spring Boot整合JPA 55\n4．6 Spring Boot整合Redis 58\n4．6．1 Redis简介 58\n4．6．2 Redis的安装 58\n4．6．3 在Spring Boot中使用Redis 58\n4．7 Spring Boot整合Swagger2，搭建Restful API在线文档 60\n第5章 服务注册和发现Eureka 64\n5．1 Eureka简介 64\n5．1．1 什么是Eureka 64\n5．1．2 为什么选择Eureka 64\n5．1．3 Eureka的基本架构 65\n5．2 编写Eureka Server 65\n5．3 编写Eureka Client 68\n5．4 源码解析Eureka 71\n5．4．1 Eureka的一些概念 71\n5．4．2 Eureka的高可用架构 72\n5．4．3 Register服务注册 72\n5．4．4 Renew服务续约 76\n5．4．5 为什么Eureka Client获取服务实例这么慢 77\n5．4．6 Eureka 的自我保护模式 78\n5．5 构建高可用的Eureka Server集群 79\n5．6 总结 81\n第6章 负载均衡Ribbon 82\n6．1 RestTemplate简介 82\n6．2 Ribbon简介 83\n6．3 使用RestTemplate和Ribbon来消费服务 83\n6．4 LoadBalancerClient简介 86\n6．5 源码解析Ribbon 88\n第7章 声明式调用Feign 99\n7．1 写一个Feign客户端 99\n7．2 FeignClient详解 103\n7．3 FeignClient的配置 104\n7．4 从源码的角度讲解Feign的工作原理 105\n7．5 在Feign中使用HttpClient和OkHttp 108\n7．6 Feign是如何实现负载均衡的 110\n7．7 总结 112\n第8章 熔断器Hystrix 113\n8．1 Hystrix简介 113\n8．2 Hystrix解决的问题 113\n8．3 Hystrix的设计原则 115\n8．4 Hystrix的工作机制 115\n8．5 在RestTemplate和Ribbon上使用熔断器 116\n8．6 在Feign上使用熔断器 117\n8．7 使用Hystrix Dashboard监控熔断器的状态 118\n8．7．1 在RestTemplate中使用Hystrix Dashboard 118\n8．7．2 在Feign中使用Hystrix Dashboard 121\n8．8 使用Turbine聚合监控 122\n第9章 路由网关Spring Cloud Zuul 124\n9．1 为什么需要Zuul 124\n9．2 Zuul的工作原理 124\n9．3 案例实战 126\n9．3．1 搭建Zuul服务 126\n9．3．2 在Zuul上配置API接口的版本号 129\n9．3．3 在Zuul上配置熔断器 130\n9．3．4 在Zuul中使用过滤器 131\n9．3．5 Zuul的常见使用方式 133\n第 10章 服务网关 135\n10．1 服务网关的实现原理 135\n10．2 断言工厂 136\n10．2．1 After路由断言工厂 136\n10．2．2 Header断言工厂 138\n10．2．3 Cookie路由断言工厂 139\n10．2．4 Host路由断言工厂 140\n10．2．5 Method路由断言工厂 140\n10．2．6 Path 路由断言工厂 141\n10．2．7 Query 路由断言工厂 141\n10．3 过滤器 142\n10．3．1 过滤器的作用 143\n10．3．2 过滤器的生命周期 144\n10．3．3 网关过滤器 144\n10．3．4 全局过滤器 151\n10．4 限流 153\n10．4．1 常见的限流算法 153\n10．4．2 服务网关的限流 154\n10．5 服务化 156\n10．5．1 工程介绍 156\n10．5．2 service-gateway工程详细介绍 157\n10．6 总结 159\n第 11章 服务注册和发现Consul 160\n11．1 什么是Consul 160\n11．1．1 基本术语 160\n11．1．2 Consul的特点和功能 161\n11．1．3 Consul的原理 161\n11．1．4 Consul的基本架构 161\n11．1．5 Consul服务注册发现流程 163\n11．2 Consul与Eureka比较 163\n11．3 下载和安装Consul 164\n11．4 使用Spring Cloud Consul进行服务注册和发现 165\n11．4．1 服务提供者consul-provider 165\n11．4．2 服务消费者consul-provider 167\n11．5 使用Spring Cloud Consul Config做服务配置中心 168\n11．6 动态刷新配置 170\n11．7 总结 171\n第 12章 配置中心Spring Cloud Config 172\n12．1 Config Server从本地读取配置文件 172\n12．1．1 构建Config Server 172\n12．1．2 构建Config Client 174\n12．2 Config Server从远程Git仓库读取配置文件 175\n12．3 构建高可用的Config Server 176\n12．3．1 构建Eureka Server 177\n12．3．2 改造Config Server 178\n12．3．3 改造Config Client 178\n12．4 使用Spring Cloud Bus刷新配置 180\n12．5 将配置存储在MySQL数据库中 182\n12．5．1 改造config-server工程 182\n12．5．2 初始化数据库 183\n第 13章 服务链路追踪Spring Cloud Sleuth 184\n13．1 为什么需要Spring Cloud Sleuth 184\n13．2 基本术语 184\n13．3 案例讲解 186\n13．3．1 启动Zipkin Server 187\n13．3．2 构建服务提供者 187\n13．3．3 构建服务消费者 189\n13．3．4 项目演示 191\n13．4 在链路数据中添加自定义数据 192\n13．5 使用RabbitMQ 传输链路数据 192\n13．6 在MySQL数据库中存储链路数据 194\n13．7 在ElasticSearch中存储链路数据 195\n13．8 用Kibana展示链路数据 196\n第 14章 微服务监控Spring Boot Admin 198\n14．1 使用Spring Boot Admin监控Spring Boot应用程序 199\n14．1．1 创建Spring Boot Admin Server 199\n14．1．2 创建Spring Boot Admin Client 200\n14．2 使用Spring Boot Admin监控Spring Cloud微服务 202\n14．2．1 构建Admin Server 202\n14．2．2 构建Admin Client 204\n14．3 在Spring Boot Admin中添加Security和Mail组件 205\n14．3．1 Spring Boot Admin集成Security组件 206\n14．3．2 Spring Boot Admin集成Mail组件 208\n第 15章 Spring Boot Security详解 209\n15．1 Spring Security简介 209\n15．1．1 什么是Spring Security 209\n15．1．2 为什么选择Spring Security 209\n15．1．3 Spring Security提供的安全模块 210\n15．2 Spring Boot Security与Spring Security的关系 211\n15．3 Spring Boot Security案例详解 211\n15．3．1 构建Spring Boot Security工程 211\n15．3．2 配置Spring Security 213\n15．3．3 编写相关界面 215\n15．3．4 Spring Security方法级别上的保护 220\n15．3．5 从数据库中读取用户的认证信息 223\n15．4 总结 228\n第 16章 使用Spring Cloud OAuth2保护微服务系统 230\n16．1 什么是OAuth2 230\n16．2 如何使用Spring OAuth2 231\n16．2．1 OAuth2 Provider 231\n16．2．2 OAuth2 Client 235\n16．3 案例分析 236\n16．3．1 编写Eureka Server 237\n16．3．2 编写Uaa授权服务 237\n16．3．3 编写service-hi资源服务 244\n16．4 总结 250\n第 17章 使用Spring Security OAuth2和JWT保护微服务系统 251\n17．1 JWT简介 251\n17．1．1 什么是JWT 251\n17．1．2 JWT的结构 252\n17．1．3 JWT的应用场景 253\n17．1．4 如何使用JWT 253\n17．2 案例分析 253\n17．2．1 案例架构设计 253\n17．2．2 编写主Maven工程 254\n17．2．3 编写Eureka Server 256\n17．2．4 编写Uaa授权服务 256\n17．2．5 编写user-service资源服务 262\n17．3 总结 270\n第 18章 使用Spring Cloud构建微服务综合案例 271\n18．1 案例介绍 271\n18．1．1 工程结构 271\n18．1．2 使用的技术栈 271\n18．1．3 工程架构 272\n18．1．4 功能展示 274\n18．2 案例详解 277\n18．2．1 准备工作 278\n18．2．2 构建主Maven工程 278\n18．2．3 构建eureka-server工程 279\n18．2．4 构建config-server工程 280\n18．2．5 构建Zipkin工程 281\n18．2．6 构建monitoring-service工程 282\n18．2．7 构建uaa-service工程 284\n18．2．8 构建gateway-service工程 286\n18．2．9 构建admin-service工程 287\n18．2．10 构建user-service工程 287\n18．2．11 构建blog-service工程 290\n18．2．12 构建log-service工程 291\n18．3 启动源码工程 294\n18．4 项目演示 295\n18．5 总结 296","pages":"296","images":{"small":"https://img1.doubanio.com\/view\/subject\/s\/public\/s33524837.jpg","large":"https://img1.doubanio.com\/view\/subject\/l\/public\/s33524837.jpg","medium":"https://img1.doubanio.com\/view\/subject\/m\/public\/s33524837.jpg"},"alt":"https:\/\/book.douban.com\/subject\/34816068\/","id":"34816068","publisher":"人民邮电出版社","isbn10":"7115514887","isbn13":"9787115514882","title":"深入理解Spring Cloud与微服务构建 第2版","url":"https:\/\/api.douban.com\/v2\/book\/34816068","alt_title":"","author_intro":"方志朋，毕业于武汉理工大学，就职于某互联网金融公司。Spring Cloud中国社区联合发起人、CSDN博客专家，专注于分布式系统和中间件等领域的研究和开发，乐于分享，爱好开源，对技术有着强烈的追求，活跃于各大技术社区。","summary":"《深入理解Spring Cloud与微服务构建 第2版》共分为18章，全面涵盖了通过Spring Cloud构建微服务的相关知识点。第1、2章详细介绍了微服务架构和Spring Cloud。第3、4章讲解了通过Spring Cloud构建微服务的准备工作。第5～14章以案例为切入点，讲解了通过Spring Cloud构建微服务的基础组件，包括Eureka、Ribbon、Feign、Hystrix、Zuul、Gateway、Consul、Config、Sleuth、Admint等组件。第15～17章讲述了使用Spring Cloud OAuth2来保护微服务系统的相关知识。第18章用一个综合案例全面讲解了如何使用Spring Cloud构建微服务，可用于实际开发中。","price":"79"},{"rating":{"max":10,"numRaters":7,"average":"0.0","min":0},"subtitle":"","author":["黑马程序员"],"pubdate":"","tags":[{"count":1,"name":"spring","title":"spring"},{"count":1,"name":"java","title":"java"},{"count":1,"name":"Java","title":"Java"}],"origin_title":"","image":"https://img3.doubanio.com\/view\/subject\/m\/public\/s29858182.jpg","binding":"","translator":[],"catalog":"第1章认识微服务架构1\n1.1 为什么需要微服务架构 2\n1.1.1 传统单体应用架构的问题 2\n1.1.2 如何解决传统应用架构的问题 3\n1.2 微服务架构是什么 4\n1.2.1 微服务架构的概念 4\n1.2.2 微服务架构的优点 5\n1.2.3 微服务架构的不足 6\n1.2.4 微服务架构与SOA的区别 6\n1.3 如何构建微服务架构 6\n1.3.1 微服务的拆分 7\n1.3.2 微服务架构的组件 7\n1.3.3 微服务架构的搭建 7\n1.3.4 微服务架构的技术选型 8\n1.4 本章小结 10\n第2章 初识Spring Boot 11\n2.1 Spring Boot介绍 12\n2.1.1 Spring Boot的由来和特点 12\n2.1.2 Spring Boot的使用要求 12\n2.2 Spring Boot入门 13\n2.2.1 Spring Boot项目的快速搭建 13\n2.2.2 第一个Spring Boot程序 18\n2.3 Spring Boot的工作机制 20\n2.3.1 @Spring BootApplication 20\n2.3.2 Spring Application 21\n2.4 本章小结 22\n第3章 Spring Boot应用开发 23\n3.1 Spring Boot与MyBatis的集成 24\n3.2 Spring Boot与Redis的集成 29\n3.2.1 添加Redis缓存 29\n3.2.2 清除Redis缓存 31\n3.3 Spring Boot与ActiveMQ的集成 31\n3.3.1 使用内嵌的ActiveMQ 31\n3.3.2 使用外部的ActiveMQ 33\n3.4 Spring Boot应用的打包和部署 35\n3.4.1 JAR包 35\n3.4.2 WAR包 36\n3.5 本章小结 37\n第4章 Spring Cloud（上） 38\n4.1 Spring Cloud简介 39\n4.1.1 什么是Spring Cloud 39\n4.1.2 Spring Cloud的特点 39\n4.1.3 Spring Cloud的版本 39\n4.2 服务发现 40\n4.2.1 Eureka介绍 40\n4.2.2 如何使用Eureka注册服务 41\n4.2.3 如何实现服务间的调用 47\n4.3 客户端负载均衡 50\n4.3.1 Ribbon介绍 50\n4.3.2 Ribbon的使用 51\n4.4 本章小结 53\n第5章 Spring Cloud（下） 54\n5.1 服务容错保护 55\n5.1.1 Spring Cloud Hystrix介绍 55\n5.1.2 Spring Cloud Hystrix的使用 56\n5.1.3 HystrixDashboard的使用 59\n5.2 API网关服务 63\n5.2.1 为什么需要API网关 63\n5.2.2 如何使用Zuul构建API网关服务 64\n5.3 分布式配置管理 68\n5.3.1 Spring Cloud Config简介 68\n5.3.2 使用本地存储的方式实现配置管理 69\n5.3.3 使用Git存储的方式实现配置管理 73\n5.4 本章小结 76\n第6章 初识Docker 77\n6.1 Docker概述 78\n6.1.1 什么是Docker 78\n6.1.2 Docker的特点 78\n6.1.3 Docker与虚拟机的区别 79\n6.2 Docker的安装要求 79\n6.3 Docker的安装方式 80\n6.3.1 在线安装 80\n6.3.2 离线安装 82\n6.3.3 脚本文件安装 83\n6.3.4 安装时的问题及解决方法 84\n6.4 Docker的运行机制 85\n6.4.1 Docker的引擎 85\n6.4.2 Docker的架构 85\n6.5 Docker的底层技术 87\n6.6 本章小结 87\n第7章 Docker的使用 88\n7.1 Docker入门程序 89\n7.2 Dockerfile介绍 92\n7.2.1 Dockerfile基本结构 92\n7.2.2 Dockerfile常用指令 93\n7.2.3 dockerignore文件 95\n7.3 Docker客户端常用指令 96\n7.3.1 Docker常用操作指令 96\n7.3.2 Docker管理指令 101\n7.4 Docker镜像管理 102\n7.4.1 Docker镜像管理工具 102\n7.4.2 Docker Hub远程镜像管理 103\n7.4.3 Docker Registry本地私有仓库搭建 106\n7.4.4 Docker Registry本地私有仓库配置 107\n7.5 本章小结 112\n第8章 Docker中的网络与数据管理 113\n8.1 Docker网络管理 114\n8.1.1 Docker默认网络管理 114\n8.1.2 自定义网络介绍 115\n8.1.3 自定义bridge网络 116\n8.1.4 容器之间的网络通信 118\n8.2 Docker Swarm集群 122\n8.2.1 Docker Swarm概述 122\n8.2.2 Docker Swarm使用 123\n8.3 Docker数据管理 127\n8.3.1 Docker数据存储机制 127\n8.3.2 Docker数据存储方式 129\n8.4 Volumes数据卷管理 129\n8.4.1 Volumes数据卷的优势 129\n8.4.2 Volumes数据卷使用 130\n8.5 本章小结 134\n第9章 微服务项目的整合与测试 135\n9.1 微服务项目整合 136\n9.1.1 微服务项目结构预览 136\n9.1.2 微服务项目功能介绍 136\n9.1.3 微服务项目的启动和测试 140\n9.2 接口可视化工具—Swagger—UI 143\n9.2.1 Swagger—UI使用方法 143\n9.2.2 Swagger—UI使用测试 145\n9.3 本章小结 147\n第10章 微服务的部署 149\n10.1 Docker Compose编排工具 150\n10.1.1 Docker Compose介绍 150\n10.1.2 Docker Compose的安装与卸载 150\n10.1.3 Composefile文件的使用说明 151\n10.2 微服务与Docker的整合 154\n10.3 环境搭建以及镜像准备 159\n10.3.1 环境搭建 159\n10.3.2 镜像准备 161\n10.4 微服务的手动部署 162\n10.4.1 非集群环境下的服务部署 162\n10.4.2 集群环境下服务部署 163\n10.4.3 微服务测试 167\n10.5 使用Jenkins自动部署微服务 169\n10.5.1 Jenkins介绍 169\n10.5.2 Jenkins安装 170\n10.5.3 Jenkins集成插件配置 173\n10.5.4 服务自动化部署 175\n10.6 本章小结 180","pages":"","images":{"small":"https://img3.doubanio.com\/view\/subject\/s\/public\/s29858182.jpg","large":"https://img3.doubanio.com\/view\/subject\/l\/public\/s29858182.jpg","medium":"https://img3.doubanio.com\/view\/subject\/m\/public\/s29858182.jpg"},"alt":"https:\/\/book.douban.com\/subject\/30314756\/","id":"30314756","publisher":"","isbn10":"7115443203","isbn13":"9787115443205","title":"微服务架构基础:Spring Boot+Spring Cloud+Docker","url":"https:\/\/api.douban.com\/v2\/book\/30314756","alt_title":"","author_intro":"黑马程序员，传智播客旗下高端IT教育品牌，成立于2006年，它是由中国Java培训领先者张孝祥老师发起，联合全球最大的中文IT社区CSDN、中关村软件园共同创办的一家专业教育机构。办学至今，我们一直坚守着“为千万人少走弯路而著书，为中华软件之崛起而讲课”的办学理念，坚持培养优秀软件应用工程师的宏伟目标，在累计培养的十万余名学员中，其中90%的学员均已在北、上、广等一线城市高薪就业。","summary":"","price":""},{"rating":{"max":10,"numRaters":6,"average":"0.0","min":0},"subtitle":"","author":["杨恩雄"],"pubdate":"2018-1","tags":[{"count":5,"name":"微服务","title":"微服务"},{"count":5,"name":"SpringCloud","title":"SpringCloud"},{"count":1,"name":"软件开发","title":"软件开发"},{"count":1,"name":"计算科学","title":"计算科学"},{"count":1,"name":"编程","title":"编程"},{"count":1,"name":"SpringBoot","title":"SpringBoot"},{"count":1,"name":"HA","title":"HA"}],"origin_title":"","image":"https://img1.doubanio.com\/view\/subject\/m\/public\/s29640318.jpg","binding":"平装","translator":[],"catalog":"第1章　Spring Cloud概述\t1\n1.1　传统的应用\t2\n1.1.1　单体应用\t2\n1.1.2　架构演进\t3\n1.1.3　架构要求\t4\n1.2　微服务与Spring Cloud\t5\n1.2.1　什么是微服务\t5\n1.2.2　关于Netflix OSS\t6\n1.2.3　Spring Cloud与Netflix\t6\n1.2.4　Spring Cloud的主要模块\t6\n1.3　学习方面的准备工作\t7\n1.3.1　下载本书的软件及源码\t7\n1.3.2　导入本书的案例\t7\n1.4　本章小结\t8\n第2章　搭建开发环境\t9\n2.1　安装与配置Maven\t10\n2.1.1　关于Maven\t10\n2.1.2　下载与安装Maven\t11\n2.1.3　配置远程仓库\t11\n2.2　安装Eclipse\t12\n2.2.1　Eclipse版本\t12\n2.2.2　在Eclipse中配置Maven\t12\n2.3　Spring Boot\t13\n2.3.1　Spring Boot简介\t13\n2.3.2　新建Maven项目\t14\n2.3.3　编写启动类\t15\n2.3.4　编写控制器\t16\n2.3.5　发布REST WebService\t17\n2.4　Spring Boot配置文件\t18\n2.4.1　默认配置文件\t18\n2.4.2　指定配置文件位置\t19\n2.4.3　yml文件\t19\n2.4.4　运行时指定profiles配置\t20\n2.4.5　热部署\t20\n2.5　Spring Cloud的版本\t21\n2.6　本章小结\t21\n第3章　微服务发布与调用\t22\n3.1　Eureka介绍\t23\n3.1.1　关于Eureka\t23\n3.1.2　Eureka架构\t23\n3.1.3　服务器端\t24\n3.1.4　服务提供者\t24\n3.1.5　服务调用者\t24\n3.2　第一个Eureka应用\t24\n3.2.1　构建服务器\t24\n3.2.2　服务器注册开关\t27\n3.2.3　编写服务提供者\t27\n3.2.4　编写服务调用者\t29\n3.2.5　程序结构\t32\n3.3　Eureka集群搭建\t33\n3.3.1　本例集群结构图\t33\n3.3.2　改造服务器端\t34\n3.3.3　改造服务提供者\t35\n3.3.4　改造服务调用者\t37\n3.3.5　编写REST客户端进行测试\t37\n3.4　服务实例的健康自检\t38\n3.4.1　程序结构\t39\n3.4.2　使用Spring Boot Actuator\t39\n3.4.3　实现应用健康自检\t39\n3.4.4　服务查询\t42\n3.5　Eureka的常用配置\t44\n3.5.1　心跳检测配置\t44\n3.5.2　注册表抓取间隔\t44\n3.5.3　配置与使用元数据\t45\n3.5.4　自我保护模式\t45\n3.6　本章小结\t46\n第4章　负载均衡\t47\n4.1　Ribbon介绍\t48\n4.1.1　Ribbon简介\t48\n4.1.2　Ribbon子模块\t48\n4.1.3　负载均衡器组件\t48\n4.2　第一个Ribbon程序\t49\n4.2.1　编写服务\t49\n4.2.2　编写请求客户端\t51\n4.2.3　Ribbon的配置\t52\n4.3　Ribbon的负载均衡机制\t53\n4.3.1　负载均衡器\t53\n4.3.2　自定义负载规则\t54\n4.3.3　Ribbon自带的负载规则\t56\n4.3.4　Ping机制\t57\n4.3.5　自定义Ping\t59\n4.3.6　其他配置\t59\n4.4　在Spring Cloud中使用Ribbon\t60\n4.4.1　准备工作\t60\n4.4.2　使用代码配置Ribbon\t61\n4.4.3　使用配置文件设置Ribbon\t63\n4.4.4　Spring使用Ribbon的API\t64\n4.5　RestTemplate负载均衡\t66\n4.5.1　@LoadBalanced注解概述\t66\n4.5.2　编写自定义注解以及拦截器\t66\n4.5.3　使用自定义拦截器以及注解\t68\n4.5.4　在控制器中使用RestTemplate\t69\n4.6　本章小结\t71\n第5章　REST客户端Feign\t72\n5.1　REST客户端\t73\n5.1.1　使用CXF调用REST服务\t73\n5.1.2　使用Restlet调用REST服务\t74\n5.1.3　Feign框架介绍\t75\n5.1.4　第一个Feign程序\t76\n5.1.5　请求参数与返回对象\t77\n5.2　使用Feign\t78\n5.2.1　编码器\t79\n5.2.2　解码器\t80\n5.2.3　XML的编码与解码\t80\n5.2.4　自定义编码器与解码器\t83\n5.2.5　自定义Feign客户端\t83\n5.2.6　使用第三方注解\t85\n5.2.7　Feign解析第三方注解\t86\n5.2.8　请求拦截器\t89\n5.2.9　接口日志\t89\n5.3　在Spring Cloud中使用Feign\t90\n5.3.1　Spring Cloud整合Feign\t91\n5.3.2　Feign负载均衡\t93\n5.3.3　默认配置\t93\n5.3.4　自定义配置\t94\n5.3.5　可选配置\t97\n5.3.6　压缩配置\t98\n5.4　本章小结\t98\n第6章　Spring Cloud的保护机制\t99\n6.1　概述\t100\n6.1.1　实际问题\t100\n6.1.2　传统的解决方式\t101\n6.1.3　集群容错框架Hystrix\t101\n6.1.4　Hystrix的功能\t102\n6.2　第一个Hystrix程序\t103\n6.2.1　准备工作\t103\n6.2.2　客户端使用Hystrix\t103\n6.2.3　调用错误服务\t105\n6.2.4　Hystrix的运作流程\t106\n6.3　Hystrix的使用\t108\n6.3.1　命令执行\t108\n6.3.2　属性配置\t110\n6.3.3　回退\t111\n6.3.4　回退的模式\t112\n6.3.5　断路器开启\t113\n6.3.6　断路器关闭\t116\n6.3.7　隔离机制\t118\n6.3.8　合并请求\t121\n6.3.9　请求缓存\t125\n6.4　在Spring Cloud中使用Hystrix\t127\n6.4.1　整合Hystrix\t128\n6.4.2　命令配置\t130\n6.4.3　默认配置\t131\n6.4.4　缓存注解\t132\n6.4.5　合并请求注解\t134\n6.4.6　Feign与Hystrix整合\t136\n6.4.7　Hystrix监控\t140\n6.5　本章小结\t142\n第7章　微服务集群网关\t143\n7.1　Zuul框架介绍\t144\n7.1.1　关于Zuul\t144\n7.1.2　Zuul的功能\t144\n7.2　在Web项目中使用Zuul\t145\n7.2.1　Web项目整合Zuul\t145\n7.2.2　测试路由功能\t145\n7.2.3　过滤器运行机制\t147\n7.3　在微服务集群中初试Zuul\t148\n7.3.1　集群搭建\t149\n7.3.2　路由到集群服务\t150\n7.3.3　Zuul Http客户端\t153\n7.4　路由配置\t153\n7.4.1　简单路由\t154\n7.4.2　跳转路由\t155\n7.4.3　Ribbon路由\t155\n7.4.4　自定义路由规则\t156\n7.4.5　忽略路由\t157\n7.5　Zuul的其他配置\t157\n7.5.1　请求头配置\t157\n7.5.2　路由端点\t158\n7.5.3　Zuul与Hystrix\t158\n7.5.4　在Zuul中预加载Ribbon\t161\n7.6　Zuul功能进阶\t161\n7.6.1　过滤器优先级\t161\n7.6.2　自定义过滤器\t162\n7.6.3　动态加载过滤器\t163\n7.6.4　禁用过滤器\t165\n7.6.5　请求上下文\t166\n7.6.6　@EnableZuulServer注解\t168\n7.6.7　error过滤器\t169\n7.6.8　动态路由\t171\n7.7　本章小结\t172\n第8章　微服务与消息驱动\t173\n8.1　Spring Cloud Stream介绍\t174\n8.1.1　关于Stream框架\t174\n8.1.2　Stream框架的组成部分\t174\n8.1.3　消息代理中间件\t174\n8.2　RabbitMQ框架\t175\n8.2.1　RabbitMQ和AMQP\t175\n8.2.2　下载与运行\t176\n8.2.3　编写生产者\t177\n8.2.4　编写消费者\t179\n8.2.5　交换器、绑定与队列\t180\n8.3　Apache Kafka框架\t181\n8.3.1　关于Kafka\t181\n8.3.2　运行Kafka服务器\t182\n8.3.3　编写生产者\t182\n8.3.4　编写消费者\t184\n8.3.5　消费者组\t185\n8.4　开发消息微服务\t185\n8.4.1　准备工作\t186\n8.4.2　编写生产者\t187\n8.4.3　编写消费者\t188\n8.4.4　更换绑定器\t189\n8.4.5　Sink、Source与Processor\t190\n8.4.6　消费者组\t191\n8.5　本章小结\t192\n第9章　集群配置中心\t193\n9.1　概述\t194\n9.1.1　关于Spring Cloud Config\t194\n9.1.2　应用结构\t195\n9.1.3　引导程序简介\t195\n9.1.4　搭建SVN环境\t196\n9.2　构建第一个例子\t196\n9.2.1　创建服务器\t196\n9.2.2　配置SVN仓库\t197\n9.2.3　创建客户端\t199\n9.2.4　从客户端读取SVN配置\t200\n9.2.5　目录配置总结\t201\n9.2.6　刷新配置\t202\n9.2.7　刷新Bean\t203\n9.3　配置的加密和解密\t205\n9.3.1　为服务器安装JCE\t205\n9.3.2　加密和解密端点\t205\n9.3.3　SVN存储加密数据\t206\n9.3.4　非对称加密\t207\n9.4　其他配置\t207\n9.4.1　服务器健康指示器\t207\n9.4.2　客户端的错误提前与重试机制\t208\n9.4.3　安全配置\t209\n9.4.4　访问服务器配置\t210\n9.5　整合使用\t210\n9.5.1　准备工作\t210\n9.5.2　配置服务器、客户端整合Eureka\t212\n9.5.3　整合Zuul\t214\n9.5.4　整合Spring Cloud Bus刷新配置\t216\n9.5.5　刷新单个节点配置\t217\n9.6　本章小结\t217\n第10章　微服务跟踪\t219\n10.1　概述\t220\n10.1.1　实际问题与Sleuth\t220\n10.1.2　服务跟踪系统\t220\n10.1.3　Sleuth的基本概念\t220\n10.1.4　项目准备\t221\n10.2　Sleuth整合Zipkin\t222\n10.2.1　Zipkin简介\t222\n10.2.2　构建Zipkin服务器项目\t223\n10.2.3　配置微服务\t224\n10.2.4　查看数据\t225\n10.2.5　使用MySQL保存数据\t228\n10.2.6　使用消息采集数据\t230\n10.3　Sleuth整合ELK\t232\n10.3.1　关于ELK\t232\n10.3.2　下载ELK\t233\n10.3.3　运行Elasticsearch\t233\n10.3.4　使用Logstash读取JSON\t234\n10.3.5　使用Kibana展示数据\t235\n10.3.6　使用Logback转换JSON\t237\n10.4　本章小结\t240\n第11章　微服务数据库实战\t241\n11.1　概述\t242\n11.1.1　关于Spring Data\t242\n11.1.2　Spring Data的功能\t243\n11.1.3　Spring Data的模块\t243\n11.2　Spring Data与JPA\t243\n11.2.1　构建项目\t244\n11.2.2　数据访问层与业务层\t245\n11.2.3　自定义数据存储逻辑\t247\n11.2.4　方法名查询\t248\n11.2.5　使用@Query注解\t249\n11.3　Spring Data与MongoDB\t250\n11.3.1　安装MongoDB\t250\n11.3.2　配置权限\t251\n11.3.3　MongoDB的概念\t252\n11.3.4　构建项目\t252\n11.3.5　数据访问层与业务层\t253\n11.3.6　自定义数据存储逻辑\t254\n11.3.7　方法名查询\t256\n11.3.8　使用@Query注解\t258\n11.4　Spring Data与Redis\t258\n11.4.1　Redis的安装与配置\t258\n11.4.2　Redis的数据类型\t259\n11.4.3　使用Jedis\t260\n11.4.4　构建Spring Data项目\t262\n11.4.5　数据访问层与业务层\t263\n11.4.6　自定义数据存储逻辑\t265\n11.4.7　方法名查询\t267\n11.5　本章小结\t268\n第12章　案例实战\t269\n12.1　概述\t270\n12.1.1　表现层技术\t270\n12.1.2　案例概述\t270\n12.1.3　案例技术选型\t270\n12.2　Spring Boot与JSP\t271\n12.2.1　构建项目\t271\n12.2.2　配置\t272\n12.2.3　打包部署\t273\n12.3　模板引擎Thymeleaf\t274\n12.3.1　关于Thymeleaf\t274\n12.3.2　Spring Boot整合Thymeleaf\t274\n12.3.3　加载资源\t275\n12.3.4　获取请求数据\t276\n12.3.5　调用Bean方法\t276\n12.3.6　遍历集合\t277\n12.3.7　表单提交\t277\n12.4　图书管理案例\t278\n12.4.1　运行案例\t278\n12.4.2　案例模块\t279\n12.4.3　案例架构\t279\n12.4.4　数据库\t280\n12.4.5　用户登录\t280\n12.4.6　新建图书\t284\n12.4.7　图书展示\t286\n12.5　本章小结\t287","pages":"296","images":{"small":"https://img1.doubanio.com\/view\/subject\/s\/public\/s29640318.jpg","large":"https://img1.doubanio.com\/view\/subject\/l\/public\/s29640318.jpg","medium":"https://img1.doubanio.com\/view\/subject\/m\/public\/s29640318.jpg"},"alt":"https:\/\/book.douban.com\/subject\/27605359\/","id":"27605359","publisher":"电子工业出版社","isbn10":"7121331098","isbn13":"9787121331091","title":"疯狂Spring Cloud微服务架构实战","url":"https:\/\/api.douban.com\/v2\/book\/27605359","alt_title":"","author_intro":"","summary":"《疯狂Spring Cloud微服务架构实战》以Spring Cloud为基础，深入讲解微服务开发的相关框架，包括服务管理框架Eureka、负载均衡框架Ribbon、服务客户端Feign、容错框架Hystrix、消息框架Stream等。除了介绍这些微服务相关的框架外，在本书的第11章，还介绍了如何使用Spring Data框架操作各个主流数据库（MySQL、MongoDB、Redis）。在第12章，以一个案例为基础结束本书内容，在该章中讲解了模板引擎Thymeleaf，整本书将会为大家提供一整套微服务应用开发的解决方案。","price":"58"},{"rating":{"max":10,"numRaters":26,"average":"6.8","min":0},"subtitle":"","author":["方志朋"],"pubdate":"2018-2-1","tags":[{"count":28,"name":"微服务","title":"微服务"},{"count":26,"name":"SpringCloud","title":"SpringCloud"},{"count":8,"name":"架构","title":"架构"},{"count":8,"name":"Spring","title":"Spring"},{"count":7,"name":"计算机","title":"计算机"},{"count":7,"name":"springcloud","title":"springcloud"},{"count":6,"name":"程序设计","title":"程序设计"},{"count":6,"name":"Java","title":"Java"}],"origin_title":"","image":"https://img3.doubanio.com\/view\/subject\/m\/public\/s29725723.jpg","binding":"平装","translator":[],"catalog":"第1章　微服务简介 1\n1.1　单体架构及其存在的不足 1\n1.1.1　单体架构简介 1\n1.1.2　单体架构存在的不足 2\n1.1.3　单体架构使用服务器集群\n及存在的不足 2\n1.2　微服务 3\n1.2.1　什么是微服务 4\n1.2.2　微服务的优势 8\n1.3　微服务的不足 9\n1.3.1　微服务的复杂度 9\n1.3.2　分布式事务 9\n1.3.3　服务的划分 11\n1.3.4　服务的部署 11\n1.4　微服务和SOA的关系 12\n1.5　微服务的设计原则 12\n第2章　Spring Cloud简介 14\n2.1　微服务应该具备的功能 14\n2.1.1　服务的注册与发现 15\n2.1.2　服务的负载均衡 15\n2.1.3　服务的容错 17\n2.1.4　服务网关 18\n2.1.5　服务配置的统一管理 19\n2.1.6　服务链路追踪 20\n2.2　Spring Cloud 21\n2.2.1　简介 21\n2.2.2　常用组件 21\n2.2.3　项目一览表 23\n2.3　Dubbo简介 24\n2.4　Spring Cloud与Dubbo比较 25\n2.5　Kubernetes简介 26\n2.6　Spring Could与Kubernetes比较 27\n2.7　总结 29\n第3章　构建微服务的准备 30\n3.1　JDK的安装 30\n3.1.1　JDK的下载和安装 30\n3.1.2　环境变量的配置 30\n3.2　IDEA的安装 31\n3.2.1　IDEA的下载 31\n3.2.2　用IDEA创建一个Spring Boot\n工程 32\n3.2.3　用IDEA启动多个Spring Boot\n工程实例 34\n3.3　构建工具Maven的使用 35\n3.3.1　Maven简介 35\n3.3.2　Maven的安装 35\n3.3.3　Maven的核心概念 37\n3.3.4　编写Pom文件 37\n3.3.5　Maven构建项目的生命周期 39\n3.3.6　常用的Maven命令 40\n第4章　开发框架Spring Boot 43\n4.1　Spring Boot简介 43\n4.1.1　Spring Boot的特点 43\n4.1.2　Spring Boot的优点 44\n4.2　用IDEA构建Spring Boot工程 44\n4.2.1　项目结构 44\n4.2.2　在Spring Boot工程中构建\nWeb 45\n4.2.3　Spring Boot的测试 46\n4.3　Spring Boot配置文件详解 46\n4.3.1　自定义属性 47\n4.3.2　将配置文件的属性赋给\n实体类 47\n4.3.3　自定义配置文件 49\n4.3.4　多个环境的配置文件 50\n4.4　运行状态监控Actuator 50\n4.4.1　查看运行程序的健康状态 52\n4.4.2　查看运行程序的Bean 53\n4.4.3　使用Actuator关闭应用程序 55\n4.4.4　使用shell连接Actuator 56\n4.5　Spring Boot整合JPA 57\n4.6　Spring Boot整合Redis 60\n4.6.1　Redis简介 60\n4.6.2　Redis的安装 60\n4.6.3　在Spring Boot中使用Redis 60\n4.7　Spring Boot整合Swagger2，搭建\nRestful API在线文档 62\n第5章　服务注册和发现Eureka 66\n5.1　Eureka简介 66\n5.1.1　什么是Eureka 66\n5.1.2　为什么选择Eureka 66\n5.1.3　Eureka的基本架构 67\n5.2　编写Eureka Server 67\n5.3　编写Eureka Client 70\n5.4　源码解析Eureka 73\n5.4.1　Eureka的一些概念 73\n5.4.2　Eureka的高可用架构 74\n5.4.3　Register服务注册 74\n5.4.4　Renew服务续约 78\n5.4.5　为什么Eureka Client获取\n服务实例这么慢 80\n5.4.6　Eureka 的自我保护模式 80\n5.5　构建高可用的Eureka Server集群 81\n5.6　总结 83\n第6章　负载均衡Ribbon 84\n6.1　RestTemplate简介 84\n6.2　Ribbon简介 85\n6.3　使用RestTemplate和Ribbon来消费\n服务 85\n6.4　LoadBalancerClient简介 88\n6.5　源码解析Ribbon 90\n第7章　声明式调用Feign 101\n7.1　写一个Feign客户端 101\n7.2　FeignClient详解 105\n7.3　FeignClient的配置 106\n7.4　从源码的角度讲解Feign的工作\n原理 107\n7.5　在Feign中使用HttpClient和\nOkHttp 110\n7.6　Feign是如何实现负载均衡的 112\n7.7　总结 114\n第8章　熔断器Hystrix 115\n8.1　什么是Hystrix 115\n8.2　Hystrix解决了什么问题 115\n8.3　Hystrix的设计原则 117\n8.4　Hystrix的工作机制 117\n8.5　在RestTemplate和Ribbon上使用\n熔断器 118\n8.6　在Feign上使用熔断器 119\n8.7　使用Hystrix Dashboard监控熔断器的\n状态 120\n8.7.1　在RestTemplate中使用Hystrix Dashboard 120\n8.7.2　在Feign中使用\nHystrix Dashboard 123\n8.8　使用Turbine聚合监控 124\n第9章　路由网关Spring Cloud Zuul 126\n9.1　为什么需要Zuul 126\n9.2　Zuul的工作原理 126\n9.3　案例实战 128\n9.3.1　搭建Zuul服务 128\n9.3.2　在Zuul上配置API接口的\n版本号 131\n9.3.3　在Zuul上配置熔断器 132\n9.3.4　在Zuul中使用过滤器 133\n9.3.5　Zuul的常见使用方式 135\n第10章　配置中心\nSpring Cloud Config 137\n10.1　Config Server从本地读取配置\n文件 137\n10.1.1　构建Config Server 137\n10.1.2　构建Config Client 138\n10.2　Config Server从远程Git仓库读取\n配置文件 140\n10.3　构建高可用的Config Server 141\n10.3.1　构建Eureka Server 141\n10.3.2　改造Config Server 142\n10.3.3　改造Config Client 143\n10.4 使用Spring Cloud Bus刷新配置 144\n第11章　服务链路追踪\nSpring Cloud Sleuth 147\n11.1　为什么需要Spring Cloud Sleuth 147\n11.2　基本术语 147\n11.3　案例讲解 148\n11.3.1　构建Zipkin Server 148\n11.3.2　构建User Service 149\n11.3.3　构建Gateway Service 151\n11.3.4　项目演示 152\n11.4　在链路数据中添加自定义数据 153\n11.5　使用RabbitMQ 传输链路数据 154\n11.6　在MySQL数据库中存储链路数据 155\n11.6.1　使用Http传输链路数据，\n并存储在MySQL数据\n库中 156\n11.6.2　使用RabbitMQ传输链路\n数据，并存储在MySQL\n数据库中 157\n11.7　在ElasticSearch中存储链路数据 158\n11.8　用Kibana展示链路数据 159\n第12章　微服务监控\nSpring Boot Admin 161\n12.1　使用Spring Boot Admin监控Spring Cloud微服务 161\n12.1.1　构建Admin Server 161\n12.1.2　构建Admin Client 163\n12.2　在Spring Boot Admin中集成Turbine 166\n12.2.1　改造Eureka Client 166\n12.2.2　另行构建Eureka Client 167\n12.2.3　构建Turbine工程 168\n12.2.4　在Admin Server中集成\nTurbine 169\n12.3　在Spring Boot Admin中添加安全\n登录界面 172\n第13章　Spring Boot Security详解 174\n13.1　Spring Security简介 174\n13.1.1　什么是Spring Security 174\n13.1.2　为什么选择Spring Security 174\n13.1.3　Spring Security提供的安全\n模块 175\n13.2　Spring Boot Security与Spring Security\n的关系 176\n13.3　Spring Boot Security案例详解 176\n13.3.1　构建Spring Boot Security\n工程 176\n13.3.2　配置Spring Security 178\n13.3.3　编写相关界面 180\n13.3.4　Spring Security方法级别上\n的保护 185\n13.3.5　从数据库中读取用户的\n认证信息 188\n13.4　总结 193\n第14章　使用Spring Cloud OAuth2\n保护微服务系统 195\n14.1　什么是OAuth2 195\n14.2　如何使用Spring OAuth2 196\n14.2.1　OAuth2 Provider 196\n14.2.2　OAuth2 Client 200\n14.3　案例分析 201\n14.3.1　编写Eureka Server 202\n14.3.2　编写Uaa授权服务 202\n14.3.3　编写service-hi资源服务 209\n14.4　总结 215\n第15章　使用Spring Security OAuth2\n和JWT保护微服务系统 217\n15.1　JWT简介 217\n15.1.1　什么是JWT 217\n15.1.2　JWT的结构 218\n15.1.3　JWT的应用场景 219\n15.1.4　如何使用JWT 219\n15.2　案例分析 219\n15.2.1　案例架构设计 219\n15.2.2　编写主Maven工程 220\n15.2.3　编写Eureka Server 221\n15.2.4　编写Uaa授权服务 222\n15.2.5　编写user-service资源服务 227\n15.3 总结 236\n第16章　使用Spring Cloud构建微\n服务综合案例 237\n16.1　案例介绍 237\n16.1.1　工程结构 237\n16.1.2　使用的技术栈 238\n16.1.3　工程架构 238\n16.1.4　功能展示 240\n16.2　案例详解 244\n16.2.1　准备工作 244\n16.2.2　构建主Maven工程 244\n16.2.3　构建eureka-server工程 245\n16.2.4　构建config-server工程 246\n16.2.5　构建zipkin-service工程 247\n16.2.6　构建monitoring-service\n工程 248\n16.2.7　构建uaa-service工程 250\n16.2.8　构建gateway-service工程 251\n16.2.9　构建admin-service工程 253\n16.2.10　构建user-service工程 253\n16.2.11　构建blog-service工程 256\n16.2.12　构建log-service工程 256\n16.3　启动源码工程 260\n16.4　项目演示 261\n16.5　总结 262","pages":"262","images":{"small":"https://img3.doubanio.com\/view\/subject\/s\/public\/s29725723.jpg","large":"https://img3.doubanio.com\/view\/subject\/l\/public\/s29725723.jpg","medium":"https://img3.doubanio.com\/view\/subject\/m\/public\/s29725723.jpg"},"alt":"https:\/\/book.douban.com\/subject\/30180533\/","id":"30180533","publisher":"人民邮电出版社","isbn10":"7115475229","isbn13":"9787115475220","title":"深入理解Spring Cloud与微服务构建","url":"https:\/\/api.douban.com\/v2\/book\/30180533","alt_title":"","author_intro":"作者方志朋，毕业于武汉理工大学硕士学位。 CSDN博客专家、Spring Cloud中国社区联合创始人。对技术有着狂热的追求，活跃于各大技术社区，包括CSDN、GitHub、掘金、简书、Spring Cloud中国社区。","summary":"适读人群 ：本书既适合Spring Cloud初学者入门使用，又适合正在做微服务实践的架构师或打算实施微服务的团队作为参考用书，同时也可作为高等院校计算机相关专业的师生用书和培训学校的教材。\n1. 深入浅出讲解Spring Cloud组件、开发工具、框架等知识点。\n2. 使读者全面理解微服务的构建原理。\n3. 实例丰富，解释清晰，易于读者真正理解原理，并学以致用。\n4. 深入讲解Spring Cloud OAuth2，直击市场需求痛点。\n内容简介\n本书共分16章，全面涵盖了Spring Cloud构建微服务相关的知识点。第1、2章详细介绍了微服务架构和Spring Cloud。第3、4章讲解了用Spring Cloud构建微服务的准备工作。第5～12章以案例为切入点，讲解了Spring Cloud构建微服务的基础组件，包括Eureka、Ribbon、Feign、Hystrix、Zuul、Config、Sleuth、Admint等组件。第13～15章讲述了使用Spring Cloud OAuth2来保护微服务系统的相关知识。第16章用一个综合案例，全面讲解了如何使用Spring Cloud构建微服务，可以作为实际开发的样例工程。","price":"69"},{"rating":{"max":10,"numRaters":22,"average":"5.4","min":0},"subtitle":"","author":["柳伟卫"],"pubdate":"2018-6","tags":[{"count":20,"name":"微服务","title":"微服务"},{"count":19,"name":"SpringCloud","title":"SpringCloud"},{"count":9,"name":"分布式","title":"分布式"},{"count":9,"name":"SpringBoot","title":"SpringBoot"},{"count":6,"name":"软件架构","title":"软件架构"},{"count":6,"name":"spring-boot","title":"spring-boot"},{"count":5,"name":"领域驱动","title":"领域驱动"},{"count":5,"name":"Spring","title":"Spring"}],"origin_title":"","image":"https://img3.doubanio.com\/view\/subject\/m\/public\/s29790492.jpg","binding":"平装","translator":[],"catalog":"内容简介\n前言\n第1章 微服务概述\n1.1 传统软件行业面临的挑战\n1.2 常见分布式系统架构\n1.3 单块架构如何进化为微服务架构\n1.4 微服务架构的设计原则\n1.5 如何来设计微服务系统\n第2章 微服务的基石——Spring Boot\n2.1 Spring Boot 简介\n2.2 开启第一个 Spring Boot 项目\n2.3 Hello World\n2.4 如何搭建开发环境\n2.5 Gradle 与 Maven 的抉择\n第3章 Spring Boot 的高级主题\n3.1 构建 RESTful 服务\n3.2 Spring Boot 的配置详解\n3.3 内嵌 Servlet 容器\n3.4 实现安全机制\n3.5 允许跨域访问\n3.6 消息通信\n3.7 数据持久化\n3.8 实现热插拔（hot swapping）\n第4章 微服务的测试\n4.1 测试概述\n4.2 测试的类型和范围\n4.3 如何进行微服务的测试\n第5章 微服务的协调者——Spring Cloud\n5.1 Spring Cloud 简介\n5.2 Spring Cloud 入门配置\n5.3 Spring Cloud 的子项目介绍\n第6章 服务拆分与业务建模\n6.1 从一个天气预报系统讲起\n6.2 使用Redis提升应用的并发访问能力\n6.3 实现天气数据的同步\n6.4 给天气预报一个“面子”\n6.5 如何进行微服务的拆分\n6.6 领域驱动设计与业务建模\n第7章 天气预报系统的微服务架构设计与实现\n7.1 天气预报系统的架构设计\n7.2 天气数据采集微服务的实现\n7.3 天气数据API微服务的实现\n7.4 天气预报微服务的实现\n7.5 城市数据API微服务的实现\n第8章 微服务的注册与发现\n8.1 服务发现的意义\n8.2 如何集成 Eureka Server\n8.3 如何集成 Eureka Client\n8.4 实现服务的注册与发现\n第9章 微服务的消费\n9.1 微服务的消费模式\n9.2 常见微服务的消费者\n9.3 使用 Feign 实现服务的消费者\n9.4 实现服务的负载均衡及高可用\n第10章 API 网关\n10.1 API 网关的意义\n10.2 常见 API 网关的实现方式\n10.3 如何集成Zuul\n10.4 实现 API 网关\n第11章 微服务的部署与发布\n11.1 部署微服务将面临的挑战\n11.2 持续交付与持续部署微服务\n11.3 基于容器的部署与发布微服务\n11.4 使用 Docker 来构建、运行、发布微服务\n第12章 微服务的日志与监控\n12.1 微服务日志管理将面临的挑战\n12.2 日志集中化的意义\n12.3 常见日志集中化的实现方式\n12.4 Elastic Stack 实现日志集中化\n第13章 微服务的集中化配置\n13.1 为什么需要集中化配置\n13.2 使用 Config 实现的配置中心\n第14章 微服务的高级主题——自动扩展\n14.1 什么是自动扩展\n14.2 自动扩展的意义\n14.3 自动扩展的常见模式\n14.4 如何实现微服务的自动扩展\n第15章 微服务的高级主题——熔断机制\n15.1 什么是服务的熔断机制\n15.2 熔断的意义\n15.3 熔断与降级的区别\n15.4 如何集成 Hystrix\n15.5 实现微服务的熔断机制\n第16章 微服务的高级主题——分布式消息总线\n16.1 什么是消息总线\n16.2 Spring Cloud Bus 设计原理\n16.3 如何集成 Bus\n16.4 实现配置信息的自动更新\n附录A：本书所涉及到的技术及相关版本\n参考资料","pages":"","images":{"small":"https://img3.doubanio.com\/view\/subject\/s\/public\/s29790492.jpg","large":"https://img3.doubanio.com\/view\/subject\/l\/public\/s29790492.jpg","medium":"https://img3.doubanio.com\/view\/subject\/m\/public\/s29790492.jpg"},"alt":"https:\/\/book.douban.com\/subject\/30245248\/","id":"30245248","publisher":"北京大学出版社","isbn10":"7301294565","isbn13":"9787301294567","title":"Spring Cloud 微服务架构开发实战","url":"https:\/\/api.douban.com\/v2\/book\/30245248","alt_title":"","author_intro":"柳伟卫（waylau.com 站长），关注编程、系统架构、性能优化。\n在大型IT公司担任过项目经理、架构师、高级开发顾问等职位，具有多年软件开发管理及系统架构经验。\n负责过多个省级、国家级大型分布式系统的设计与研发，参与了多个大型项目的微服务架构的技术改造，在实际工作中积累了大量的微服务架构经验。\n是CSDN、开源中国、云栖社区等技术社区专家。已出版专著《分布式系统常用技术及案例分析》、《Spring Boot 企业级应用开发实战》、《Spring Cloud 微服务架构开发实战》等。\n对技术抱有极大的热情，坚持每天学习，喜欢开源，乐于分享。已经为开源社区撰写了超过一打的开源技术书籍（https:\/\/waylau.com\/books\/）。","summary":"内容简介：\n众所周知，Spring Cloud 是开发微服务架构系统的利器，企业对 Spring Cloud 方面的开发需求也非常旺盛。然而，虽然市面上介绍 Spring Cloud 的概念及基础入门的书籍较多，但这些书籍中的案例往往只是停留在简单的“Hello World”级别，缺乏可真正用于实战落地的指导。\n本书与其他书籍不同，其中一个最大的特色是真正从实战角度出发，运用 Spring Cloud 技术来构建一个完整的微服务架构的系统。本书全面介绍 Spring Cloud 的概念、产生的背景，以及围绕 Spring Cloud 在开发微服务架构系统过程中所面临的问题时应当考虑的设计原则和解决方案。特别是在设计微服务架构系统时所面临的系统分层、服务测试、服务拆分、服务通信、服务注册、服务发现、服务消费、集中配置、日志管理、容器部署、安全防护、自动扩展等方面，给出了作者自己独特的见解。本书不仅介绍了微服务架构系统的原理、基础理论，还以一个真实的天气预报系统实例为主线，集成市面上主流的最新的实现技术框架，手把手地教读者如何来应用这些技术，创建一个完整的微服务架构系统。这样读者可以理论联系实践，从而让 Spring Cloud 真正地落地。\n此外，本书不仅可以令读者了解微服务架构系统开发的完整流程，而且通过实战结合技术点的归纳，令读者知其然且知其所以然。本书所涉及的技术符合当前主流，并富有一定的前瞻性，可以有效提高读者在市场中的核心竞争力。\n本书主要面向以 Spring 为核心的 Java EE 开发者，以及对 Spring Cloud 和微服务开发感兴趣的读者。\n写作背景：\n对于微服务知识的整理归纳，最早是在笔者的第一本书《分布式系统常用技术及案例分析》的微服务章节中，作为微服务的基础理论来展开的。由于篇幅限制，当时书中所涉及的案例深度和广度也比较有限。其后，笔者又在 GitHub 上，以开源方式撰写了《Spring Boot 教程》、《Spring Cloud 教程》系列教程（https:\/\/waylau.com\/books\/），为网友们提供了更加丰富的使用案例。在2017年，笔者应邀给慕课网做了一个关于 Spring Boot、Spring Cloud 实战的系列视频课程。视频课程上线后受到广大 Java 技术爱好者的关注，课程的内容也引起了热烈的反响。很多该课程的学员通过学习该课程，不但可以学会 Spring Boot 及 Spring Cloud 最新的周边技术栈，掌握如何运用上述技术进行整合、搭建框架的能力，熟悉单体架构及微服务架构的特点，并且最终实现掌握构建微服务架构的实战能力。最为重要的是提升了学员自身在市场上的价值。\n众所周知，Spring Cloud 是开发微服务架构系统的利器，企业对 Spring Cloud 方面的开发需求也非常旺盛。然而，虽然市面上介绍 Spring Cloud 的概念及基础入门的书籍较多，但这些书籍中的案例往往 只是停留在简单的“Hello World”级别，缺乏可真正用于实战落地的指导。于是，笔者打算写一本可以完整呈现 Spring Cloud 实战的书籍。\n笔者将以往系列课程中的技术做了总结和归纳，采用目前最新的 Spring Boot 及 Spring Cloud 技术栈（本书案例基于最新的Spring Boot 2.0.0.M4 及Spring Cloud Finchley.M2 编写）来重写了整个教学案例，并整理成书，希望能够弥补 Spring Cloud 在实战方面的空白，从而使广大 Spring Cloud 爱好者都能受益。","price":""},{"rating":{"max":10,"numRaters":17,"average":"5.0","min":0},"subtitle":"","author":["胡劲寒"],"pubdate":"","tags":[{"count":8,"name":"云服务","title":"云服务"},{"count":6,"name":"微服务","title":"微服务"},{"count":1,"name":"Spring","title":"Spring"},{"count":1,"name":"Cloud","title":"Cloud"}],"origin_title":"","image":"https://img1.doubanio.com\/view\/subject\/m\/public\/s33459749.jpg","binding":"平装","translator":[],"catalog":"序\n前言\n第一篇　基础服务篇\n第1章　微服务与Spring Cloud2\n1.1　架构演进2\n1.1.1　服务端架构发展2\n1.1.2　微服务架构4\n1.2　Spring Cloud面面观7\n1.2.1　Spring Cloud与Dubbo对比7\n1.2.2　Spring Cloud好在哪里9\n1.2.3　Spring Cloud子项目与解决方案10\n1.3　小结15\n第2章　服务发现：Eureka16\n2.1　使用Eureka17\n2.1.1　Eureka服务提供方18\n2.1.2　Eureka服务调用方19\n2.2　进阶场景20\n2.3　小结24\n第3章　配置中心：Config25\n3.1　Spring Cloud Config的组成25\n3.2　使用Config Server配置服务端26\n3.3　使用Config Client配置客户端29\n3.4　进阶场景31\n3.4.1　热生效31\n3.4.2　高可用32\n3.4.3　安全与加解密34\n3.4.4　自定义格式文件支持36\n3.5　其他仓库的实现配置37\n3.6　小结39\n第4章　客户端负载均衡：Ribbon40\n4.1　使用Ribbon40\n4.2　进阶场景42\n4.2.1　使用配置类42\n4.2.2　使用配置文件42\n4.2.3　默认实现43\n4.3　小结44\n第5章　RESTful客户端：Feign45\n5.1　使用Feign45\n5.2　进阶场景46\n5.2.1　配置与默认实现46\n5.2.2　Feign整合Hystrix47\n5.2.3　数据压缩48\n5.2.4　日志48\n5.3　小结49\n第6章　熔断器：Hystrix50\n6.1　为什么要有熔断50\n6.2　熔断原理52\n6.3　使用Hystrix55\n6.4　Hystrix数据监控58\n6.4.1　健康指示器58\n6.4.2　监控面板59\n6.4.3　聚合监控61\n6.5　小结62\n第7章　路由网关：Zuul63\n7.1　使用Zuul64\n7.2　业务场景深入解析65\n7.3　小结71\n第8章　网关新选择：Gateway72\n8.1　使用Gateway73\n8.2　路由断言76\n8.3　过滤器81\n8.4　小结88\n第9章　调用链追踪：Spring Cloud Sleuth89\n9.1　术语解释90\n9.2　Zipkin简介91\n9.3　使用Zipkin93\n9.4　Span进阶场景97\n9.4.1　自定义日志采样策略97\n9.4.2　Span的生命周期98\n9.4.3　重命名Span99\n9.4.4　自定义Span100\n9.5　其他场景与配置101\n9.6　小结104\n第10章　加密管理：Vault105\n10.1　初识HashiCorp Vault105\n10.2　整合Spring Cloud Vault111\n10.3　认证模式114\n10.4　三方组件支持116\n10.5　小结118\n第11章　公共子项目119\n11.1　命令行工具：Spring Boot CLI119\n11.1.1　安装Spring Boot CLI119\n11.1.2　使用Spring Cloud CLI120\n11.1.3　加解密122\n11.2　注册中心：Spring Cloud ZooKeeper122\n11.2.1　安装ZooKeeper122\n11.2.2　基于ZooKeeper服务发现122\n11.2.3　相关配置124\n11.2.4　节点监听126\n11.3　注册中心：Spring Cloud Consul127\n11.3.1　安装Consul127\n11.3.2　基于Consul注册服务127\n11.4　小结128\n第二篇　任务与消息篇\n第12章　消息驱动：Spring Cloud Stream130\n12.1　Stream应用模型130\n12.2　示例131\n12.3　代码解析133\n12.4　Spring Integration支持137\n12.5　Binder解析138\n12.6　常用配置141\n12.7　小结142\n第13章　消息总线：Spring Cloud Bus143\n13.1　使用Spring Cloud Bus144\n13.2　进阶场景144\n13.3　小结148\n第14章　批处理：Spring Cloud Task149\n14.1　使用Spring Cloud Task149\n14.2　进阶场景150\n14.2.1　数据库集成150\n14.2.2　任务事件监听152\n14.2.3　相关配置项153\n12.4.4　整合Spring Cloud Stream154\n14.3　源码解析154\n14.4　小结156\n第三篇　微服务实战篇\n第15章　利用Docker进行编排与整合158\n15.1　Docker基础应用158\n15.1.1　Docker基础158\n15.1.2　Dockerfile基础159\n15.2　Spring Cloud核心组件整合161\n15.3　Dockerfile编写186\n15.4　启动与接口测试188\n15.5　小结190\n后记191\n附录　配置汇总192","pages":"220","images":{"small":"https://img1.doubanio.com\/view\/subject\/s\/public\/s33459749.jpg","large":"https://img1.doubanio.com\/view\/subject\/l\/public\/s33459749.jpg","medium":"https://img1.doubanio.com\/view\/subject\/m\/public\/s33459749.jpg"},"alt":"https:\/\/book.douban.com\/subject\/34798024\/","id":"34798024","publisher":"机械工业出版社","isbn10":"7111632818","isbn13":"9787111632818","title":"极简Spring Cloud实战","url":"https:\/\/api.douban.com\/v2\/book\/34798024","alt_title":"","author_intro":"胡劲寒，曾在多家上市金融公司，以及一二线互联网公司历任高级架构师、技术专家、研发经理等职务。十多年Java 服务端架构及管理经验，专注于互联网、金融等领域，擅长服务端架构、微服务、虚拟化、区块链等技术。","summary":"本书精巧实用，可快速入门，是Spring Cloud践行者经验集结，兼顾组件应用与原理分析，并融合微服务和DevOps实践案例。本书分为三篇，共计15章内容。基础服务篇（第1～11章），本篇内容是实践微服务常用的知识点和必备技能，需要重点学习。主要介绍了Spring Cloud的全貌，Spring Cloud在服务调用、治理、调用链追踪、熔断及服务网关的实现框架，以及安全与注册中心的使用等。任务与消息篇（第12～14章），主要介绍Spring Cloud对消息与任务流依赖处理的组件应用及其实现原理。微服务实战篇（第15章），给出一个基于Spring Cloud、Docker、OAuth2 的完整案例，全面实践书中所学。","series":{"id":"34304","title":"云计算与虚拟化技术丛书"},"price":"79"},{"rating":{"max":10,"numRaters":8,"average":"0.0","min":0},"subtitle":"","author":["陈韶健"],"pubdate":"2018-6","tags":[{"count":2,"name":"微服务","title":"微服务"},{"count":2,"name":"Java","title":"Java"},{"count":1,"name":"SpringCloud","title":"SpringCloud"},{"count":1,"name":"Docker","title":"Docker"}],"origin_title":"","image":"https://img1.doubanio.com\/view\/subject\/m\/public\/s29797968.jpg","binding":"平装","translator":[],"catalog":"第一部分架 构 篇\n1 微服务架构与 Spring Cloud  2\n1.1 微服务概念的由来  2\n1.2 微服务的定义  3\n1.3 微服务架构与整体式架构的区别  5\n1.4 微服务架构与SOA 的比较  8\n1.5 为什么要使用微服务架构  9\n1.6 为实施微服务架构做好准备  10\n1.6.1 思想观念的转变  10\n1.6.2 团队管理方式的改变  11\n1.6.3 自动化基础设施的建设  11\n1.7 为什么要使用Spring Cloud  12\n1.8 Spring Cloud 组件介绍  13\n1.9 Spring Cloud 的版本说明  15\n1.10 小结  17\n2 微服务架构最佳设计  18\n2.1 合理划分微服务  19\n2.2 微服务治理  19\n2.3 Rest API 微服务设计  21\n2.3.1 使用数据库集群  22\n2.3.2 读写分离设计  22\n2.3.3 使用缓存  22\n2.3.4 保证Rest API 微服务的独立性  23\n2.4 Web UI 微服务设计  23\n2.4.1 使用FeignClient 实现负载均衡调用  23\n2.4.2 使用Hystrix 实现容错设计  23\n2.4.3 使用非阻塞的异步编程技术实现高并发调用  24\n2.4.4 使用分布式文件系统  24\n2.5 微服务之间调用规则设计  24\n2.6 数据最终一致性设计  25\n2.7 分布式集群架构设计  26\n2.8 微服务运行环境安全设计  27\n2.9 小结  27\n3 电商平台微服务设计实例  29\n3.1 电商平台总体设计  29\n3.1.1 总体业务流程设计  29\n3.1.2 总体业务功能设计  31\n3.2 电商平台业务模型设计  32\n3.2.1 移动商城业务模型  32\n3.2.2 商家管理后台业务模型  33\n3.2.3 平台管理后台业务模型  33\n3.3 创建Rest API 微服务  34\n3.4 创建Web UI 微服务  36\n3.4.1 移动商城Web UI 微服务  36\n3.4.2 商家管理后台的Web UI 微服务  37\n3.4.3 平台管理后台Web UI 微服务  37\n3.5 电商平台微服务体系结构  38\n3.6 小结  39\n第二部分 开 发 篇\n4 开发工具选用及 Spring Boot 基础  41\n4.1 开发工具选择  42\n4.2 开发环境配置  42\n4.3 创建Spring Boot 工程  43\n4.4 使用JPA  47\n4.4.1 数据源配置  48\n4.4.2 JPA 配置  48\n4.4.3 数据实体设计  49\n4.4.4 存储库接口设计  49\n4.4.5 单元测试  50\n4.5 使用Thymeleaf  51\n4.5.1 控制器设计  51\n4.5.2 视图设计  52\n4.6 运行与部署  52\n4.7 小结  54\n5 电商平台微服务工程设计  55\n5.1 微服务工程结构  55\n5.2 电商平台微服务工程组建  57\n5.3 数据库选型  57\n5.4 微服务工程创建步骤  58\n5.5 项目基本配置  60\n5.6 创建模块  64\n5.7 小结  66\n6 微服务治理基础服务开发  67\n6.1 注册管理中心  68\n6.1.1 创建注册管理中心  68\n6.1.2 运行注册管理中心  70\n6.1.3 微服务怎样使用注册管理中心  70\n6.1.4 构建高可用的注册管理中心  72\n6.2 配置管理中心  73\n6.2.1 创建配置管理中心  73\n6.2.2 微服务如何使用配置管理中心  76\n6.2.3 在线更新配置信息  77\n6.3 微服务监控中心  78\n6.3.1 使用断路器仪表盘实现监控  79\n6.3.2 聚合服务监控管理中心  81\n6.4 服务跟踪分析中心  86\n6.4.1 创建服务跟踪分析中心  86\n6.4.2 在微服务中启用服务跟踪功能  90\n6.5 日志分析平台  93\n6.5.1 创建日志分析平台  93\n6.5.2 使用日志分析平台  93\n6.6 小结  94\n7 Rest API 微服务开发  96\n7.1 领域业务开发  96\n7.1.1 使用Druid 数据源  98\n7.1.2 JPA 及其配置  100\n7.1.3 数据实体建模  101\n7.1.4 查询对象设计  104\n7.1.5 实体持久化设计  106\n7.1.6 持久化测试  107\n7.1.7 领域服务开发  109\n7.1.8 领域服务的单元测试  111\n7.1.9 使用Redis 实现缓存设计  112\n7.2 Rest API 应用开发  117\n7.2.1 Rest API 应用配置  117\n7.2.2 启动程序设计  119\n7.2.3 接口开发  119\n7.3 使用消息处理事件  123\n7.3.1 消息生产者设计  124\n7.3.2 消息消费者设计  125\n7.3.3 使用消息测试  128\n7.4 小结  129\n8 Web UI 微服务开发  131\n8.1 高并发接口调用分层设计  131\n8.2 通过FeignClient 调用Rest API  132\n8.3 使用Hystrix 断路器  134\n8.4 使用非阻塞异步编程方法  136\n8.4.1 CompletableFuture 介绍  137\n8.4.2 性能比较测试  140\n8.5 Web 应用开发  145\n8.5.1 项目引用配置  145\n8.5.2 应用程序配置  146\n8.5.3 业务功能开发  148\n8.6 开发环境的热部署设置  154\n8.7 使用分布式文件系统  157\n8.7.1 分布式文件系统客户端开发  157\n8.7.2 商品图片上传设计  159\n8.7.3 富文本编辑器上传文件设计  160\n8.7.4 建立本地文件信息库  163\n8.8 小结  166\n9 电商平台移动商城开发  167\n9.1 移动商城首页设计  168\n9.2 使用负载均衡的导航设计  174\n9.3 按分类查询设计  176\n9.4 商品详情页设计  179\n9.5 购买下单实现  181\n9.6 用户登录与账户切换设计  184\n9.6.1 用户登录设计  184\n9.6.2 切换账号设计  186\n9.7 订单查询设计  188\n9.8 集成测试  191\n9.9 小结  192\n10 商家管理后台与 SSO 设计  193\n10.1 商家权限管理体系设计及开发  194\n10.1.1 商家权限体系建模  195\n10.1.2 商家权限体系的持久化设计  199\n10.1.3 商家权限体系的领域服务开发  201\n10.2 商家管理微服务开发  204\n10.2.1 商家领域服务层单元测试  204\n10.2.2 商家服务的接口开发  208\n10.3 SSO 设计  213\n10.3.1 SSO 基本配置  213\n10.3.2 在SSO 中使用商家的权限体系  214\n10.3.3 用户登录设计  216\n10.3.4 有关验证码的说明  218\n10.3.5 SSO 的主页设计  220\n10.3.6 OAuth2 服务端设计  222\n10.4 SSO 客户端设计  224\n10.4.1 客户端的项目管理配置  224\n10.4.2 客户端的安全管理配置  225\n10.4.3 权限验证实现原理  226\n10.4.4 如何在应用中接入SSO  228\n10.4.5 有关跨站请求伪造防御的相关设置  230\n10.4.6 根据用户权限自动分配菜单  230\n10.5 小结  232\n11 平台管理后台开发  233\n11.1 平台管理后台领域设计  233\n11.1.1 领域实体建模  233\n11.1.2 实体的行为设计  236\n11.1.3 领域服务开发  236\n11.1.4 领域服务单元测试  239\n11.2 平台管理后台访问控制设计  240\n11.2.1 使用平台管理的用户体系  240\n11.2.2 权限管理设计  242\n11.3 商家的注册设计  245\n11.4 商家菜单体系管理开发  248\n11.4.1 分类菜单管理开发  248\n11.4.2 模块菜单管理开发  249\n11.4.3 访问资源管理开发  252\n11.5 商家角色管理开发  255\n11.6 小结  257\n第三部分运 维 篇\n12 服务器架构设计与 Docker 使用  259\n12.1 服务器组建  259\n12.2 安全的服务器架构设计  260\n12.2.1 防火墙安装及配置  260\n12.2.2 建立安全的局域网环境  264\n12.3 服务器资源分配  266\n12.4 CentOS 安装  269\n12.4.1 IP 地址设置  270\n12.4.2 安全设置  270\n12.4.3 语言配置  270\n12.4.4 时间同步配置  271\n12.5 Docker 和docker-compose 安装  271\n12.5.1 Docker 安装及使用  272\n12.5.2 docker-compose 安装及使用  275\n12.6 使用Docker 搭建微服务治理环境  279\n12.6.1 服务器1 的部署配置  279\n12.6.2 服务器2 的部署配置  281\n12.7 使用Docker 部署日志分析平台  283\n12.8 使用Docker 部署微服务应用  286\n12.9 小结  286\n13 数据库集群设计与高可用读写分离实施  288\n13.1 MySQL 安装  289\n13.2 主从同步设置  291\n13.3 主主同步设置  294\n13.4 数据库代理中间件选择  296\n13.5 使用OneProxy 实现读写分离设计  297\n13.5.1 OneProxy 安装  297\n13.5.2 高可用读写分离配置  298\n13.6 OneProxy 分库分区设计  302\n13.6.1 按范围分库分表  303\n13.6.2 按值分库分表  303\n13.6.3 按哈希算法分库分表  304\n13.7 双机热备设计  306\n13.8 小结  307\n14 分布式文件系统等基础设施安装与配置  308\n14.1 高可用的分布式文件系统构建  308\n14.1.1 FastDFS 安装  310\n14.1.2 跟踪服务器配置  310\n14.1.3 存储节点配置  311\n14.1.4 上传文件测试  312\n14.1.5 Nginx 安装及负载均衡配置  313\n14.1.6 开机启动设置  317\n14.2 GitLab 安装  322\n14.3 Redis 安装  324\n14.4 RabbitMQ 安装  326\n14.5 小结  327\n15 使用自动化构建工具 Jenkins 实现CI\/CD  328\n15.1 持续交付工作流程  330\n15.2 Jenkins 安装  331\n15.3 Jenkins 基本配置  333\n15.4 Jenkins 自动部署实例  335\n15.4.1 创建任务  336\n15.4.2 任务配置  337\n15.4.3 执行任务  340\n15.5 小结  343\n后记  345\n参考文献  346","ebook_url":"https:\/\/read.douban.com\/ebook\/58988734\/","pages":"360","images":{"small":"https://img1.doubanio.com\/view\/subject\/s\/public\/s29797968.jpg","large":"https://img1.doubanio.com\/view\/subject\/l\/public\/s29797968.jpg","medium":"https://img1.doubanio.com\/view\/subject\/m\/public\/s29797968.jpg"},"alt":"https:\/\/book.douban.com\/subject\/30253251\/","id":"30253251","publisher":"电子工业出版社","isbn10":"7121341611","isbn13":"9787121341618","title":"Spring Cloud与Docker高并发微服务架构设计实施","url":"https:\/\/api.douban.com\/v2\/book\/30253251","alt_title":"","author_intro":"","summary":"《Spring Cloud与Docker高并发微服务架构设计实施》从架构设计、应用开发和运维部署三个方面出发，对微服务架构设计的实施进行了全方位的阐述和深入实践，并结合生产实际讲解了Spring Cloud、Docker 和Jenkins 等工具的具体使用方法。《Spring Cloud与Docker高并发微服务架构设计实施》中通过一个互联网电商平台实例实现了高并发的微服务架构设计，并通过详细的开发和实施过程，演示了构建一个安全可靠、稳定高效并可持续扩展的系统平台的方法。\n《Spring Cloud与Docker高并发微服务架构设计实施》适合互联网应用开发设计人员参考学习。","ebook_price":"55.30","price":"79"},{"rating":{"max":10,"numRaters":2,"average":"0.0","min":0},"subtitle":"","author":["朱荣鑫","张天","黄迪璇"],"pubdate":"2018-10-9","tags":[{"count":2,"name":"Spring","title":"Spring"},{"count":2,"name":"Cloud","title":"Cloud"}],"origin_title":"","image":"https://img9.doubanio.com\/view\/subject\/m\/public\/s29955364.jpg","binding":"","translator":[],"catalog":"前言\n第1章 微服务架构介绍1\n1.1 微服务架构的出现1\n1.1.1 单体应用架构1\n1.1.2 SOA架构2\n1.1.3 微服务架构3\n1.2 微服务架构的流派5\n1.3 云原生与微服务9\n1.4 本章小结12\n第2章 Spring Cloud总览13\n2.1 Spring Cloud架构13\n2.2 Spring Cloud特性16\n2.2.1 Spring Cloud Context：应用上下文16\n2.2.2 Spring Cloud Commons：公共抽象19\n2.3 本章小结21\n第3章 Spring Cloud的基础：Spring Boot22\n3.1 Spring Boot简介22\n3.2 构建一个微服务24\n3.3 Spring Boot配置文件29\n3.3.1 默认配置文件29\n3.3.2 外部化配置29\n3.3.3 YAML30\n3.3.4 自动载入外部属性到Bean30\n3.3.5 多Profile31\n3.3.6 Starter32\n3.3.7 自制一个Starter32\n3.3.8 Actuator36\n3.4 本章小结38\n第4章 服务注册与发现：Eureka39\n4.1 基础应用40\n4.1.1 Eureka简介40\n4.1.2 搭建Eureka服务注册中心40\n4.1.3 搭建Eureka服务提供者42\n4.1.4 搭建Eureka服务调用者43\n4.1.5 Eureka服务注册和发现44\n4.1.6 Consul的简单应用46\n4.2 服务发现原理48\n4.3 Eureka Client源码解析49\n4.3.1 读取应用自身配置信息50\n4.3.2 服务发现客户端52\n4.3.3 拉取注册表信息56\n4.3.4 服务注册61\n4.3.5 初始化定时任务62\n4.3.6 服务下线68\n4.4 Eureka Server源码解析70\n4.4.1 服务实例注册表70\n4.4.2 服务注册72\n4.4.3 接受服务心跳74\n4.4.4 服务剔除75\n4.4.5 服务下线77\n4.4.6 集群同步78\n4.4.7 获取注册表中服务实例信息82\n4.5 进阶应用84\n4.5.1 Eureka Instance和Client的元数据84\n4.5.2 状态页和健康检查页端口设置85\n4.5.3 区域与可用区85\n4.5.4 高可用性服务注册中心86\n4.6 本章小结87\n第5章 声明式RESTful客户端：Spring Cloud OpenFeign88\n5.1 基础应用88\n5.1.1 微服务之间的交互88\n5.1.2 OpenFeign简介89\n5.1.3 代码示例89\n5.2 源码分析91\n5.2.1 核心组件与概念91\n5.2.2 动态注册BeanDefinition92\n5.2.3 实例初始化98\n5.2.4 函数调用和网络请求107\n5.3 进阶应用111\n5.3.1 Decoder与Encoder的定制化111\n5.3.2 请求\/响应压缩112\n5.4 本章小结113\n第6章 断路器：Hystrix114\n6.1 基础应用114\n6.1.1 RestTemplate与Hystrix115\n6.1.2 OpenFeign与Hystrix117\n6.2 Hystrix原理118\n6.2.1 服务雪崩118\n6.2.2 断路器119\n6.2.3 服务降级操作120\n6.2.4 资源隔离121\n6.2.5 Hystrix实现思路122\n6.3 源码解析123\n6.3.1 封装HystrixCommand123\n6.3.2 HystrixCommand类结构129\n6.3.3 异步回调执行命令129\n6.3.4 异步执行命令和同步执行命令137\n6.3.5 断路器逻辑137\n6.3.6 资源隔离143\n6.3.7 请求超时监控148\n6.3.8 失败回滚逻辑150\n6.4 进阶应用152\n6.4.1 异步与异步回调执行命令152\n6.4.2 继承HystrixCommand153\n6.4.3 请求合并157\n6.5 本章小结161\n第7章 客户端负载均衡器：Spring Cloud Netflix Ribbon162\n7.1 负载均衡162\n7.2 基础应用163\n7.3 源码分析165\n7.3.1 配置和实例初始化165\n7.3.2 与OpenFeign的集成167\n7.3.3 负载均衡器LoadBalancerClient171\n7.3.4 ILoadBalancer173\n7.3.5 负载均衡策略实现177\n7.4 进阶应用184\n7.4.1 Ribbon API184\n7.4.2 使用Netty发送网络请求185\n7.4.3 只读数据库的负载均衡实现186\n7.5 本章小结187\n第8章 API网关：Spring Cloud Gateway189\n8.1 Spring Cloud Gateway介绍189\n8.2 基础应用190\n8.2.1 用户服务191\n8.2.2 网关服务192\n8.2.3 客户端的访问195\n8.3 源码解析195\n8.3.1 初始化配置196\n8.3.2 网关处理器197\n8.3.3 路由定义定位器202\n8.3.4 路由定位器205\n8.3.5 路由断言208\n8.3.6 网关过滤器216\n8.3.7 全局过滤器227\n8.3.8 API端点234\n8.4 应用进阶235\n8.4.1 限流机制235\n8.4.2 熔断降级238\n8.4.3 网关重试过滤器240\n8.5 本章小结241\n第9章 配置中心：Spring Cloud Config243\n9.1 基础应用244\n9.1.1 配置客户端244\n9.1.2 配置仓库245\n9.1.3 服务端246\n9.1.4 配置验证248\n9.1.5 配置动态更新249\n9.2 源码解析250\n9.2.1 配置服务器251\n9.2.2 配置客户端261\n9.3 应用进阶267\n9.3.1 为Config Server配置多个repo268\n9.3.2 客户端覆写远端的配置属性268\n9.3.3 属性覆盖269\n9.3.4 安全保护269\n9.3.5 加密解密270\n9.3.6 快速响应失败与重试机制272\n9.4 本章小结272\n第10章 消息驱动：Spring Cloud Stream274\n10.1 消息队列274\n10.2 基础应用276\n10.2.1 声明和绑定通道276\n10.2.2 自定义通道276\n10.2.3 接收消息276\n10.2.4 配置278\n10.3 源码分析278\n10.3.1 动态注册BeanDefinition279\n10.3.2 绑定服务282\n10.3.3 获取绑定器284\n10.3.4 绑定生产者289\n10.3.5 消息发送的流程291\n10.3.6 StreamListener注解的处理293\n10.3.7 绑定消费者298\n10.3.8 消息的接收304\n10.4 进阶应用306\n10.4.1 Bin","pages":"420","images":{"small":"https://img9.doubanio.com\/view\/subject\/s\/public\/s29955364.jpg","large":"https://img9.doubanio.com\/view\/subject\/l\/public\/s29955364.jpg","medium":"https://img9.doubanio.com\/view\/subject\/m\/public\/s29955364.jpg"},"alt":"https:\/\/book.douban.com\/subject\/30410461\/","id":"30410461","publisher":"机械工业出版社","isbn10":"7111608682","isbn13":"9787111608684","title":"Spring Cloud微服务架构进阶","url":"https:\/\/api.douban.com\/v2\/book\/30410461","alt_title":"","author_intro":"","summary":"本书全面系统地介绍SpringCloud及其在微服务架构中的应用。全书共13章，第1章介绍微服务架构相关的基本概念；第2章介绍SpringCloud中包含的组件以SpringCloud约定的上下文；第3章介绍SpringCloud的基础：SpringBoot，包括如何构建一个SpringBoot服务、SpringBoot的配置文件和Actuator提供的监控管理端点；第4至第13章详细讲解SpringCloud组件，包括：Eureka（服务注册与发现）、OpenFeign（声明式Restful客户端）、Hystrix（断路器）、Ribbon（客户端负载均衡器）、Gateway（API网关）、Config（配置中心)、Stream（消息驱动）、Bus（消息总线）、Security（认证与授权）、Sleuth（服务链路追踪）。本书为读者揭开了SpringCloud组件实现的技术内幕，并提供了进阶应用的思路，可以作为使用SpringCloud进行微服务架构实践的参考书。","series":{"id":"34304","title":"云计算与虚拟化技术丛书"},"price":"89.00元"},{"rating":{"max":10,"numRaters":12,"average":"6.3","min":0},"subtitle":"","author":["董超","胡炽维"],"pubdate":"2018-7","tags":[{"count":8,"name":"微服务","title":"微服务"},{"count":6,"name":"spring","title":"spring"},{"count":5,"name":"cloud","title":"cloud"}],"origin_title":"","image":"https://img1.doubanio.com\/view\/subject\/m\/public\/s29934749.jpg","binding":"平装","translator":[],"catalog":"第1篇  微服务开发基础——Spring Boot框架及使用\n第1章  微服务架构开发    2\n1.1  单体架构应用的困境   2\n1.2  微服务架构   3\n1.2.1  如何定义微服务架构       4\n1.2.2  微服务架构的优点   5\n1.2.3  微服务架构的缺点   6\n1.3  微服务架构设计   7\n1.3.1  微服务粒度       7\n1.3.2  微服务拆分原则       8\n1.3.3  微服务自治原则       9\n1.3.4  微服务交互原则       10\n1.3.5  微服务架构迁移       10\n1.4  不应使用微服务架构的情形      11\n第2章  微服务基础——Spring Boot 12\n2.1  Spring与Spring Boot  12\n2.2  快速启动Spring Boot  13\n2.2.1  编写pom.xml文件   14\n2.2.2  编写应用引导类       16\n2.2.3  编写配置文件   17\n2.2.4  运行项目   17\n2.3  使用Spring Boot构建示例项目 19\n2.3.1  经典三层应用架构   19\n2.3.2  设计领域对象   20\n2.3.3  实现数据管理   23\n2.3.4  编写业务逻辑层       29\n2.3.5  编写RESTful API     31\n2.3.6  数据库初始化   35\n2.3.7  启动测试   36\n2.4  Spring Boot特性  37\n2.4.1  Spring Boot自动配置机制      37\n2.4.2  Spring Boot扩展属性配置      38\n2.4.3  Spring Boot日志配置      39\n2.5  关于敏捷开发      40\n2.6  关于RESTful API设计       41\n2.6.1  以资源为中心进行URL设计  42\n2.6.2  正确使用HTTP方法及状态码       42\n2.6.3  查询及分页处理原则       43\n2.6.4  其他指导原则   43\n第2篇  Spring Cloud组件实战\n第3章  Spring Cloud简介  46\n3.1  微服务架构的核心关键点   46\n3.2  Spring Cloud技术概览       49\n3.2.1  Spring Cloud子项目 50\n3.2.2  为何选择Spring Cloud     53\n3.3  Spring Cloud版Hello World示例      54\n第4章  服务治理与负载均衡    58\n4.1  什么是服务治理   58\n4.2  构建服务治理——Eureka   59\n4.2.1  搭建微服务Parent工程   60\n4.2.2  搭建服务治理服务器——Eureka服务器       62\n4.2.3  搭建服务提供者——注册服务       64\n4.2.4  搭建服务消费者——获取服务       68\n4.3  使用客户端负载均衡——Ribbon      72\n4.3.1  什么是客户端负载均衡   72\n4.3.2  启用Ribbon      74\n4.3.3  负载均衡测试   75\n4.4  使用Feign简化微服务调用       77\n4.5  深入Eureka  80\n4.5.1  服务注册及相关原理       80\n4.5.2  Eureka自我保护模式       82\n4.5.3  注册一个服务实例需要的时间       84\n4.5.4  Eureka高可用集群及示例       84\n4.5.5  多网卡及IP指定      88\n4.5.6  Eureka服务访问安全       89\n4.6  深入Ribbon  90\n4.6.1  Ribbon客户端负载均衡原理   90\n4.6.2  Ribbon负载均衡策略及配置   92\n4.6.3  直接使用Ribbon API       94\n4.7  深入Feign    96\n4.7.1  Feign的参数绑定     96\n4.7.2  Feign中的继承  97\n4.7.3  Feign与Swagger的冲突  98\n4.8  微服务健康监控   99\n4.9  异构服务解决方案——Sidecar   101\n第5章  微服务容错保护——Hystrix       102\n5.1  什么是微服务容错保护      102\n5.2  快速启动Hystrix  103\n5.2.1  引入Hystrix依赖     104\n5.2.2  开启Hystrix支持     104\n5.2.3  修改UserService实现      104\n5.2.4  容错测试   105\n5.2.5  服务降级的两种实现方式       107\n5.2.6  在Feign中使用Hystrix回退   109\n5.3  Hystrix容错机制分析  110\n5.3.1  Hystrix整体处理流程      111\n5.3.2  HystrixCommand与HystrixObservableCommand   113\n5.3.3  断路器原理分析       115\n5.3.4  Hystrix异常——HystrixBadRequestException       117\n5.4  服务隔离      117\n5.4.1  线程池隔离与信号量隔离       118\n5.4.2  服务隔离的颗粒度   119\n5.4.3  服务隔离配置   119\n5.4.4  小结   120\n5.5  服务降级模式      121\n5.5.1  快速失败   121\n5.5.2  静默失败   121\n5.5.3  返回默认值       122\n5.5.4  返回组装的值   122\n5.5.5  返回远程缓存   123\n5.5.6  主\/从降级模式  124\n5.6  请求缓存      127\n5.7  请求合并      128\n5.8  Hystrix监控  130\n5.8.1  Hystrix仪表盘   131\n5.8.2  Turbine仪表盘集群监控  133\n5.8.3  Turbine与消息服务器集成      136\n……\n第6章  API服务网关——Zuul 137\n第7章  统一配置中心——Config     166\n第8章  分布式服务跟踪——Sleuth  192\n第9章  消息驱动——Stream    215\n第10章  微服务应用安全——Security    258\n第3篇  微服务与Docker容器技术\n第11章  微服务与Docker  288\n11.1  Docker简介 288\n11.2  Docker的使用    289\n11.3  Docker与Spring Cloud微服务 301\n11.4  微服务与Jenkins       305\n11.5  微服务编排 315\n显示部分信息\n前　　言\n前言　　2014年3月，Martin Fowler在其博客上发表了Microservices（微服务）一文，对过去几年逐渐开始流行的微服务架构开发模式给出了正式的定义。同年，Netflix OSS将自己多年来在实际开发中所使用的微服务基础组件开源。随后，Pivotal在Netflix OSS的基础上对这些组件进行了封装和集成，推出了Spring Cloud。到如今，微服务架构已逐渐普及，在技术生态上也得到了不断完善和更新，其在容器、应用框架、发布管理及监控等方面都有了长足进步。微服务在日常开发中也崭露头角，逐渐得到了开发者的认同。与此同时，Spring Cloud在过去几年中快速发展，不断迭代和更新，已经形成了微服务开发“全家桶”式的解决方案，逐渐在微服务开发领域奠定了坚实的基础。\n当我第一次接触微服务的概念时，以为这又是一个“新瓶装旧酒”的把戏。就像当年一些大公司为解决分布式大型应用所提出的COBRA、EJB、DCOM和ESB等概念一样难以使用，它们甚至还没有来得及等用户完全掌握就退出了历史的舞台。当我再次注意到微服务时，是因为Spring Cloud的推出。在大致阅读了相关文档之后顺便“跑”了一下示例项目，我就被其深深吸引了。正是这次接触，使我改变了对微服务的看法。正巧接下来的一段时间，公司内部正在做架构调整，也发现了微服务有其可用之处，所以便在架构调整中引入了Spring Cloud，并最终在项目中取得了不错的效果。这加深了我对微服务的好感，所以后续对Spring Cloud进行了更加深入和系统的学习与研究。","pages":"","images":{"small":"https://img1.doubanio.com\/view\/subject\/s\/public\/s29934749.jpg","large":"https://img1.doubanio.com\/view\/subject\/l\/public\/s29934749.jpg","medium":"https://img1.doubanio.com\/view\/subject\/m\/public\/s29934749.jpg"},"alt":"https:\/\/book.douban.com\/subject\/30389992\/","id":"30389992","publisher":"机械工业出版社","isbn10":"7111604520","isbn13":"9787111604525","title":"Spring Cloud微服务架构开发实战","url":"https:\/\/api.douban.com\/v2\/book\/30389992","alt_title":"","author_intro":"董超  资深程序员、架构师。从事软件研发十多年，擅长移动互联网和行业应用架构。曾经多次主导大型国有企业系统和移动互联网平台的研发。现专注于IoT（物联网）及其应用平台的研发。\n\n胡炽维  全栈工程师。有多年的开发经验，擅长前端开发技术，并对移动端原生开发技术也有所涉猎。曾经参与过多个互联网项目的研发和基于Docker的系统运维工作，积累了丰富的一线研发经验。现主要负责IoT（物联网）平台前端架构的研发与运维。","summary":"本书首先从微服务架构兴起的背景讲起，探讨了为何在分布式系统开发中微服务架构将逐渐取代单体架构，然后对Spring Cloud所提供的微服务组件及解决方案进行了一一讲解，从而让读者不但可以系统地学习Spring Cloud的相关知识，而且还可以全面掌握微服务架构应用的设计、开发、部署和运维等知识。\n本书共11章，分为3篇。第1篇为微服务开发基础——Spring Boot框架及使用；第2篇为Spring Cloud组件实战；第3篇为微服务与Docker容器技术。其中第2篇为全书的核心，涵盖了构建微服务架构所需要的服务治理（Eureka）、客户端负载均衡（Ribbon）、微服务容错与降级处理（Hystrix）、微服务API统一网关（Zuul）、分布式配置中心（Config）、微服务调用链追踪（Sleuth）、微服务消息驱动开发（Stream）及微服务安全（OAuth及JWT）等相关知识。\n本书内容通俗易懂，每章都结合实例进行讲解，特别适合Spring Cloud的入门读者阅读，也适合致力于互联网开发和Java开发的进阶读者阅读。如果你是运维人员，或者你对微服务架构有兴趣，那么本书也非常适合你阅读。此外，本书也可以作为相关培训机构的教材使用。","price":""},{"rating":{"max":10,"numRaters":0,"average":"0.0","min":0},"subtitle":"","author":[],"pubdate":"","tags":[],"origin_title":"","image":"https://img1.doubanio.com\/f\/shire\/5522dd1f5b742d1e1394a17f44d590646b63871d\/pics\/book-default-lpic.gif","binding":"","translator":[],"catalog":"","pages":"","images":{"small":"https://img1.doubanio.com\/f\/shire\/5522dd1f5b742d1e1394a17f44d590646b63871d\/pics\/book-default-lpic.gif","large":"https://img1.doubanio.com\/f\/shire\/5522dd1f5b742d1e1394a17f44d590646b63871d\/pics\/book-default-lpic.gif","medium":"https://img1.doubanio.com\/f\/shire\/5522dd1f5b742d1e1394a17f44d590646b63871d\/pics\/book-default-lpic.gif"},"alt":"https:\/\/book.douban.com\/subject\/30748211\/","id":"30748211","publisher":"","isbn10":"7115500002","isbn13":"9787115500007","title":"Spring Cloud 微服务分布式架构开发实战","url":"https:\/\/api.douban.com\/v2\/book\/30748211","alt_title":"","author_intro":"","summary":"","price":"33.80元"},{"rating":{"max":10,"numRaters":1,"average":"0.0","min":0},"subtitle":"","author":["李　熠"],"pubdate":"2019-9","tags":[{"count":1,"name":"微服务","title":"微服务"},{"count":1,"name":"入门实战","title":"入门实战"},{"count":1,"name":"spring","title":"spring"},{"count":1,"name":"cloud","title":"cloud"}],"origin_title":"","image":"https://img9.doubanio.com\/view\/subject\/m\/public\/s33496224.jpg","binding":"平装","translator":[],"catalog":"第一部分　基础篇\n第1章　微服务概述　　2\n1.1　应用架构概述　　2\n1.1.1　单体架构　　2\n1.1.2　微服务架构　　3\n1.1.3　如何选择架构风格　　4\n1.2　微服务现状及发展趋势　　4\n1.2.1　微服务现状　　4\n1.2.2　微服务发展趋势　　5\n1.3　微服务架构面临的挑战　　5\n1.4　怎样实现微服务架构　　6\n1.4.1　技术选型　　6\n1.4.2　整体架构思路　　7\n1.5　小结　　7\n第2章　Spring Boot基础　　9\n2.1　Spring Boot简介　　9\n2.2　第一个Spring Boot工程　　9\n2.3　使用YAML文件配置属性　　12\n2.3.1　YAML的基本用法　　12\n2.3.2　多环境配置　　13\n2.4　常用注解　　14\n2.4.1　@SpringBootApplication　　15\n2.4.2　@SpringBootConfiguration　　15\n2.4.3　@Bean　　16\n2.4.4　@Value　　18\n2.5　Spring Boot集成模板引擎　　19\n2.6　更改默认的JSON转换器　　21\n2.7　打包发布到服务器上　　22\n2.7.1　使用内置Tomcat发布jar包　　22\n2.7.2　打包成war包发布　　24\n2.8　WebFlux快速入门　　27\n2.9　小结　　29\n第3章　Spring Boot核心原理　　31\n3.1　起步依赖机制　　31\n3.2　自动配置管理　　32\n3.3　Actuator监控管理　　34\n3.4　Spring Boot CLI命令行工具　　36\n3.4.1　安装　　36\n3.4.2　用法　　37\n3.5　小结　　38\n第4章　Spring Cloud概述　　40\n4.1　简介　　40\n4.2　优缺点　　41\n4.3　现状　　41\n4.4　开始Spring Cloud实战　　42\n4.4.1　技术储备　　42\n4.4.2　准备工作　　42\n4.4.3　从Hello World开始你的实战之旅　　43\n4.5　小结　　52\n第二部分　实战篇\n第5章　项目准备阶段　　54\n5.1　项目介绍　　54\n5.2　需求分析　　54\n5.3　产品设计　　55\n5.4　架构方案分析　　58\n5.4.1　技术选型　　58\n5.4.2　架构图设计　　58\n5.4.3　根据架构图创建工程　　59\n5.5　数据库结构设计　　62\n5.6　小结　　63\n第6章　公共模块封装　　65\n6.1　common工程常用类库的封装　　65\n6.1.1　日期时间的处理　　65\n6.1.2　字符串的处理　　68\n6.1.3　加密\/解密封装　　69\n6.1.4　消息队列的封装　　74\n6.2　接口版本管理　　78\n6.3　输入参数的合法性校验　　80\n6.4　异常的统一处理　　82\n6.5　更换JSON转换器　　83\n6.6　Redis的封装　　84\n6.7　小结　　85\n第7章　注册中心：Spring Cloud Netflix Eureka　　87\n7.1　Eureka简介　　87\n7.2　创建注册中心　　87\n7.3　创建客户端工程以验证注册中心　　91\n7.4　实现注册中心的高可用　　92\n7.5　添加用户认证　　96\n7.6　开启自我保护模式　　99\n7.7　注册中心的健康检查　　100\n7.8　多网卡环境下的IP选择问题　　101\n7.9　小结　　103\n第8章　配置中心：Spring Cloud Config　　105\n8.1　Spring Cloud Config简介　　105\n8.2　创建配置中心　　105\n8.3　对配置内容进行加密　　111\n8.3.1　安装JCE　　111\n8.3.2　对称加密　　112\n8.3.3　对配置内容加密　　114\n8.3.4　非对称加密　　114\n8.4　配置自动刷新　　118\n8.4.1　使用refresh端点刷新配置　　118\n8.4.2　Spring Cloud Bus自动刷新配置　　119\n8.5　添加用户认证　　122\n8.6　小结　　123\n第9章　服务网关：Spring Cloud Gateway　　125\n9.1　Gateway简介　　125\n9.2　创建服务网关　　125\n9.3　利用过滤器拦截API请求　　128\n9.4　请求失败处理　　130\n9.5　小结　　133\n第10章　功能开发　　135\n10.1　开发前的准备　　135\n10.1.1　MyBatis的集成　　135\n10.1.2　Elasticsearch的集成　　137\n10.2　利用代码生成器提升开发效率　　140\n10.3　使用代码生成器生成的代码操作数据库　　147\n10.4　MyBatis应对复杂SQL　　149\n10.4.1　注解　　149\n10.4.2　Provider　　150\n10.5　功能开发　　151\n10.6　网关鉴权　　154\n10.6.1　防止参数被篡改　　155\n10.6.2　拦截非法请求　　157\n10.7　单元测试　　159\n10.8　小结　　160\n第三部分　高级篇\n第11章　服务间通信：Spring Cloud Netflix Ribbon和Spring Cloud OpenFeign　　162\n11.1　Spring Cloud Netflix Ribbon的使用　　162\n11.2　Spring Cloud OpenFeign　　164\n11.3　自定义OpenFeign配置　　166\n11.4　Spring Cloud OpenFeign熔断　　167\n11.4.1　Spring Cloud Netflix Hystrix简介　　167\n11.4.2　Spring Cloud Netflix Hystrix的使用　　168\n11.4.3　OpenFeign集成Hystrix熔断器　　172\n11.5　小结　　173\n第12章　服务链路追踪：Spring Cloud Sleuth　　175\n12.1　Spring Cloud Sleuth简介　　175\n12.2　利用链路追踪监听网络请求　　176\n12.2.1　服务端的实现　　176\n12.2.2　客户端集成Spring Cloud Sleuth　　179\n12.3　通过消息中间件实现链路追踪　　180\n12.4　存储追踪数据　　182\n12.5　小结　　184\n第13章　服务治理：Spring Cloud Consul和Spring Cloud ZooKeeper　　186\n13.1　服务治理简介　　186\n13.2　Spring Cloud Consul的使用　　186\n13.2.1　Consul的安装与部署　　187\n13.2.2　Spring Cloud集成Consul　　189\n13.3　Spring Cloud ZooKeeper的使用　　190\n13.3.1　ZooKeeper的安装和部署　　191\n13.3.2　Spring Cloud集成ZooKeeper　　191\n13.4　小结　　193\n第四部分　部署篇\n第14章　系统发布上线　　195\n14.1　发布前准备　　195\n14.1.1　虚拟机的安装　　195\n14.1.2　Linux常用命令　　198\n14.1.3　安装常用软件　　198\n14.2　编译、打包、发布　　207\n14.3　利用Jenkins实现持续集成　　210\n14.3.1　安装并配置Jenkins　　210\n14.3.2　创建任务　　215\n14.3.3　构建项目　　220\n14.4　小结　　221\n第15章　使用Kubernetes部署分布式集群　　223\n15.1　Docker介绍　　223\n15.1.1　Docker安装　　223\n15.1.2　Docker镜像　　224\n15.1.3　Docker容器　　228\n15.2　K8S集群环境搭建　　229\n15.2.1　环境准备　　229\n15.2.2　集群搭建　　230\n15.2.3　分布式应用部署　　232\n15.3　小结　　237\n附录A　如何编写优雅的Java代码　　239\n附录B　IDEA插件之Alibaba Cloud Toolkit　　258\n\n","pages":"262","images":{"small":"https://img9.doubanio.com\/view\/subject\/s\/public\/s33496224.jpg","large":"https://img9.doubanio.com\/view\/subject\/l\/public\/s33496224.jpg","medium":"https://img9.doubanio.com\/view\/subject\/m\/public\/s33496224.jpg"},"alt":"https:\/\/book.douban.com\/subject\/34851236\/","id":"34851236","publisher":"人民邮电出版社","isbn10":"7115519986","isbn13":"9787115519986","title":"Spring Cloud实战演练","url":"https:\/\/api.douban.com\/v2\/book\/34851236","alt_title":"","author_intro":"李熠\n全栈工程师，毕业于成都电子科技大学计算机科学与技术专业，拥有7年互联网软件开发、技术架构和管理等方面的经验，对 Spring Boot、Spring Cloud、微服务、持续集成有一定见地。曾任映潮科技系统架构师、链一科技 CTO，现就职于中国石油规划总院。\n热爱技术，喜欢钻研，特别喜欢挑战技术难题，CSDN 博客（https:\/\/blog.csdn.net \/lynnlovemin）专家、GitChat 专栏作者，并在 GitHub 上开源了多个项目（详见 https:\/\/github.com\/lynnlovemin）。技术全面，对 Vue.js、React.js 等比较熟悉，擅长 Java、JavaScript、Linux 服务器，可独立实现一套涵盖前后端的系统。","summary":"本书是Spring Cloud的入门书。首先，简要概述了微服务并分析了当前互联网架构趋势。其次，系统地介绍了Spring Boot的相关知识，从基础用法到核心组件。再次，从具体的案例出发，依次讲解了Spring Cloud最常用的组件，将理论与实践相结合，使读者在学习Spring Cloud的过程中还能了解一个产品从无到有的全过程。最后，结合目前最流行的容器技术，介绍了Kubernetes如何配合Docker进行系统的分布式部署。","series":{"id":"13000","title":"图灵原创"},"price":"69.00元"},{"rating":{"max":10,"numRaters":2,"average":"0.0","min":0},"subtitle":"Spring Boot 2+Spring 5+Spring Cloud实战","author":["郑天民"],"pubdate":"2019-6","tags":[{"count":3,"name":"响应式","title":"响应式"},{"count":2,"name":"开发_架构","title":"开发_架构"},{"count":2,"name":"spring","title":"spring"},{"count":1,"name":"计算机","title":"计算机"},{"count":1,"name":"reactive","title":"reactive"},{"count":1,"name":"11","title":"11"}],"origin_title":"","image":"https://img9.doubanio.com\/view\/subject\/m\/public\/s32744146.jpg","binding":"平装","translator":[],"catalog":"第1章  直面响应式微服务架构\t1\n1.1  响应式系统核心概念\t1\n1.1.1  从传统编程方法到响应式编程方法\t1\n1.1.2  响应式宣言与响应式系统\t4\n1.2  剖析微服务架构\t6\n1.2.1  分布式系统与微服务架构\t6\n1.2.2  服务拆分与集成\t8\n1.2.3  微服务架构的核心组件\t11\n1.2.4  微服务架构技术体系\t13\n1.3  构建响应式微服务架构\t15\n1.3.1  响应式微服务架构设计原则\t15\n1.3.2  整合响应式编程与微服务架构\t18\n1.4  全书架构\t19\n1.5  本章小结\t20\n第2章  响应式编程模型与Reactor框架\t21\n2.1  响应式编程模型\t21\n2.1.1  流\t22\n2.1.2  背压\t24\n2.1.3  响应式流\t25\n2.2  Reactor框架\t28\n2.2.1  响应式编程实现技术概述\t28\n2.2.2  引入Reactor框架\t31\n2.3  创建Flux和Mono\t34\n2.3.1  创建Flux\t34\n2.3.2  创建Mono\t37\n2.4  Flux和Mono操作符\t39\n2.4.1  转换操作符\t39\n2.4.2  过滤操作符\t43\n2.4.3  组合操作符\t46\n2.4.4  条件操作符\t49\n2.4.5  数学操作符\t52\n2.4.6  Observable工具操作符\t54\n2.4.7  日志和调试操作符\t56\n2.5  Reactor框架中的背压机制\t58\n2.6  本章小结\t60\n第3章  构建响应式RESTful服务\t61\n3.1  使用Spring Boot 2.0构建微服务\t61\n3.1.1  Spring Boot基本特性\t61\n3.1.2  基于Spring Boot的第一个RESTful服务\t63\n3.1.3  使用Actuator组件强化服务\t67\n3.2  使用Spring WebFlux构建响应式服务\t80\n3.2.1  使用Spring Initializer初始化响应式Web应用\t80\n3.2.2  对比响应式Spring WebFlux与传统Spring WebMvc\t82\n3.2.3  使用注解编程模型创建响应式RESTful服务\t84\n3.2.4  使用函数式编程模型创建响应式RESTful服务\t88\n3.3  本章小结\t93\n第4章  构建响应式数据访问组件\t94\n4.1  Spring Data数据访问模型\t94\n4.1.1  Spring Data抽象\t95\n4.1.2  集成Spring Data JPA\t98\n4.1.3  集成Spring Data Redis\t100\n4.1.4  集成Spring Data Mongodb\t103\n4.2  响应式数据访问模型\t104\n4.2.1  Spring Reactive Data抽象\t105\n4.2.2  创建响应式数据访问层组件\t107\n4.3  响应式Mongodb\t108\n4.3.1  初始化Reactive Mongodb运行环境\t109\n4.3.2  创建Reactive Mongodb Repository\t112\n4.3.3  使用CommandLineRunner初始化Mongodb数据\t113\n4.3.4  在Service层中调用Reactive MongodbRepository\t114\n4.4  响应式Redis\t117\n4.4.1  初始化Reactive Redis运行环境\t117\n4.4.2  创建Reactive Redis Repository\t121\n4.4.3  在Service层中调用Reactive Repository\t122\n4.5  本章小结\t123\n第5章  构建响应式消息通信组件\t124\n5.1  消息通信系统简介\t125\n5.2  使用Spring Cloud Stream构建消息通信系统\t126\n5.2.1  Spring Cloud Stream基本架构\t126\n5.2.2  Spring Cloud Stream中的Binder组件\t130\n5.2.3  使用Source组件实现消息发布者\t135\n5.2.4  使用@StreamListener注解实现消息消费者\t137\n5.3  引入Reactive Spring Cloud Stream实现响应式 消息通信系统\t139\n5.3.1  Reactive Spring Cloud Stream组件\t139\n5.3.2  Reactive Spring Cloud Stream示例\t141\n5.4  本章小结\t147\n第6章  构建响应式微服务架构\t148\n6.1  使用Spring Cloud创建响应式微服务架构\t148\n6.1.1  服务治理\t149\n6.1.2  负载均衡\t154\n6.1.3  服务容错\t161\n6.1.4  服务网关\t166\n6.1.5  服务配置\t173\n6.1.6  服务监控\t177\n6.2  使用WebClient实现响应式服务调用\t182\n6.2.1  创建和配置WebClient\t182\n6.2.2  使用WebClient访问服务\t183\n6.3  本章小结\t187\n第7章  测试响应式微服务架构\t188\n7.1  初始化测试环境\t189\n7.1.1  引入spring-boot-starter-test组件\t189\n7.1.2  解析基础类测试注解\t190\n7.1.3  编写第一个测试用例\t191\n7.2  测试Reactor组件\t192\n7.3  测试响应式Repository层组件\t194\n7.3.1  测试内嵌式Mongodb\t194\n7.3.2  测试真实MongoDB\t197\n7.4　测试响应式Service层组件\t199\n7.5  测试响应式Controller层组件\t201\n7.6  本章小结\t204\n第8章  响应式微服务架构演进案例分析\t205\n8.1  PrescriptionSystem案例简介\t205\n8.2  传统微服务架构实现案例\t207\n8.2.1  构建基础设施类服务\t207\n8.2.2  构建Medicine服务\t213\n8.2.3  构建Card服务\t219\n8.2.4  构建Prescription服务\t224\n８.3  响应式微服务架构演进案例\t237\n8.3.1  更新基础设施类服务\t237\n8.3.2  更新数据访问方式\t241\n8.3.3  更新事件通信方式\t246\n8.4  本章小结\t266\n参考文献\t267","pages":"276","images":{"small":"https://img9.doubanio.com\/view\/subject\/s\/public\/s32744146.jpg","large":"https://img9.doubanio.com\/view\/subject\/l\/public\/s32744146.jpg","medium":"https://img9.doubanio.com\/view\/subject\/m\/public\/s32744146.jpg"},"alt":"https:\/\/book.douban.com\/subject\/33950050\/","id":"33950050","publisher":"电子工业出版社","isbn10":"7121363836","isbn13":"9787121363832","title":"Spring响应式微服务","url":"https:\/\/api.douban.com\/v2\/book\/33950050","alt_title":"","author_intro":"","summary":"《Spring响应式微服务：Spring Boot 2+Spring 5+Spring Cloud实战》主要包含构建响应式微服务架构过程中所应具备的技术体系和工程实践。围绕响应式编程和微服务 架构的整合，我们将讨论如何使用 Reactor 响应式编程框架、如何构建响应式 RESTful 服务、如何构建响应式数据访问组件、如何构建响应式消息通信组件、如何构建响应式微服务架构，以及如何测试响应式微服务 架构等核心主题，并基于这些核心主题给出具体的案例分析。\n《Spring响应式微服务：Spring Boot 2+Spring 5+Spring Cloud实战》面向立志于成为微服务架构师（尤其是响应式微服务架构师）的后端服务开发人员，读者不需要有 很高的技术水平，也不限于特定的开发语言，但熟悉 Java EE 常见技术并掌握一定异步编程模型和分布式架构的基本概念有助于更好地理解书中的内容。同时，本书也可以供具备不同技术体系的架构师同行参考，希 望能给日常研发和管理工作带来启发和帮助。","price":"75.00元"},{"rating":{"max":10,"numRaters":44,"average":"7.2","min":0},"subtitle":"基于Dubbo、Spring Cloud和Service Mesh","author":["程超","梁桂钊","秦金卫","方志斌","张逸","杜琪","殷琦","肖冠宇"],"pubdate":"2019-5-1","tags":[{"count":50,"name":"微服务","title":"微服务"},{"count":46,"name":"架构","title":"架构"},{"count":19,"name":"ServiceMesh","title":"ServiceMesh"},{"count":15,"name":"Java","title":"Java"},{"count":11,"name":"DDD","title":"DDD"},{"count":10,"name":"计算机","title":"计算机"},{"count":9,"name":"java","title":"java"},{"count":7,"name":"Web开发","title":"Web开发"}],"origin_title":"","image":"https://img9.doubanio.com\/view\/subject\/m\/public\/s32296926.jpg","binding":"平装","translator":[],"catalog":"1.1 什么是架构 1\n1.2 几个相关概念 3\n1.3 从软件的生命周期看架构设计 7\n1.4 架构的形式与特点 9\n1.5 架构的目标与方法 13\n1.6 架构的不同风格 18\n第2章 微服务领域驱动设计 30\n2.1 领域驱动设计 31\n2.1.1 领域驱动设计概览 31\n2.1.2 问题域与解决方案域 34\n2.1.3 限界上下文 35\n2.1.4 上下文映射 40\n2.1.5 领域架构 43\n2.2 微服务的设计 48\n2.2.1 限界上下文的边界 48\n2.2.2 限界上下文即微服务 51\n2.2.3 识别限界上下文 53\n2.2.4 微服务之间的协作 59\n2.3 小结 63\n第3章 Apache Dubbo框架的原理与实现 64\n3.1 Dubbo框架的选型与使用 64\n3.1.1 Dubbo框架的选型 64\n3.1.2 Dubbo框架的使用 65\n3.2 Dubbo框架的原理分析 70\n3.2.1 总体架构分析 70\n3.2.2 Dubbo Bean的加载 73\n3.2.3 Dubbo Extension机制 77\n3.2.4 Dubbo消费端 91\n3.2.5 Dubbo服务端 126\n3.2.6 Dubbo的通信机制 144\n3.3 基于Dubbo的自动化Mock系统 165\n3.3.1 Mock模拟系统的产生 166\n3.3.2 Dubbo Mock的使用 167\n3.3.3 Dubbo Mock的原理解析 168\n3.3.4 自动化Mock系统的实现 170\n第4章 Spring Boot\/Spring Cloud实践 177\n4.1 Spring Boot原理剖析 178\n4.1.1 Spring Boot Quick Start 178\n4.1.2 Spring Boot之SpringApplication 180\n4.1.3 spring-boot-loaded模块分析 186\n4.1.4 spring-boot-autoconfigure模块分析 190\n4.1.5 Spring Boot Conditional注解分析 195\n4.2 Dubbo Spring Boot Starter 198\n4.2.1 Dubbo Spring Boot Starter简介 198\n4.2.2 Dubbo Initializr及sample 198\n4.2.3 dubbo-spring-boot-autoconfigure模块 201\n4.2.4 dubbo-spring-boot-actuator模块 204\n4.3 Spring Cloud栈 211\n4.3.1 为什么微服务架构需要Spring Cloud 212\n4.3.2 Spring Cloud技术栈总览 214\n4.3.3 spring-cloud-scaffold基础库集合 215\n4.4 基于Maven Archetype的脚手架 239\n4.4.1 Maven Archetype 239\n4.4.2 脚手架的搭建 240\n4.4.3 生成脚手架 247\n第5章 微服务稳定性保证的常用手段 250\n5.1 微服务的稳定性 250\n5.2 高可用 250\n5.2.1 限流原理与实现 250\n5.2.2 断路器原理与实现 256\n5.2.3 超时与重试 260\n5.3 高并发 262\n5.3.1 异步 263\n5.3.2 缓存 270\n5.4 总结 272\n第6章 微服务下如何保证事务的一致性 273\n6.1 从本地事务到分布式事务的演变 273\n6.2 强一致性解决方案 276\n6.2.1 二阶段提交协议 276\n6.2.2 三阶段提交协议 278\n6.3 最终一致性解决方案 280\n6.3.1 TCC模式 280\n6.3.2 补偿模式 285\n6.3.3 可靠事件模式 286\n6.4 开源项目的分布式事务实现解读 288\n6.4.1 Apache RocketMQ 288\n6.4.2 ServiceComb 289\n第7章 百亿流量微服务网关的设计与实现 293\n7.1 API网关概述 293\n7.1.1 分布式服务架构、微服务架构与 API 网关 293\n7.1.2 API网关的定义、职能与关注点 296\n7.1.3 API网关的分类与技术分析 298\n7.2 开源网关的分析与调研 300\n7.2.1 常见的开源网关介绍 300\n7.2.2 四大开源网关的对比分析 308\n7.2.3 开源网关的技术总结 309\n7.3 百亿流量交易系统API网关设计 310\n7.3.1 百亿流量交易系统API网关的现状和面临问题 310\n7.3.2 业务网关的设计与最佳实践 313\n第8章 微服务编排 317\n8.1 Netflix Conductor 317\n8.2 Netflix Conductor的架构 319\n8.3 Conductor的使用案例 320\n8.4 Netflix Conductor源码分析 328\n8.4.1 Client层源码分析 330\n8.4.2 Server端源码分析 337\n8.4.3 core端源码分析 344\n第9章 微服务数据抽取与统计 356\n9.1 案例小故事 356\n9.2 数据仓库概述 358\n9.2.1 什么是数据仓库 358\n9.2.2 数据仓库架构 360\n9.2.3 数据仓库建模方法 361\n9.2.4 数据抽取、转换和加载 361\n9.2.5 数据统计 362\n9.3 数据仓库工具Hive 362\n9.3.1 安装Hive 364\n9.3.2 Hive数据库 366\n9.3.3 Hive表 367\n9.4 使用Sqoop抽取数据 369\n9.4.1 安装Sqoop 370\n9.4.2 将MySQL表数据导入Hive表 372\n9.5 ETL作业调度 375\n第10章 微服务双活体系建设 377\n10.1 系统高可用 377\n10.2 双活数据中心 379\n10.2.1 单机房部署 379\n10.2.2 双机房部署 380\n10.2.3 基于支付场景的双活体系建设 383\n第11章 基于支付场景下的微服务改造与性能优化 399\n11.1 支付场景的介绍 399\n11.2 支付业务建模和服务划分 400\n11.3 支付场景下微服务架构的详解与分析 402\n11.3.1 业务架构分析 402\n11.3.2 技术平台详解 404\n11.4 从代码层面提升微服务架构的性能 407\n11.4.1 从代码和设计的角度看 407\n11.4.2 从整体架构的角度看 418\n11.5 微服务架构中常见的一些故障分析技巧 421\n第12章 遗留系统的微服务架构改造 426\n12.1 代码分层结构的转变 426\n12.2 遗留系统的债券与思考 430\n12.3 从单体系统拆分服务的方法论 431\n12.4 遗留系统的微服务架构改造 436\n12.4.1 从代码重构开始 436\n12.4.2 拆分服务需要面向服务进行架构设计 437\n12.4.3 改造是一个渐进的过程 437\n12.4.4 单元测试是基石 440\n12.4.5 面向失败的设计 440\n12.4.6 前后端分离 441\n12.4.7 共享现有数据库 441\n12.4.8 灰度发布的必要性 442\n12.4.9 日志聚合与全链路监控 442\n第13章 Service Mesh详解 443\n13.1 Service Mesh是什么 443\n13.2 Service Mesh的背景 443\n13.3 Service Mesh介绍 444\n13.3.1 Service Mesh架构 444\n13.3.2 Service Mesh能做什么 445\n13.4 Service Mesh的价值 446\n13.5 Service Mesh现状 447\n13.6 Service Mesh存在的问题 448\n13.7 Istio详解 449\n13.7.1 Istio架构 449\n13.7.2 数据平面 450\n13.7.3 控制平面 455\n13.7.4 Isito案例 458\n13.8 Service Mesh展望 461\n第14章 微服务监控实战 463\n14.1 APM原理与应用 464\n14.1.1 什么是APM 464\n14.1.2 APM监控点 464\n14.1.3 APM深入解析 464\n14.2 Prometheus监控系统介绍 492\n14.2.1 Prometheus的主要特点 493\n14.2.2 Prometheus的架构及组件介绍 493\n14.2.3 Prometheus的安装 494\n14.2.4 使用Prometheus对MySQL进行监控 498\n14.2.5 Prometheus的告警机制 501","pages":"528","images":{"small":"https://img9.doubanio.com\/view\/subject\/s\/public\/s32296926.jpg","large":"https://img9.doubanio.com\/view\/subject\/l\/public\/s32296926.jpg","medium":"https://img9.doubanio.com\/view\/subject\/m\/public\/s32296926.jpg"},"alt":"https:\/\/book.douban.com\/subject\/33417842\/","id":"33417842","publisher":"电子工业出版社","isbn10":"7121362139","isbn13":"9787121362132","title":"高可用可伸缩微服务架构","url":"https:\/\/api.douban.com\/v2\/book\/33417842","alt_title":"","author_intro":"程超，网名小程故事多，现任某公司高级架构师，超过12年的Java研发经验，8年技术管理和架构经验，熟悉支付和电商领域，擅长微服务生态建设和运维监控，对Dubbo、Spring Cloud和gRPC等微服务框架有深入研究，帮助多家公司进行过微服务建设和改造。合著作品《深入分布式缓存》，阿里云MVP、云栖社区外部专家、Codingfly社区特聘技术专家、CSDN博主专家。\n梁桂钊，现任某互联网公司高级开发工程师，参与过内容分发、K12 教育、淘系电商等项目。目前，专注于新零售电商服务的业务摸索和电商服务创新实践。具有Java核心技术、微服务、分布式、高并发等领域一线实战经验，并对新兴技术方向和各种开源框架有浓厚兴趣。公众号「服务端思维」的作者。\n秦金卫（KimmKing），现任某公司高级技术总监\/Apache Dubbo PPMC，阿里前架构师\/某商业银行北京研发中心负责人。关注互联网、电商、金融、支付、区块链等领域，10多年研发管理和架构经验，对于中间件、SOA、微服务，以及各种开源技术非常热衷，活跃于Dubbo、Fastjson、Mule、ActiveMQ等多个开源社区。个人博客http:\/\/kimmking.github.io。\n方志斌，现任某物联网公司高级研发工程师。目前专注于大型物联网平台架构的设计与开发工作。对于微服务、分布式、集群有一定的研究和实战经验。对Java领域的开源框架有浓厚的兴趣，喜欢深入分析、总结框架源码。SpringForAll社区核心成员，组织多次社区技术专题、问答等活动。\n张逸，架构编码实践者，微服务架构设计者，领域驱动设计布道师，大数据平台架构师。著译作包括《软件设计精要与模式》《恰如其分的软件架构》《人件》等。个人微信公众号为「逸言」，个人博客：http:\/\/zhangyi.xyz。\n杜琪，网名阿杜，现任蚂蚁金服高级研发工程师，2015年6月毕业于南开大学，计算机系统结构硕士。毕业后开始接触分布式业务系统开发，曾在有赞负责用户中心基础服务，对分布式业务系统的稳定性、可靠性有丰富的经验。喜欢研究底层技术，喜欢研究疑难技术问题，例如JVM内存问题排查、GC调优，等等。有对外输出分享的习惯，是公众号javaadu的维护者。\n殷琦，网名涤生，现任“美团点评”技术专家，2015年3月毕业于东华大学，软件工程硕士。2015年3月加入“美团点评”基础架构部，开始接触微服务架构，之后一直从事服务框架的研发工作，对微服务架构发展与演进有非常深刻的认识。个人比较喜欢研究并分享新技术，时刻关注并实践微服务架构最前沿的技术，如Service Mesh、Serverless 等。\n肖冠宇，曾就职于小米、人民网等互联网公司，具有丰富的大数据一线实战经验，专注大数据处理技术及机器学习算法研究。著有《企业大数据处理：Spark、Druid、Flume与Kafka应用实践》《Python3快速入门与实战》等书籍。","summary":"近年来微服务架构已经成为大规模分布式架构的主流技术，越来越多的公司已经或开始转型为微服务架构。本书不以某一种微服务框架的使用为主题，而是对整个微服务生态进行系统性的讲解，并结合工作中的大量实战案例为读者呈现一本读完即可实际上手应用的工具书。\n书中的理论部分介绍了微服务架构的发展历程，通俗地讲解了领域驱动设计，帮助读者更好地利用DDD来建模和划分服务；微服务稳定性保证的常用手段和微服务下如何保证事务的一致性这两章凝聚了作者多年的积累和思考，相信读者看完后会有不一样的感触和收获；书中实战部分的内容非常丰富，以项目为基础，逐层介绍常见的Dubbo、Spring Cloud和Service Mesh框架的具体使用方法，并对实现原理进行剖析；书中还以具体案例全面介绍了微服务双活体系建设、微服务监控与告警、微服务编排、百亿流量微服务网关的设计与实现，以及基于支付场景下的微服务改造等，并让读者了解如何借助微服务来增强和重构现有的遗留系统。\n不管是刚接触微服务的新手，还是正在尝试借助微服务解放生产力的开发人员或运维人员，甚至是立志于构建高可用可伸缩的微服务体系的技术Leader和架构师，阅读本书，对读者必有裨益。","price":"108.00"},{"rating":{"max":10,"numRaters":9,"average":"0.0","min":0},"subtitle":"Designing Resilient Systems with Spring Boot, Spring Cloud, and Cloud Foundry","author":["Josh Long","Kenny Bastani"],"pubdate":"2017-9-4","tags":[{"count":16,"name":"Java","title":"Java"},{"count":13,"name":"spring","title":"spring"},{"count":10,"name":"microservice","title":"microservice"},{"count":2,"name":"计算机","title":"计算机"},{"count":2,"name":"cloud","title":"cloud"},{"count":2,"name":"Programming","title":"Programming"},{"count":1,"name":"软件工程","title":"软件工程"},{"count":1,"name":"计算机科学","title":"计算机科学"}],"origin_title":"","image":"https://img3.doubanio.com\/view\/subject\/m\/public\/s29500322.jpg","binding":"Paperback","translator":[],"catalog":"","pages":"256","images":{"small":"https://img3.doubanio.com\/view\/subject\/s\/public\/s29500322.jpg","large":"https://img3.doubanio.com\/view\/subject\/l\/public\/s29500322.jpg","medium":"https://img3.doubanio.com\/view\/subject\/m\/public\/s29500322.jpg"},"alt":"https:\/\/book.douban.com\/subject\/26435857\/","id":"26435857","publisher":"O'Reilly Media","isbn10":"1449374646","isbn13":"9781449374648","title":"Cloud Native Java","url":"https:\/\/api.douban.com\/v2\/book\/26435857","alt_title":"","author_intro":"Josh Long is the Spring developer advocate for SpringSource, a division of VMware. Josh is the lead author on Apress' Spring Recipes, 2nd Edition, and a SpringSource committer and contributor. When he's not hacking on code for SpringSource or other open-source projects, he can be found at the local Java User Group or at the local coffee shop. Josh likes solutions that push the boundaries of the technologies that enable them. His interests include scalability, integration, rich clients, BPM, grid processing, mobile computing and so-called \"smart\" systems. He blogs at blog.springsource.org or joshlong.com.\nKenny Bastani is a passionate technology evangelist and and open source software advocate in Silicon Valley. As an enterprise software consultant he has applied a diverse set of skills needed for projects requiring a full stack web developer in agile mode. As a passionate blogger and open source contributor, Kenny engages a community of passionate developers who are looking to take advantage of newer graph processing techniques to analyze data.","summary":"What separates the traditional enterprise from the likes of Amazon, Netflix, and Etsy? Those companies have refined the art of cloud native development to maintain their competitive edge and stay well ahead of the competition. This practical guide shows Java\/JVM developers how to build better software, faster, using Spring Boot, Spring Cloud, and Cloud Foundry.\nMany organizations have already waded into cloud computing, test-driven development, microservices, and continuous integration and delivery. Authors Josh Long and Kenny Bastani fully immerse you in the tools and methodologies that will help you transform your legacy application into one that is genuinely cloud native.\nIn four sections, this book takes you through:\nThe Basics: learn the motivations behind cloud native thinking; configure and test a Spring Boot application; and move your legacy application to the cloud\nWeb Services: build HTTP and RESTful services with Spring; route requests in your distributed system; and build edge services closer to the data\nData Integration: manage your data with Spring Data, and integrate distributed services with Spring’s support for event-driven, messaging-centric architectures\nProduction: make your system observable; use service brokers to connect stateful services; and understand the big ideas behind continuous delivery","price":"USD 69.99"},{"rating":{"max":10,"numRaters":2,"average":"0.0","min":0},"subtitle":"Over 40 recipes for creating cloud-ready Java web applications with Spring MVC","author":["Alex Bretet"],"pubdate":"2016-2","tags":[{"count":3,"name":"spring","title":"spring"},{"count":1,"name":"Programming","title":"Programming"}],"origin_title":"","image":"https://img1.doubanio.com\/view\/subject\/m\/public\/s28850958.jpg","binding":"","translator":[],"catalog":"","pages":"","images":{"small":"https://img1.doubanio.com\/view\/subject\/s\/public\/s28850958.jpg","large":"https://img1.doubanio.com\/view\/subject\/l\/public\/s28850958.jpg","medium":"https://img1.doubanio.com\/view\/subject\/m\/public\/s28850958.jpg"},"alt":"https:\/\/book.douban.com\/subject\/26826602\/","id":"26826602","publisher":"","isbn10":"1784396419","isbn13":"9781784396411","title":"spring mvc cookbook","url":"https:\/\/api.douban.com\/v2\/book\/26826602","alt_title":"","author_intro":"","summary":"Spring MVC is a lightweight application framework that comes with a great configuration by default. Being part of the Spring Framework, it naturally extended and supported it with an amazing set of recognizable annotations. External libraries can be plugged in and plugged out. It also possesses a request flow.\nComplete support of REST web services makes the Spring architecture an extremely consistent choice to support your front-end needs and Internet transformations.\nFrom the design of your Maven modules, you will achieve an Enterprise-standard for a stateless REST application based on Spring and Spring MVC with this book.\nThis guide is unique in its style as it features a massive overview of practical development techniques brought together from the Spring ecosystem, the new JEE standards, the JavaScript revolution and Internet of Things.","price":""},{"rating":{"max":10,"numRaters":2,"average":"0.0","min":0},"subtitle":"基于Spring Boot、Spring Cloud、Docker","author":["郑天民"],"pubdate":"2018-12","tags":[{"count":2,"name":"架构","title":"架构"},{"count":2,"name":"技术","title":"技术"},{"count":1,"name":"计算机","title":"计算机"}],"origin_title":"","image":"https://img1.doubanio.com\/view\/subject\/m\/public\/s29963738.jpg","binding":"","translator":[],"catalog":"第1章 微服务架构设计 1\n1.1 直面微服务架构 1\n1.1.1 分布式系统与微服务架构 1\n1.1.2 微服务架构的优势与挑战 3\n1.1.3 实施微服务架构 5\n1.2 服务建模方法 6\n1.2.1 服务的模型 6\n1.2.2 服务的边界 7\n1.2.3 服务的数据 7\n1.3 服务拆分与集成 8\n1.3.1 服务拆分 8\n1.3.2 服务集成 9\n1.4 微服务架构的基础组件和关键要素 10\n1.4.1 微服务架构的基础组件 11\n1.4.2 微服务架构的关键元素 11\n1.5 实现微服务架构 13\n1.5.1 微服务架构技术体系 13\n1.5.2 微服务架构实现技术选型 14\n1.6 案例分析 17\n1.7 全书架构 18\n1.8 本章小结 19\n第2章 使用Spring Boot构建服务 21\n2.1 引入Spring Boot 21\n2.2 基于Spring Boot的第一个服务 23\n2.2.1 环境准备 23\n2.2.2 实现RESTful服务 24\n2.3 Spring Boot常见功能 28\n2.3.1 集成Spring Data 28\n2.3.2 集成消息中间件 37\n2.3.3 系统监控 39\n2.4 Spring Boot基本原理 44\n2.5 本章小结 46\n第3章 Spring Cloud Netflix Eureka与服务治理 47\n3.1 服务治理解决方案 48\n3.1.1 服务治理的需求和模型 48\n3.1.2 服务治理的基本方案 49\n3.2 构建Eureka服务 52\n3.2.1 构建单个Eureka服务器 52\n3.2.2 构建Eureka服务器集群 55\n3.3 使用Eureka注册和发现服务 57\n3.3.1 通过配置实现服务注册 58\n3.3.2 获取服务注册信息 59\n3.4 Eureka基本架构 61\n3.4.1 Eureka服务注册和发现架构 61\n3.4.2 Eureka高可用架构 64\n3.4.3 Eureka区域亲和性 65\n3.5 本章小结 66\n第4章 Spring Cloud Netflix Ribbon与负载均衡 67\n4.1 负载均衡 68\n4.1.1 负载均衡的类型 68\n4.1.2 负载均衡的算法 70\n4.2 使用Ribbon实现客户端负载均衡 71\n4.2.1 Spring Cloud Netflix Ribbon简介 71\n4.2.2 使用DiscoveryClient查找服务 72\n4.2.3 通过RestTemplate调用服务 74\n4.3 Ribbon基本架构 78\n4.3.1 Ribbon核心机制 79\n4.3.2 Ribbon负载均衡策略 81\n4.3.3 @LoadBalanced注解与RestTemplate 82\n4.3.4 @RibbonClient注解与自定义负载均衡策略 83\n4.4 本章小结 85\n第5章 Spring Cloud Netflix Hystrix与服务容错 86\n5.1 服务消费者容错思想和模式 87\n5.1.1 服务消费者容错的需求 87\n5.1.2 服务隔离 88\n5.1.3 服务熔断 90\n5.1.4 服务回退 91\n5.2 使用Hystrix实现服务容错 91\n5.2.1 引入Hystrix 92\n5.2.2 使用Hystrix实现服务隔离 93\n5.2.3 使用Hystrix实现服务熔断 96\n5.2.4 使用Hystrix实现服务回退 99\n5.3 Hystrix基本原理 101\n5.3.1 服务隔离 101\n5.3.2 服务熔断 103\n5.3.3 Hystrix配置项 105\n5.4 本章小结 109\n第6章 Spring Cloud Netflix Zuul与API网关 110\n6.1 服务网关的设计理念 111\n6.1.1 服务网关的作用 111\n6.1.2 服务网关的结构和功能 112\n6.2 使用Zuul构建服务网关 113\n6.2.1 构建Zuul服务器 113\n6.2.2 配置Zuul服务路由 115\n6.3 Zuul基本架构 120\n6.3.1 ZuulFilter组件架构 120\n6.3.2 使用Zuul过滤器 124\n6.4 本章小结 129\n第7章 Spring Cloud Config与配置中心 130\n7.1 分布式配置中心方案 131\n7.1.1 分布式配置模型 131\n7.1.2 配置中心实现工具 133\n7.2 构建配置中心服务器 134\n7.2.1 引入Spring Cloud Config 134\n7.2.2 实现基于本地文件系统的配置方案 135\n7.2.3 实现基于Git的配置方案 139\n7.3 使用配置服务 140\n7.3.1 访问配置项 141\n7.3.2 配置数据安全性 145\n7.4 Spring Cloud Config特性 148\n7.4.1 Spring Cloud Config对比Zookeeper 148\n7.4.2 Spring Cloud Config高可用 149\n7.5 本章小结 150\n第8章 Spring Cloud Stream与事件驱动 151\n8.1 事件驱动架构与模型 152\n8.1.1 基本事件驱动架构与实现机制 152\n8.1.2 事件驱动与领域模型 155\n8.2 引入Spring Cloud Stream 157\n8.2.1 Spring Cloud Stream基本架构 157\n8.2.2 Spring Cloud Stream与Spring Integration 159\n8.2.3 Spring Cloud Stream与消息中间件 162\n8.3 实现消息发布者 165\n8.3.1 消息发送场景与实现流程 165\n8.3.2 在服务中添加消息发布者 166\n8.4 实现消息消费者 170\n8.4.1 消息消费场景与实现流程 170\n8.4.2 在服务中添加消息消费者 172\n8.5 本章小结 177\n第9章 Spring Cloud Security与服务安全 178\n9.1 服务访问安全性与OAuth协议 178\n9.1.1 微服务架构中的安全性设计 179\n9.1.2 OAuth协议 180\n9.2 构建OAuth认证服务器 184\n9.2.1 引入Spring Cloud Security 185\n9.2.2 初始化用户与客户端 186\n9.2.3 生成Token 191\n9.3 使用OAuth保护服务访问 195\n9.3.1 集成OAuth认证服务 195\n9.3.2 创建服务访问策略 196\n9.3.3 使用OAuth2RestTemplate传播Token 201\n9.4 本章小结 206\n第10章 Spring Cloud Sleuth与服务监控 207\n10.1 服务监控与Spring Cloud Sleuth 207\n10.1.1 服务监控基本原理 207\n10.1.2 引入Spring Cloud Sleuth 209\n10.2 整合Spring Cloud Sleuth与Zipkin 215\n10.2.1 Zipkin基本结构 215\n10.2.2 引入Zipkin 216\n10.2.3 使用Zipkin跟踪服务调用链路 218\n10.2.4 使用Zipkin实现自定义跟踪 226\n10.3 本章小结 228\n第11章 Spring Test与服务测试 230\n11.1 微服务测试的方法 231\n11.1.1 单元测试 231\n11.1.2 集成测试 233\n11.1.3 端到端测试 233\n11.2 测试Spring Boot应用程序 234\n11.2.1 初始化测试环境 234\n11.2.2 执行单元测试 237\n11.3 使用Mock和注解实施集成测试 241\n11.3.1 使用@JsonTest注解测试JSON数据 242\n11.3.2 使用@DataJpaTest注解测试Repository层 244\n11.3.3 使用Mock测试Service层 248\n11.3.4 使用Mock和@WebMvcTest注解测试Controller层 252\n11.4 消费者驱动的契约测试 254\n11.4.1 面向契约的端对端测试 254\n11.4.2 实现面向契约的端对端测试 257\n11.5 本章小结 266\n第12章 Docker与服务部署 267\n12.1 Docker与微服务架构 267\n12.1.1 Docker的优势 268\n12.1.2 Docker组件与命令 268\n12.2 使用Dockerfile构建服务镜像 272\n12.2.1 Dockerfile命令 272\n12.2.2 使用Dockerfile命令构建镜像 273\n12.3 使用Docker Compose编排服务 276\n12.3.1 Docker Compose组件与命令 276\n12.3.2 使用Docker Compose 279\n12.3.3 Docker Compose案例分析 281\n12.4 本章小结 283\n参考文献 284","pages":"281","images":{"small":"https://img1.doubanio.com\/view\/subject\/s\/public\/s29963738.jpg","large":"https://img1.doubanio.com\/view\/subject\/l\/public\/s29963738.jpg","medium":"https://img1.doubanio.com\/view\/subject\/m\/public\/s29963738.jpg"},"alt":"https:\/\/book.douban.com\/subject\/30417709\/","id":"30417709","publisher":"人民邮电出版社","isbn10":"7115490902","isbn13":"9787115490902","title":"微服务架构实战","url":"https:\/\/api.douban.com\/v2\/book\/30417709","alt_title":"","author_intro":"郑天民，网名天涯兰，日本足利工业大学信息工程学硕士。10年软件行业从业经验，在医疗、安防和电商行业都有所涉及，前后担任系统分析架构师、部门经理、技术总监等职务，对架构设计和技术管理有丰富的经验和深入的理解。主持过十余个面向研发人员的技术和管理类培训课程，著有《系统架构设计：程序员向架构师转型之路》、《向技术管理者转型：软件开发人员跨越行业、技术、管理的转型思维与实践》、《微服务设计原理与架构》等书籍。","summary":"本书主要包含微服务架构实现过程中所应具备的技术体系和工程实践，围绕实现微服务架构的基础组件和关键要素，我们将讨论使用Spring Boot构建服务、服务治理、负载均衡、服务容错、API网关、配置中心、事件驱动、服务安全、服务监控、服务测试和Docker与服务部署等核心主题，并基于这些核心主题给出具体的案例分析。","price":"59.80"},{"rating":{"max":10,"numRaters":0,"average":"0.0","min":0},"subtitle":"Event-Based Java Microservices with Spring Boot and Spring Cloud","author":["Binildas Christudas"],"pubdate":"2019-8-10","tags":[{"count":2,"name":"软件工程","title":"软件工程"},{"count":1,"name":"软件架构","title":"软件架构"},{"count":1,"name":"计算机科学","title":"计算机科学"}],"origin_title":"","image":"https://img1.doubanio.com\/view\/subject\/m\/public\/s33304847.jpg","binding":"Paperback","translator":[],"catalog":"","pages":"902","images":{"small":"https://img1.doubanio.com\/view\/subject\/s\/public\/s33304847.jpg","large":"https://img1.doubanio.com\/view\/subject\/l\/public\/s33304847.jpg","medium":"https://img1.doubanio.com\/view\/subject\/m\/public\/s33304847.jpg"},"alt":"https:\/\/book.douban.com\/subject\/34441352\/","id":"34441352","publisher":"Apress","isbn10":"1484245008","isbn13":"9781484245002","title":"Practical Microservices Architectural Patterns","url":"https:\/\/api.douban.com\/v2\/book\/34441352","alt_title":"","author_intro":"Binildas provides technical architecture consultancy for IT solutions. He has over 20 years of IT experience, mostly in Microsoft and Oracle technologies. Distributed computing and service-oriented integration are his main skills, with extensive hands-on experience in Java and C# programming. A well-known and highly sought-after thought leader, Binil has designed and built many highly scalable middle-tier and integration solutions for several top-notch clients including Fortune 500 companies. He has been previously employed by multiple IT consulting firms including Infosys, India and Tata Consultancy Services and currently works for IBS Software Private Limited, as their chief architect and head of technology where he leads technology and architecture strategies for IBS’s product portfolio.\nBinil is a Sun Certified Programmer (SCJP), Developer (SCJD), Business Component Developer (SCBCD) and Enterprise Architect (SCEA), Microsoft Certified Professional (MCP) and Open Group (TOGAF8) Certified Enterprise Architecture Practitioner. He is also a Licensed Zapthink Architect (LZA) in SOA. IBS has applied for his proposal titled “A Method and a System for Facilitating Multitenancy of Services” to be a patent with the USPTO.","summary":"Take your distributed applications to the next level and see what the reference architectures associated with microservices can do for you. This book begins by showing you the distributed computing architecture landscape and provides an in-depth view of microservices architecture. Following this, you will work with CQRS, an essential pattern for microservices, and get a view of how distributed messaging works. Moving on, you will take a deep dive into Spring Boot and Spring Cloud.\nComing back to CQRS, you will learn how event-driven microservices work with this pattern, using the Axon 2 framework. This takes you on to how transactions work with microservices followed by advanced architectures to address non-functional aspects such as high availability and scalability. In the concluding part of the book you develop your own microservices application using the Axon framework and true BASE transactions, while making it as secure as possible.\nYou will:\nShift from monolith architecture to microservices\nBuild solid architectures without ACID-compliant databases\nWork with transactional systems\nDiscover the high availability principles in microservices","price":"USD 59.99"},{"rating":{"max":10,"numRaters":0,"average":"0.0","min":0},"subtitle":"Build reactive and cloud-native microservices with Kotlin using Spring 5 and Spring Boot 2.0","author":["Juan Antonio Medina Iglesias"],"pubdate":"2018-1-29","tags":[],"origin_title":"","image":"https://img1.doubanio.com\/view\/subject\/m\/public\/s29802017.jpg","binding":"平装","translator":[],"catalog":"Understanding Microservices\nGetting Started with Spring Boot 2.0\nCreating RESTful services\nCreating Reactive Microservices\nReactive Spring Data\nCreating Cloud Native Microservices\nCreating Dockers\nScaling Microservices\nTesting Spring Microservices\nMonitoring Microservices\nDeploying Microservices\nBest Practices","pages":"414","images":{"small":"https://img1.doubanio.com\/view\/subject\/s\/public\/s29802017.jpg","large":"https://img1.doubanio.com\/view\/subject\/l\/public\/s29802017.jpg","medium":"https://img1.doubanio.com\/view\/subject\/m\/public\/s29802017.jpg"},"alt":"https:\/\/book.douban.com\/subject\/30257151\/","id":"30257151","publisher":"Packt Publishing","isbn10":"1788471458","isbn13":"9781788471459","title":"Hands-On Microservices with Kotlin","url":"https:\/\/api.douban.com\/v2\/book\/30257151","alt_title":"","author_intro":"Juan Antonio Medina Iglesias began his career 20 years ago as an indie game developer and worked abroad four countries since then, from embedded software to enterprise applications. He has a lifetime's dedication to software craftsmanship.\nSince 2006, he works at Santander Technology with a talented group of professionals who performed one of the biggest transformations in the banking industry.\nNowadays, he works as a Senior Engineer in the Digital Transformation team within Santander Technology UK.","summary":"Key Features\nWrite easy-to-maintain lean and clean code with Kotlin for developing better microservices\nScale your Microserivces in your own cloud with Docker and Docker Swarm\nExplore Spring 5 functional reactive web programming with Spring WebFlux\nBook Description\nWith Google's inclusion of first-class support for Kotlin in their Android ecosystem, Kotlin's future as a mainstream language is assured. Microservices help design scalable, easy-to-maintain web applications; Kotlin allows us to take advantage of modern idioms to simplify our development and create high-quality services. With 100% interoperability with the JVM, Kotlin makes working with existing Java code easier. Well-known Java systems such as Spring, Jackson, and Reactor have included Kotlin modules to exploit its language features.\nThis book guides the reader in designing and implementing services, and producing production-ready, testable, lean code that's shorter and simpler than a traditional Java implementation. Reap the benefits of using the reactive paradigm and take advantage of non-blocking techniques to take your services to the next level in terms of industry standards. You will consume NoSQL databases reactively to allow you to create high-throughput microservices. Create cloud-native microservices that can run on a wide range of cloud providers, and monitor them. You will create Docker containers for your microservices and scale them. Finally, you will deploy your microservices in OpenShift Online.\nWhat you will learn\nUnderstand microservice architectures and principles\nBuild microservices in Kotlin using Spring Boot 2.0 and Spring Framework 5.0\nCreate reactive microservices that perform non-blocking operations with Spring WebFlux\nUse Spring Data to get data reactively from MongoDB\nTest effectively with JUnit and Kotlin\nCreate cloud-native microservices with Spring Cloud\nBuild and publish Docker images of your microservices\nScaling microservices with Docker Swarm\nMonitor microservices with JMX\nDeploy microservices in OpenShift Online\nWho This Book Is For\nIf you are a Kotlin developer with a basic knowledge of microservice architectures and now want to effectively implement these services on enterprise-level web applications, then this book is for you","price":"$44.99"},{"rating":{"max":10,"numRaters":2,"average":"0.0","min":0},"subtitle":"Master reactive programming, microservices, Cloud Native applications, and more","author":["Ranga Rao Karanam"],"pubdate":"2017-6-28","tags":[{"count":1,"name":"spring5","title":"spring5"}],"origin_title":"","image":"https://img9.doubanio.com\/view\/subject\/m\/public\/s29695376.jpg","binding":"Paperback","translator":[],"catalog":"Table of Contents\n1: EVOLUTION TO SPRING FRAMEWORK 5.0\n2: DEPENDENCY INJECTION\n3: BUILDING A WEB APPLICATION WITH SPRING MVC\n4: EVOLUTION TOWARD MICROSERVICES AND CLOUD-NATIVE APPLICATIONS\n5: BUILDING MICROSERVICES WITH SPRING BOOT\n6: EXTENDING MICROSERVICES\n7: ADVANCED SPRING BOOT FEATURES\n8: SPRING DATA\n9: SPRING CLOUD\n10: SPRING CLOUD DATA FLOW\n11: REACTIVE PROGRAMMING\n12: SPRING BEST PRACTICES\n13: WORKING WITH KOTLIN IN SPRING","pages":"496","images":{"small":"https://img9.doubanio.com\/view\/subject\/s\/public\/s29695376.jpg","large":"https://img9.doubanio.com\/view\/subject\/l\/public\/s29695376.jpg","medium":"https://img9.doubanio.com\/view\/subject\/m\/public\/s29695376.jpg"},"alt":"https:\/\/book.douban.com\/subject\/27091398\/","id":"27091398","publisher":"Packt Publishing","isbn10":"1787123170","isbn13":"9781787123175","title":"Mastering Spring 5.0","url":"https:\/\/api.douban.com\/v2\/book\/27091398","alt_title":"","author_intro":"Ranga Karanam\nRanga Rao Karanam is a programmer, trainer, and architect. His areas of interest include Cloud Native Applications, microservices, evolutionary design, high-quality code, DevOps, BDD, TDD, and refactoring. He loves consulting for start-ups on developing scalable, component-based Cloud Native applications, and following modern development practices such as BDD, continuous delivery, and DevOps. He loves the freedom the Spring Framework brings to developing enterprise Java applications.\nRanga started in28minutes with the vision of creating high-quality courses on developing Cloud Native Java applications. He is looking forward to enhancing his already considerable success--75,000 students on Udemy and 35,000 subscribers on YouTube.\nRanga likes to play cricket and go hiking. His dream is to spend a year hiking the Himalayas.","summary":"Spring 5.0 is due to arrive with a myriad of new and exciting features that will change the way we’ve used the framework so far. This book will show you this evolution—from solving the problems of testable applications to building distributed applications on the cloud.\nThe book begins with an insight into the new features in Spring 5.0 and shows you how to build an application using Spring MVC. You will realize how application architectures have evolved from monoliths to those built around microservices. You will then get a thorough understanding of how to build and extend microservices using Spring Boot. You will also understand how to build and deploy Cloud-Native microservices with Spring Cloud. The advanced features of Spring Boot will be illustrated through powerful examples. We will be introduced to a JVM language that’s quickly gaining popularity - Kotlin. Also, we will discuss how to set up a Kotlin project in Eclipse.\nBy the end of the book, you will be equipped with the knowledge and best practices required to develop microservices with the Spring Framework.\nWhat You Will Learn\nExplore the new features in Spring Framework 5.0\nBuild microservices with Spring Boot\nGet to know the advanced features of Spring Boot in order to effectively develop and monitor applications\nUse Spring Cloud to deploy and manage applications on the Cloud\nUnderstand Spring Data and Spring Cloud Data Flow\nUnderstand the basics of reactive programming\nGet to know the best practices when developing applications with the Spring Framework\nCreate a new project using Kotlin and implement a couple of basic services with unit and integration testing","price":"$43.10"},{"rating":{"max":10,"numRaters":0,"average":"0.0","min":0},"subtitle":"New Directions For Community Colleges, No. 141 Spring 2008 2008","author":["Cloud, Robert C. (EDT)\/ Kater, Susan T. (EDT)"],"pubdate":"2008-4","tags":[],"origin_title":"","image":"https://img1.doubanio.com\/view\/subject\/m\/public\/s25998589.jpg","binding":"","translator":[],"catalog":"","pages":"112","images":{"small":"https://img1.doubanio.com\/view\/subject\/s\/public\/s25998589.jpg","large":"https://img1.doubanio.com\/view\/subject\/l\/public\/s25998589.jpg","medium":"https://img1.doubanio.com\/view\/subject\/m\/public\/s25998589.jpg"},"alt":"https:\/\/book.douban.com\/subject\/4675917\/","id":"4675917","publisher":"","isbn10":"0470321342","isbn13":"9780470321348","title":"Governance in the Community College","url":"https:\/\/api.douban.com\/v2\/book\/4675917","alt_title":"","author_intro":"","summary":"Community college governance is a process for distributing authority, influence, and resources among internal and external constituencies. Having evolved from traditional public school bureaucratic and political models that emphasize control and oversight, community college governance is now a dynamic process with a host of participants. Gone are the days when presidents and trustees acted unilaterally on college issues. Although boards retain the legal authority to govern their colleges, prudent trustees now encourage broad-based involvement in governance. Nationwide, the trend is toward more participation and shared responsibility, and some states are codifying the process. For example, the California legistlature has mandated a shared governance system in public community colleges, reflecting the movement toward involvement and transparency. College leaders resist or ignore that trend to the detriment of their colleges and at their own peril. Interest in community college governance will increase among scholars and practitioners for many reasons. Enrollments are increasing rapidly while funding is not keeping pace. Taxpayer resistance is a reality. Workforce training programs will compete with transfer curricula for resources. Increasing numbers of poorly prepared students will require remediation. For-profit institutions will compete for students. Employee unions will press for better salaries and benefits and meaning participation in governance. Special interest groups will continue electing advocates to governing boards. P-19 initiatives will require close collaboration with public schools. In the meantime, rogue trustees will try the patience of everyone. Traditional governance models will not suffice in this demanding arena. Governance structures that are more collegial, flexible, and inclusive will be essential in the future as community colleges evolve to meet the needs of an increasingly complex and diverse society.  OL {list-style:disc}P:{margin-left 60px} Chapters include  Community College Governance: What Matters and Why? Governance over the Years: A Trustee's Perspective Governance in a Union Environment Internal Governance in the Community College: Models and Quilts The Effect of the Community College Workforce Development Mission on Governance Closing the Gaps in Texas: The Critical Role of Community Colleges Yanks, Canucks, and Aussies: Governance as Liberation Governance in Strategic Context Key Resources on Community College Governance  This is the 141th volume of the Jossey-Bass higher education quarterly report series New Directions for Community Colleges  , an essential guide for presidents, vice presidents, deans, and other leaders in today's open-door institutions, this quarterly provides expert guidance in meeting the challenges of their distinctive and expanding educational mission.","price":"$ 32.77"},{"rating":{"max":10,"numRaters":0,"average":"0.0","min":0},"subtitle":"","author":["Penny, Anne Judith"],"pubdate":"2010-2","tags":[],"origin_title":"","image":"https://img3.doubanio.com\/view\/subject\/m\/public\/s13483411.jpg","binding":"","translator":[],"catalog":"","pages":"192","images":{"small":"https://img3.doubanio.com\/view\/subject\/s\/public\/s13483411.jpg","large":"https://img3.doubanio.com\/view\/subject\/l\/public\/s13483411.jpg","medium":"https://img3.doubanio.com\/view\/subject\/m\/public\/s13483411.jpg"},"alt":"https:\/\/book.douban.com\/subject\/13237259\/","id":"13237259","publisher":"","isbn10":"1144337798","isbn13":"9781144337795","title":"Spring and Autumn, by the Author of 'morning Clouds'.","url":"https:\/\/api.douban.com\/v2\/book\/13237259","alt_title":"","author_intro":"","summary":"","price":""},{"rating":{"max":10,"numRaters":0,"average":"0.0","min":0},"subtitle":"","author":["Penny, Anne Judith"],"pubdate":"2012-1","tags":[],"origin_title":"","image":"https://img9.doubanio.com\/view\/subject\/m\/public\/s23025374.jpg","binding":"","translator":[],"catalog":"","pages":"38","images":{"small":"https://img9.doubanio.com\/view\/subject\/s\/public\/s23025374.jpg","large":"https://img9.doubanio.com\/view\/subject\/l\/public\/s23025374.jpg","medium":"https://img9.doubanio.com\/view\/subject\/m\/public\/s23025374.jpg"},"alt":"https:\/\/book.douban.com\/subject\/11862644\/","id":"11862644","publisher":"","isbn10":"021787696X","isbn13":"9780217876964","title":"Spring and Autumn, by the Author of 'Morning Clouds'.","url":"https:\/\/api.douban.com\/v2\/book\/11862644","alt_title":"","author_intro":"","summary":"","price":"$ 15.98"},{"rating":{"max":10,"numRaters":0,"average":"0.0","min":0},"subtitle":"","author":["Cloud, Robert C."],"pubdate":"2004-5","tags":[],"origin_title":"","image":"https://img9.doubanio.com\/view\/subject\/m\/public\/s12858206.jpg","binding":"","translator":[],"catalog":"","pages":"120","images":{"small":"https://img9.doubanio.com\/view\/subject\/s\/public\/s12858206.jpg","large":"https://img9.doubanio.com\/view\/subject\/l\/public\/s12858206.jpg","medium":"https://img9.doubanio.com\/view\/subject\/m\/public\/s12858206.jpg"},"alt":"https:\/\/book.douban.com\/subject\/12388537\/","id":"12388537","publisher":"","isbn10":"078797482X","isbn13":"9780787974824","title":"Legal Issues in the Community College Spring 2004","url":"https:\/\/api.douban.com\/v2\/book\/12388537","alt_title":"","author_intro":"","summary":"This issue will help college leaders inform themselves about legal issues that threaten institutional stability and effectiveness today. Across the nation, community colleges are being sued with increasing frequency over a variety of issues. Officials are confronted with a multitude of federal statutes and court rulings that have made governance and administration more complex and legalistic than ever before. Special-interest groups, like teachers' unions and taxpayers' associations, are increasingly involved in governing board elections, creating volatile situations for presidents. Consequently, caution is a watchword among many leaders. This situation does nothing to foster the teamwork that is essential in quality institutions. Community colleges exist in a highly litigious society, and their leaders are confronted with numerous legal issues as they carry out assigned duties. Some of those issues are not new to postsecondary education. Examples include governing board relations, academic freedom and tenure, collective bargaining, and employment issues. Other issues newer to the community college include student rights, codes of conduct, accommodation of disabled students, campus safety, distance education, intellectual property rights, and risk management. Community college leaders must find ways to resolve or mitigate these and other issues if their colleges are to continue providing exemplary services to students. This is the 125th issue of the quarterly higher education journal New Directions for Community Colleges.","price":"$ 32.77"},{"rating":{"max":10,"numRaters":0,"average":"0.0","min":0},"subtitle":"","author":["Cloud, Julie"],"pubdate":"","tags":[],"origin_title":"","image":"https://img3.doubanio.com\/view\/subject\/m\/public\/s18015542.jpg","binding":"","translator":[],"catalog":"","pages":"176","images":{"small":"https://img3.doubanio.com\/view\/subject\/s\/public\/s18015542.jpg","large":"https://img3.doubanio.com\/view\/subject\/l\/public\/s18015542.jpg","medium":"https://img3.doubanio.com\/view\/subject\/m\/public\/s18015542.jpg"},"alt":"https:\/\/book.douban.com\/subject\/15703325\/","id":"15703325","publisher":"","isbn10":"1241148147","isbn13":"9781241148140","title":"Where to Go on Spring Break This Year?","url":"https:\/\/api.douban.com\/v2\/book\/15703325","alt_title":"","author_intro":"","summary":"","price":""},{"rating":{"max":10,"numRaters":23,"average":"6.3","min":0},"subtitle":"","author":["纪晓峰"],"pubdate":"2017-4","tags":[{"count":12,"name":"微服务","title":"微服务"},{"count":5,"name":"入门","title":"入门"},{"count":4,"name":"Spring","title":"Spring"},{"count":2,"name":"编程","title":"编程"},{"count":2,"name":"cloud","title":"cloud"},{"count":1,"name":"计算机","title":"计算机"},{"count":1,"name":"程序设计","title":"程序设计"},{"count":1,"name":"工具类","title":"工具类"}],"origin_title":"","image":"https://img3.doubanio.com\/view\/subject\/m\/public\/s29454153.jpg","binding":"","translator":[],"catalog":"目 录\n第一部分 微服务解惑篇\n第1章 微服务架构 2\n1.1 不微你就OUT了 2\n1.2 产生背景 3\n1.2.1 时代的召唤 3\n1.2.2 容器神助攻 4\n1.2.3 微服务的进击 4\n1.3 微服务的标签 5\n1.3.1 单一职责 6\n1.3.2 微 6\n1.3.3 面向服务 7\n1.3.4 自治 8\n1.3.5 易扩展 9\n1.3.6 流程化 10\n1.4 实力碾压 11\n1.4.1 组件化 11\n1.4.2 快速 13\n1.4.3 可复用 13\n1.4.4 机动灵活 13\n1.5 不要奶我 14\n1.5.1 不足 14\n1.5.2 挑战 15\n1.5.3 小结 16\n1.6 本章小结 17\n第2章 为何选择微服务 18\n2.1 传统架构的病 18\n2.1.1 中年危机 18\n2.1.2 宝宝心里苦 19\n2.2 微服务有药 21\n2.2.1 讳疾忌医 21\n2.2.2 朋友听说过安利么 22\n2.2.3 沙盘演练看效果 22\n2.3 微服务的价值 23\n2.3.1 资源价值 24\n2.3.2 业务价值 24\n2.3.3 技术价值 24\n2.3.4 用户价值 25\n2.3.5 未来价值 25\n2.3.6 小结 26\n2.4 定个小目标 26\n2.4.1 持续交付 26\n2.4.2 业务敏捷 26\n2.4.3 独立演进 27\n2.4.4 高可用 27\n2.4.5 高性能 27\n2.4.6 站在云端 28\n2.5 别人家的公司 28\n2.6 来不及解释快上车 29\n第3章 我拆我拆我拆拆拆 30\n3.1 拆还是不拆 30\n3.2 如何拆 32\n3.2.1 庖丁解牛 32\n3.2.2 数据模型和业务模型 33\n3.2.3 金字塔结构图 33\n3.2.4 关键指标 33\n3.3 粒度 35\n3.3.1 五笔字根 36\n3.3.2 被遗忘的字典师傅 37\n3.3.3 小结 37\n3.4 边界 37\n3.5 本章小结 38\n第4章 如何使用微服务 39\n4.1 如何规划 39\n4.2 微服务重构 42\n4.2.1 影响因素 42\n4.2.2 重构原则 43\n4.2.3 重构方法 44\n4.3 本章小结 45\n第5章 微服务的朋友圈 46\n5.1 好朋友容器 46\n5.1.1 容器的来历 46\n5.1.2 容器的好处 47\n5.1.3 小结 49\n5.2 天生一对DevOps 49\n5.2.1 DevOps是什么 49\n5.2.2 为什么采用DevOps 50\n5.2.3 小结 51\n5.3 SOA是谁 51\n5.3.1 接着忽悠 52\n5.3.2 SOA是个什么鬼 52\n5.3.3 小结 53\n第二部分 技术实现篇\n第6章 Spring Boot 56\n6.1 介绍 56\n6.2 特点 57\n6.3 Spring Boot和微服务之间的关系 57\n6.4 如何使用 58\n6.5 可定制化 61\n6.6 本章小结 64\n第7章 Spring Cloud 65\n7.1 Spring Cloud优势 66\n7.2 Spring Cloud特点 67\n7.3 Spring Cloud之服务管理 68\n7.4 注册中心Eureka 69\n7.4.1 什么是注册中心 69\n7.4.2 为什么要有注册中心 69\n7.4.3 Eureka来历 70\n7.4.4 Eureka机制 71\n7.4.5 如何使用 72\n7.5 网关Zuul 77\n7.5.1 Zuul 78\n7.5.2 反向代理 78\n7.5.3 如何使用 79\n7.6 客户端负载均衡Ribbon 84\n7.6.1 负载均衡 85\n7.6.2 如何使用 85\n7.6.3 补充说明 91\n7.7 断路器Hystrix 92\n7.7.1 如何隔离 93\n7.7.2 电路熔断器模式 93\n7.7.3 回滚降级 94\n7.7.4 如何使用 95\n7.7.5 交通疏导 101\n7.7.6 小结 101\n7.8 分布式配置中心Spring Cloud Config 101\n7.8.1 为什么要有配置 102\n7.8.2 集中配置的好处 103\n7.8.3 配置方式的演进 103\n7.8.4 如何使用 104\n7.9 服务之间调用Feign 114\n7.9.1 Feign如何使用 114\n7.9.2 补充说明 118\n7.10 服务追踪 119\n7.10.1 Spring Cloud Sleuth介绍 119\n7.10.2 Sleuth如何使用 120\n7.10.3 日志聚合Zipkin 122\n7.10.4 小结 127\n7.11 Spring Cloud和Dubbo的比较 127\n7.11.1 生的伟大 127\n7.11.2 死的憋屈 127\n7.11.3 没比较没伤害 128\n7.11.4 现状 128\n7.12 Spring Cloud与Spring Boot的关系 129\n7.13 本章小结 130\n第8章 其他相关技术和工具 131\n8.1 数据库开发持续集成工具Liquibase 131\n8.1.1 特性 132\n8.1.2 使用 136\n8.2 Swagger 144\n8.2.1 为什么使用Swagger 144\n8.2.2 如何使用 145\n8.2.3 小结 149\n8.3 权限spring security 150\n8.4 微服务架构的通信方式 152\n8.4.1 同步 153\n8.4.2 异步 156\n8.5 服务编排 160\n8.6 管理工具JIRA 162\n第9章 测试相关 166\n9.1 单元测试 166\n9.1.1 Mockito如何使用 168\n9.1.2 Mock 与InjectMocks的区别 171\n9.2 接口测试 173\n9.3 代码质量管理工具Sonar 174\n9.3.1 特点 174\n9.3.2 使用 175\n第三部分 项目实战篇\n第10章 三个典型系统案例 188\n10.1 企业运营支撑系统 188\n10.1.1 背景 188\n10.1.2 现状 188\n10.1.3 原因调查 189\n10.1.4 解决方案 190\n10.2 车队管理系统 193\n10.2.1 背景 193\n10.2.2 技术架构 193\n10.2.3 服务如何拆分 194\n10.3 财务管理系统 195\n10.3.1 背景 195\n10.3.2 现状 195\n10.3.3 原因调查 196\n10.3.4 解决方案 196\n10.4 本章小结 197\n第11章 开发管理 198\n11.1 管理原则 198\n11.2 日常管理 198\n11.3 代码质量管理 199\n11.4 工作方式 199\n11.5 BA的职责 199\n11.6 SA的职责 200\n11.7 DEV的工作原则 201\n11.8 本章小结 201\n后记 202","pages":"","images":{"small":"https://img3.doubanio.com\/view\/subject\/s\/public\/s29454153.jpg","large":"https://img3.doubanio.com\/view\/subject\/l\/public\/s29454153.jpg","medium":"https://img3.doubanio.com\/view\/subject\/m\/public\/s29454153.jpg"},"alt":"https:\/\/book.douban.com\/subject\/27048246\/","id":"27048246","publisher":"电子工业出版社","isbn10":"7121311429","isbn13":"9787121311420","title":"微服务那些事儿","url":"https:\/\/api.douban.com\/v2\/book\/27048246","alt_title":"","author_intro":"纪晓峰，现任某公司架构师，曾经在AC担任微服务领域的咨询师，长期供职于HP，具有丰富的架构设计和开发经验，先后参与多个微服务项目。网名“叫我哲学家”，喜欢看书，钻研技术，领悟其中原理，习惯于独立思考，形成独到的见解。","summary":"本书以幽默风趣的语言生动地讲述了微服务，将微服务相关的理论知识、技术实现和项目实践一网打尽。全书共分为三大部分：*部分为“微服务解惑篇”，让读者对微服务有一个清晰的认识，消除对微服务的种种疑惑，同时对用户十分关注的如何拆分、如何使用等问题做了很全面的讲解；第二部分为“技术实现篇”，通过对当前世界*为流行的微服务框架Spring Boot Spring Cloud的常用组件的详细解读以及其他相关技术、工具的介绍，来帮助读者了解整体架构及其中各个组件的原理，结合代码帮助读者快速构建项目，搭建一个比较完整的微服务框架；第三部分为“项目实战篇”，通过案例来展示不同业务系统在微服务使用过程中如何梳理业务、如何拆分、如何使用微服务重构等。","price":"65.00"}]}

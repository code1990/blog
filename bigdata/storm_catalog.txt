>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>大数据技术丛书
前言
作者简介
第1章 分布式单词计数
1.1 Storm topology的组成部分——stream、spout和bolt
1.1.1 Storm
1.1.2 spout
1.1.3 bolt
1.2 单词计数topology的数据流
1.2.1 语句生成bolt
1.2.2 语句分割bolt
1.2.3 单词计割bolt
1.2.4 上报bolt
1.3 实现单词计数top
1.3.1 配置开发环境
1.3.2 实现Sentence
1.3.3 实现语句分割bolt
1.3.4 实现单词计割bolt
1.3.5 实现上报bolt
1.3.6 实现单词计数topo
1.4 Storm的并发机制
1.4.1 WordCountTopology的并发机制
1.4.2 给topology增加woker
1.4.3 配置executor和task
1.5 理解数据流分组
1.6 有保障机制的数据处理
1.6.1 spout的可靠性
1.6.2 bolt的可靠性
1.6.3 可靠的单词计数
总结
第2章 配置Storm集群
2.1 Storm集群的框架
2.1.1 理解nimbus守护进程
2.1.2 supervisor守护进程的工作方式
2.1.3 Apache ZooKeeper简介
……
第3章 Trident和传感器数据
第4章 实时趋势分析
第5章 实时图形分析
第6章 人工智能
第7章 整合Druid进行金融分析
第8章 自然语言处理
第9章 在Hadoop上部署Storm进行广告分析
第10章 云环境下的S
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>大数据技术丛书
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Storm源码分析
第1章　总体架构与代码结构　　1
1.1　Storm的总体结构　　1
1.2　Storm的元数据　　3
1.2.1　元数据介绍　　3
1.2.2　Storm怎么使用这些元数据　　4
1.3　Storm的代码结构　　7
1.3.1　Clojure代码　　7
1.3.2　Java代码　　8
1.3.3　Trident代码　　9
1.3.4　其他代码　　10
第2章　搭建Storm集群　　11
2.1　搭建单机Storm集群　　11
2.2　搭建多机Storm集群　　14
2.2.1　设置环境　　14
2.2.2　启动Storm集群　　15
2.2.3　提交Topology　　15
2.3　WordCountTopology介绍　　15
2.3.1　RandomSentenceSpout　　15
2.3.2　SplitSentence　　16
2.3.3　WordCount　　17
2.3.4　WordCountTopology构建　　17
第3章　Storm编程基础　　19
3.1　Fields定义　　19
3.2　Tuple接口　　20
3.3　常用声明接口　　21
3.3.1　配置声明接口　　22
3.3.2　输入声明接口　　23
3.3.3　输出字段声明接口　　24
3.3.4　组件声明接口　　25
3.4　Spout输出收集器　　25
3.4.1　ISpoutOutputCollector和SpoutOutputCollector　　25
3.4.2　Executor中ISpoutOutputCollector的实现　　27
3.5　Bolt输出收集器　　28
3.5.1　IOutputCollector和OutputCollector　　28
3.5.2　IBasicOutputCollector和BasicOutputCollector　　31
3.5.3　BatchOutputCollector和BatchOutputCollectorImpl　　32
3.5.4　　Executor中的IOutputCollector实现　　34
3.6　组件接口　　35
3.7　Spout接口　　35
3.7.1　ISpout　　36
3.7.2　IRichSpout　　38
3.8　Bolt接口　　38
3.8.1　IBolt　　38
3.8.2　IRichBolt　　40
3.8.3　IBasicBolt　　40
3.8.4　IBatchBolt　　42
3.8.5　小结　　45
3.9　Storm数据结构　　46
3.9.1　GlobalStreamId　　46
3.9.2　消息分组方式　　46
3.9.3　StreamInfo　　47
3.9.4　ShellComponent　　47
3.9.5　ComponentObject　　47
3.9.6　ComponentCommon　　47
3.9.7　SpoutSpec　　48
3.9.8　Bolt　　48
3.9.9　StormTopology　　49
3.9.10　TopologySummary　　49
3.9.11　SupervisorSummary　　49
3.9.12　ClusterSummary　　50
3.9.13　BoltStats　　50
3.9.14　SpoutStats　　50
3.9.15　统计信息　　50
3.9.16　DRPC　　51
3.10　基本Topology构建器　　52
3.10.1　TopologyBuilder　　52
3.10.2　ConfigGetter　　55
3.10.3　SpoutGetter和BoltGetter　　55
3.10.4　一个简单例子　　56
3.11　异常处理　　57
第4章　基础函数和工具类　　58
4.1　计时器　　58
4.1.1　mk-timer　　58
4.1.2　check-active!　　60
4.1.3　schedule　　60
4.1.4　schedule-recurring　　60
4.1.5　cancel-timer　　61
4.2　async-loop　　61
4.3　event-manager　　62
4.4　even-sampler　　63
4.5　ZooKeeper工具类　　64
4.5.1　mk-client　　64
4.5.2　create-node　　65
4.5.3　get-data　　65
4.5.4　进程内启动ZooKeeper　　66
4.6　LocalState　　66
4.7　ClusterState　　68
4.8　StormClusterState　　69
第5章　通信机制　　71
5.1　进程间通信　　71
5.1.1　进程间通信协议　　71
5.1.2　LocalCluster模式实现　　72
5.1.3　分布式模式实现　　73
5.1.4　协议使用　　75
5.2　进程内通信　　77
5.2.1　Disruptor Queue的使用　　77
5.2.2　DisruptorQueue的Clojure处理器　　80
第6章　Nimbus　　81
6.1　Nimbus服务接口定义　　81
6.2　Nimbus相关的数据结构　　83
6.2.1　Java 数据结构　　83
6.2.2　Clojure数据结构　　84
6.3　Nimbus中的线程介绍　　86
6.3.1　mk-assignments　　87
6.3.2　do-cleanup　　89
6.3.3　clean-inbox　　90
6.4　Topology状态转移　　90
6.4.1　transition-name!　　90
6.4.2　transition!　　91
6.4.3　state-transitions　　92
6.5　启动Nimbus服务　　96
6.5.1　launch-server！　　96
6.5.2　service-handler　　97
6.6　关闭Nimbus服务　　99
6.7　主要服务方法　　99
6.7.1　submitTopology　　99
6.7.2　kill、rebalance、activate、deactivate 方法　　101
6.7.3　文件上传与下载　　102
6.7.4　获取UI所需的信息　　104
6.7.3　获取Topology　　106
6.7.6　获取Storm配置项　　107
6.8　主要辅助方法　　107
6.8.1　system-topology!　　107
6.8.2　normalize-topology　　112
6.8.3　compute-new-topology->executor->node+port　　114
6.8.4　compute-executors　　117
第7章　Scheduler　　119
7.1　IScheduler接口　　119
7.2　EvenScheduler　　120
7.2.1　schedule-topolpgies-evenly　　120
7.2.2　schedule-topology　　121
7.2.3　get-alive-assigned-node+
port->executors　　122
7.2.4　sort-slots　　123
7.3　DefaultScheduler　　124
7.3.1　default-schedule　　124
7.3.2　slots-can-reassign　　126
7.3.3　bad-slots　　126
7.4　IsolationScheduler　　127
7.5　调度示例　　131
7.5.1　EvenScheduler和DefaultScheduler　　131
7.5.2　IsolationScheduler　　134
第8章　Scheduler　　137
8.1　与Supervisor相关的数据结构　　137
8.1.1　standalone-supervisor　　137
8.1.2　Supervisor的数据　　138
8.1.3　本地存储数据　　139
8.2　Supervisor中的线程　　140
8.2.1　计时器线程　　140
8.2.2　同步Nimbus任务的线程　　140
8.2.3　管理Worker进程的线程　　143
8.3　启动Supervisor　　145
8.4　关闭Supervisor　　147
8.5　重要方法介绍　　147
8.5.1　launch-worker　　147
8.5.2　read-allocated-workers　　150
8.5.3　wait-for-worker-launch　　151
8.5.4　shutdown-worker　　152
8.5.5　download-storm-code　　152
第9章　Worker　　155
9.1　Worker中的数据　　155
9.2　Worker中的计时器　　157
9.2.1　Worker的心跳　　157
9.2.2　Executor的心跳　　158
9.2.3　Worker中对ZMQ连接的维护　　159
9.2.4　从ZooKeeper获取Topology的活跃情况　　161
9.2.5　小结　　162
9.3　创建Worker　　163
9.4　关闭Worker　　164
9.5　重要辅助方法介绍　　165
9.5.1　Worker中的接收函数　　166
9.5.2　Worker中的发送函数　　167
9.5.3　获取属于Worker的Executor　　169
9.5.4　创建Executor的接收消息队列和查找表　　169
9.5.5　下载Topology的配置项以及代码　　170
9.6　小结　　171
第10章　Executor　　172
10.1　Executor的数据　　172
10.2　Executor的输入和输出　　174
10.2.1　Executor的输入及处理　　174
10.2.2　Executor的输出及发送　　175
10.3　Spout类型的Executor　　176
10.3.1　准备消息循环的数据　　176
10.3.2　Spout输入处理函数　　178
10.3.3　Spout消息发送函数　　180
10.3.4　Spout对象的初始化　　181
10.3.5　消息循环　　182
10.4　Bolt类型的Executor　　184
10.4.1　准备消息循环的数据　　184
10.4.2　Bolt输入处理函数　　184
10.4.3　Bolt的消息发送函数　　185
10.4.4　Bolt对象的初始化　　185
10.4.5　消息循环　　186
10.5　创建Executor　　187
10.6　辅助函数介绍　　188
10.6.1　组件的Grouper函数　　188
10.6.2　带流量控制的错误报告方法　　193
10.6.3　触发系统Ticks　　194
10.7　小结　　196
第11章　Task　　198
11.1　Task的上下文对象　　198
11.1.1　TopologyContext　　198
11.1.2　GeneralTopologyContext　　199
11.1.3　WorkerTopologyContext　　200
11.1.4　TopologyContext　　201
11.2　创建Task数据　　202
11.3　mk-tasks-fn函数　　204
11.4　send-unanchored　　205
11.5　创建Task　　206
11.6　Storm中传输的消息以及序列化　　206
第12章　Storm的Ack框架　　208
12.1　Acker Bolt的实现分析　　209
12.2　启动消息跟踪　　211
12.3　消息跟踪　　212
12.4　Ack机制的例子　　214
第13章　系统运行统计　　216
13.1　基础数据结构以及更新算法　　216
13.1.1　滑动窗口的数据结构　　216
13.1.2　滑动窗口的回调函数　　220
13.1.3　滑动窗口集合的类型　　221
13.2　Storm中的统计信息　　222
13.2.1　Stats中定义的统计类别　　222
13.2.2　运行统计的更新　　223
13.2.3　运行统计的更新时间点　　223
13.2.4　获取统计数据　　228
13.3　运行统计的Thrift结构　　229
第14章　系统运行统计的另一种实现　　231
14.1　内置统计信息的计算　　231
14.1.1　MultiCountMetric　　232
14.1.2　MultiReducedMetric　　233
14.2　内置统计类型　　234
14.2.1　Spout类型的内置统计　　235
14.2.2　Bolt类型的内置统计　　235
14.3　统计触发消息　　235
14.3.1　注册统计信息　　236
14.3.2　触发消息的产生与发送　　237
14.3.3　处理统计触发消息　　238
14.4　运行统计收集节点　　239
14.5　SystemBolt　　241
第15章　事务Topology的实现　　243
15.1　事务Topology的实现概述　　243
15.1.1　事务Topology的类型　　244
15.1.2　事务Topology的类关系　　245
15.2　ITransactionalSpout接口　　246
15.3　协调Spout节点的执行器　　248
15.3.1　ZooKeeper客户端工具　　248
15.3.2　协调Spout的执行器　　255
15.3.3　消息发送Bolt的执行器　　261
15.4　CoordinatedBolt的实现分析　　264
15.4.1　TrackingInfo　　264
15.4.2　CoordinatedOutput-
Collector　　265
15.4.3　CoordinatedBolt中的消息类型　　267
15.4.4　成员变量以及主要方法分析　　267
15.5　分区的事务类型　　271
15.5.1　分区的事务Spout接口　　271
15.5.2　分区的事务Spout的执行器　　273
15.6　分区的模糊事务Spout　　277
15.6.1　分区的模糊事务Spout的接口　　277
15.6.2　模糊的事务Spout执行器　　278
15.7　事务Topology的构建器　　281
15.7.1　构建器的构造函数及成员变量　　281
15.7.2　设置Bolt对象　　283
15.7.3　构建Topology　　284
15.7.4　输入流声明器　　286
第16章　事务Topology示例　　288
16.1　例子代码　　288
16.1.1　分区的事务Spout　　288
16.1.2　局部计数Bolt的实现　　291
16.1.3　全局计数Bolt的实现　　292
16.2　构建Topology　　293
16.3　事务处理示例　　295
第17章　Trident的Spout节点　　298
17.1　ITridentSpout接口　　298
17.1.1　BatchCoordinator接口　　299
17.1.2　TridentSpoutCoordinator　　300
17.1.3　MasterBatchCoordinator　　301
17.1.4　消息发送节点接口　　306
17.1.5　消息发送接口的执行器　　306
17.2　适配IRichSpout接口　　307
17.3　适配IBatchSpout接口　　311
17.4　Trident中分区的Spout类型　　311
17.4.1　分区Spout接口　　311
17.4.2　分区Spout的执行器　　313
17.5　模糊事务类型的Spout节点　　316
17.5.1　模糊事务类型的Spout接口　　317
17.5.2　模糊事务类型Spout的执行器　　317
17.6　构建Spout节点　　320
17.6.1　TridentTopology的newStream调用　　320
17.6.2　TridentTopology中newDRPCStream调用　　321
第18章　Trident的存储　　322
18.1　存储的基本接口　　322
18.2　MapState接口的实现　　323
18.2.1　非事务类型的存储　　324
18.2.2　事务类型的存储　　325
18.2.3　模糊事务类型存储　　327
18.3　值的序列化方法　　329
18.4　数据更新接口　　330
18.4.1　CombinerValueUpdater　　330
18.4.2　ReducerValueUpdater　　331
18.5　存储更新接口　　331
18.5.1　ReducerAggStateUpdater　　332
18.5.2　MapReducerAggStateUpdater　　332
18.5.3　BaseStateUpdater　　334
18.6　创建存储对象　　334
第19章　Trident消息　　336
19.1　ValuePointer　　336
19.2　Factory接口及其实现　　337
19.2.1　ProjectionFactory　　338
19.2.2　FreshOutputFactory　　339
19.2.3　OperationOutputFactory　　339
19.2.4　RootFactory　　341
19.3　消息工厂的例子　　342
19.4　TridentTupleView　　342
19.5　ComboList　　343
第20章　Trident操作与处理节点　　346
20.1　操作的基本接口　　346
20.2　Aggregator实现　　347
20.2.1　GroupedAggregator　　348
20.2.2　ChainedAggregatorImpl　　350
20.2.3　SingleEmitAggregator　　353
20.3　用户接口及其实现　　355
20.3.1　ReducerAggregator接口及其实现　　355
20.3.2　CombinerAggregator接口及其实现　　356
20.4　所有处理节点的上下文　　357
20.4.1　单个处理节点的上下文　　358
20.4.2　操作执行的上下文　　359
20.5　Trident的输出收集器　　359
20.5.1　FreshCollector　　359
20.5.2　CaptureCollector　　360
20.5.3　GroupCollector　　360
20.5.4　AppendCollector　　361
20.5.5　AddIdCollector　　361
20.6　Trident的处理节点　　362
20.6.1　TridentProcessor接口　　363
20.6.2　PartitionPersistProcessor　　363
20.6.3　StateQueryProcessor　　365
20.7　聚集器的执行　　367
第21章　Trident流的基本操作　　370
21.1　流的成员变量和基础方法　　370
21.1.1　流的成员变量　　370
21.1.2　流节点名字　　370
21.1.3　流的映射检查　　372
21.1.4　添加节点　　372
21.2　流映射操作　　373
21.3　流的分组操作　　374
21.4　流的逐行操作　　374
21.5　流的分区操作　　374
21.6　流的单聚集器聚集操作　　376
21.7　流的多聚集器聚集操作　　377
21.7.1　ChainedAggregatorDeclarer　　377
21.7.2　分区上的局部聚集操作　　379
21.7.3　全局聚集操作　　379
21.7.4　含有多个聚集器的partitionAggregate操作　　381
21.8　流的聚集操作　　382
21.9　流的分区写入操作　　383
21.10　查询操作　　384
21.11　流的全局写入操作　　384
21.12　流的操作与有向图构建　　384
21.13　分组流　　385
21.13.1　成员变量　　385
21.13.2　逐行操作　　385
21.13.3　分组流的分区聚集操作　　386
21.13.4　查询操作　　386
21.13.5　聚集操作　　386
21.13.6　写入操作　　387
21.14　利用流操作来构建Topology的例子　　388
第22章　Trident中流的交互操作　　392
22.1　基本接口　　392
22.2　JoinerMultiReducer　　393
22.2.1　成员变量及构造函数　　393
22.2.2　execute方法　　395
22.2.3　complete方法　　397
22.3　GroupedMultiReducerExecutor　　397
22.4　MultiReducerProcessor　　399
22.5　连接操作　　401
22.6　流合并操作　　403
第23章　Trident中的Bolt节点　　404
23.1　SubTopologyBolt　　404
23.1.1　输入准备　　404
23.1.2　成员变量　　405
23.1.3　主要方法　　406
23.2　Trident中的Bolt执行器　　409
23.2.1　ITridentBatchBolt接口　　410
23.2.2　TrackedBatch　　410
23.2.3　定制的输出收集器　　412
23.2.4　消息类型　　414
23.2.5　数据成员分析　　414
23.2.6　主要成员方法分析　　416
第24章　Trident的执行优化　　420
24.1　节点类型　　420
24.1.1　基本节点类型　　420
24.1.2　Spout节点　　422
24.1.3　处理节点　　422
24.1.4　分区节点　　423
24.2　执行优化算法　　426
24.2.1　节点组　　426
24.2.2　节点组的合并算法　　427
24.2.3　处理节点组中的分区节点　　431
24.2.4　节点组以不同的方式收听相同流　　431
24.2.5　执行优化后的节点组　　434
24.2.6　计算节点组的并行度　　434
第25章　Trident与DRPC　　437
25.1　DRPC服务器　　438
25.1.1　DRPC服务器的成员变量　　438
52.1.2　DRPC用户接口及其实现　　439
25.1.3　DRPC Topology端接口及其实现　　440
25.1.4　启动DRPC服务器　　441
25.2　DRPC的客户端　　442
25.3　DRPC中Spout节点　　443
25.4　DRPC Spout的执行器　　446
25.5　completeDRPC操作　　449
25.6　返回DRPC结果　　451
第26章　Trident的Topology构建器　　453
26.1　基本工具函数　　453
26.1.1　committerBatches　　453
26.1.2　fleshOutStreamBatchIds　　453
26.1.3　getOutputStreamBatchGroups　　454
26.2　TridentTopologyBuilder　　455
26.2.1　成员变量　　455
26.2.2　设置Spout节点　　456
26.2.3　设置Bolt节点　　458
26.3　一个例子　　460
第27章　多语言　　462
27.1　ShellProcess　　462
27.2　ShellBolt　　464
27.2.1　成员变量　　464
27.2.2　读写线程　　465
27.3　ShellSpout　　467
第28章　Storm中的配置项　　469

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Storm源码分析
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Storm实战
第1 章 Storm 基础 1
1.1 Storm 能做什么 ............................................... 2
1.2 Storm 特性 ...................................................... 3
1.3 其他流计算系统 .............................................. 8
1.4 应用模式 ....................................................... 13
第2 章 Storm 初体验 17
2.1 本地环境搭建 ............................................... 18
2.2 Storm 集群 .................................................... 25
第3 章 构建Topology 41
3.1 Storm 基本概念 ............................................. 42
3.2 构建Topology ............................................... 53
3.3 小结 .............................................................. 61
第4 章 Topology 的并行度 62
4.1 并行元素 ....................................................... 63
4.2 配置并行度 ................................................... 65
4.3 一个运行中Topology 的例子 ....................... 68
4.4 如何更新运行中的Topology 的并行度 ........ 71
第5 章 消息的可靠处理 73
5.1 简介 .............................................................. 74
5.2 理解消息被完整处理 .................................... 74
5.3 消息的生命周期 ............................................ 76
5.4 可靠相关的API ............................................ 79
5.5 高效地实现tuple tree .................................... 84
5.6 选择合适的可靠性级别 ................................ 87
5.7 集群的各级容错 ............................................ 89
5.8 小结 .............................................................. 91
第6 章 一致性事务 92
6.1 简单设计一：强顺序流 ................................ 93
6.2 简单设计二：强顺序batch 流 ...................... 95
6.3 CoordinateBolt 的原理 .................................. 96
6.4 Transactional Topology .................................. 98
第7 章 DRPC 105
7.1 Storm DRPC ................................................ 106
7.2 总体概述 ..................................................... 106
7.3 LinearDRPCTopologyBuilder ...................... 108
7.4 本地模式DRPC .......................................... 110
7.5 远程模式DRPC .......................................... 111
7.6 一个复杂的例子 .......................................... 113
7.7 非线性DRPC 拓扑 ..................................... 117
7.8 LinearDRPCTopologyBuilder 工作过程 ...... 117
7.9 高级进阶 ..................................................... 118
第8 章 Trident 的特性 119
8.1 理解Trident ................................................ 120
8.2 结合多个Trident 任务 ................................ 124
8.3 消费和生产Field ........................................ 126
8.4 State（状态保存） ...................................... 128
8.5 Trident Topology 的执行过程 ...................... 136
8.6 总结 ............................................................ 137
第9 章 Storm 实例 138
9.1 一个简单的实例 .......................................... 139
9.2 复杂一点的实例 .......................................... 150
9.3 其他 ............................................................ 161
第10 章 常见应用问题分析 162
10.1 性能问题排查与定位 ................................ 163
10.2 系统中常见的问题与排查 ......................... 167
10.3 业务问题的定位与排查 ............................ 170
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Storm实战
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Storm实时数据处理
第1章　搭建开发环境 / 1
1.1　简介 / 1
1.2　搭建开发环境  / 1
1.3　分布式版本控制 / 3
1.4　创建“Hello World”Topology / 6
1.5　创建Storm集群——配置机器 / 12
1.6　创建Storm集群——配置Storm / 18
1.7　获取基本的点击率统计信息 / 23
1.8　对Bolt进行单元测试 / 31
1.9　实现集成测试 / 34
1.10　将产品部署到集群 / 37
第2章　日志流处理 / 38
2.1　简介 / 38
2.2　创建日志代理 / 38
2.3　创建日志Spout / 40
2.4　基于规则的日志流分析 / 45
2.5　索引与持久化日志数据 / 49
2.6　统计与持久化日志统计信息 / 53
2.7　为日志流集群创建集成测试 / 55
2.8　创建日志分析面板 / 59
第3章　使用Trident计算单词重要度 / 71
3.1　简介 / 71
3.2　使用Twitter过滤器创建URL流 / 71
3.3　从文件中获取整洁的词流 / 76
3.4　计算每个单词的相对重要度 / 81
第4章　分布式远程过程调用 / 85
4.1　简介 / 85
4.2　通过DPRC实现所需处理流程 / 85
4.3　对Trident Topology进行集成测试 / 90
4.4　实现滚动窗口Topology / 95
4.5　在集成测试中模拟时间 / 98
第5章　在不同语言中实现Topology / 100
5.1　简介 / 100
5.2　在Qt中实现多语言协议 / 100
5.3　在Qt中实现SplitSentence Bolt / 105
5.4　在Ruby中实现计数 Bolt / 108
5.5　在Clojure中实现单词计数Topology / 109
第6章　Storm与Hadoop集成 / 113
6.1　简介 / 113
6.2　在Hadoop中实现TF-IDF算法 / 115
6.3　持久化来自Storm的文件 / 121
6.4　集成批处理与实时视图 / 122
第7章　实时机器学习 / 127
7.1　简介 / 127
7.2　实现事务性Topology / 129
7.3　在R中创建随机森林分类模型 / 134
7.4　基于随机森林的事务流业务分类 / 143
7.5　在R中创建关联规则模型 / 149
7.6　创建推荐引擎 / 152
7.7　实时在线机器学习 / 157
第8章　持续交付 / 162
8.1　简介 / 162
8.2　搭建CI服务器 / 162
8.3　搭建系统环境 / 164
8.4　定义交付流水线 / 166
8.5　实现自动化验收测试 / 170
第9章　在AWS上部署Storm / 177
9.1　简介 / 177
9.2　使用Pallet在AWS上部署Storm / 177
9.3　 搭建虚拟私有云 / 181
9.4　使用Vagrant在虚拟私有云上部署Storm / 189
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Storm实时数据处理
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Storm技术内幕与大数据实践
第1章　绪论 1
1．1　Storm的基本组件 2
1．1．1　集群组成 2
1．1．2　核心概念 3
1．1．3　Storm的可靠性 5
1．1．4　Storm的特性 6
1．2　其他流式处理框架 6
1．2．1　Apache S4 6
1．2．2　Spark Streaming 6
1．2．3　流计算和Storm的应用 7
第2章　实时平台介绍 11
2．1　实时平台架构介绍 11
2．2　Kafka架构 13
2．2．1　Kafka的基本术语和概念 13
2．2．2　Kafka在实时平台中的应用 14
2．2．3　消息的持久化和顺序读写 15
2．2．4　sendfile系统调用和零复制 15
2．2．5　Kafka的客户端 17
2．2．6　Kafka的扩展 17
2．3　大众点评实时平台 17
2．3．1　相关数据 18
2．3．2　实时平台简介 18
2．3．3　Blackhole 19
2．4　1号店实时平台 20
第3章　Storm集群部署和配置 23
3．1　Storm的依赖组件 23
3．2　Storm的部署环境 24
3．3　部署Storm服务 24
3．3．1　部署ZooKeeper 24
3．3．2　部署Storm 25
3．3．3　配置Storm 25
3．4　启动Storm 28
3．5　Storm的守护进程 28
3．6　部署Storm的其他节点 30
3．7　提交Topology 30
第4章　Storm内部剖析 33
4．1　Storm客户端 33
4．2　Nimbus 36
4．2．1　启动Nimbus服务 36
4．2．2　Nimbus服务的执行过程 38
4．2．3　分配Executor 44
4．2．4　调度器 46
4．2．5　默认调度器DefaultScheduler 47
4．2．6　均衡调度器EvenScheduler 50
4．3　Supervisor 53
4．3．1　ISupervisor接口 54
4．3．2　Supervisor的共享数据 54
4．3．3　Supervisor的执行过程 56
4．4　Worker 61
4．4．1　Worker中的数据流 61
4．4．2　创建Worker的过程 62
4．5　Executor 65
4．5．1　Executor的创建 66
4．5．2　创建Spout的Executor 69
4．5．3　创建Bolt的Executor 74
4．6　Task 76
4．6．1　Task的上下文对象 77
4．6．2　Task的创建 82
4．7　Storm中的统计 84
4．7．1　stats框架 85
4．7．2　metric框架 90
4．8　Ack框架 91
4．8．1　Ack的原理 92
4．8．2　Acker Bolt 94
4．9　Storm总体架构 95
第5章　Storm运维和监控 97
5．1　主机信息监控 97
5．1　日志和监控 98
5．2　Storm UI和NimbusClient 99
5．3　Storm Metric的使用 100
5．4　Storm ZooKeeper的目录 102
5．5　Storm Hook的使用 104
第6章　Storm的扩展 107
6．1　Storm UI的扩展 107
6．1．1　Storm UI原生功能 108
6．1．2　Storm UI新功能需求 108
6．1．3　Storm的Thrift接口 109
6．2　资源隔离 110
6．2．1　CGroup测试 111
6．2．2　基于CGroup的资源隔离的实现 119
第7章　Storm开发 121
7．1　简单示例 121
7．2　调试和日志 122
7．3　Storm Trident 124
7．4　Strom DRPC 128
第8章　基于Storm的实时数据平台 129
8．1　Hadoop到Storm的代码迁移经验 129
8．2　实时用户画像 130
8．2．1　简单实时画像 130
8．2．2　实时画像优化 131
8．2．3　实时画像的毫秒级更新 133
8．3　其他场景画像 135
8．4　画像的兴趣度模型构建 136
8．5　外部画像融合经验分享 138
8．6　交互式查询和分析用户画像 142
8．7　实时产品和店铺信息更新 143
第9章　大数据应用案例 145
9．1　实时DAU计算 145
9．2　实时个性化推荐 150
9．2．1　推荐系统介绍 150
9．2．2　实时推荐系统的方法 153
9．2．3　基于Storm的实时推荐系统 156
9．3　广告投放的精准化 158
9．3．1　点击率预测 158
9．3．2　搜索引擎营销 161
9．3．3　精准化营销与千人千面 161
9．4　实时意图和搜索 164
9．4．1　用户意图预测 165
9．4．2　搜索比价 167
9．4．3　搜索排序 168
第10章　Storm使用经验和性能优化 171
10．1　使用经验 171
10．1．1　使用rebalance命令动态调整并发度 171
10．1．2　使用tick消息做定时器 172
10．1．3　使用组件的并行度代替线程池 174
10．1．4　不要用DRPC批量处理大数据 174
10．1．5　不要在Spout中处理耗时的操作 174
10．1．6　log4j的使用技巧 175
10．1．7　注意fieldsGrouping的数据均衡性 176
10．1．8　优先使用localOrShuffleGrouping 176
10．1．9　设置合理的MaxSpoutPending值 177
10．1．10　设置合理的Worker数 177
10．1．11　平衡吞吐量和时效性 178
10．2　性能优化 179
10．2．1　找到Topology的性能瓶颈 179
10．2．2　GC参数优化 181
10．3　性能优化原则 181
附录A　Kafka原理 183
附录B　将Storm源码导入Eclipse 191
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Storm技术内幕与大数据实践
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>从零开始学Storm
第1章  Storm简介
1.1  什么是Storm
1.2  Storm的诞生
1.2.1  从Twitter说起
1.2.2  Twitter需要处理大批实时性要求高的大数据业务
1.2.3  Storm帮助Twitter解决实时海量大数据处理问题
1.3  Storm的成长
1.3.1  Storm正式开源
1.3.2  Storm的核心技术和基本组成
1.3.3  Storm的项目小组
1.3.4  Storm的技术支持网站
1.4  Storm的优势
1.4.1  集成多种技术
1.4.2  简单的API
1.4.3  可扩展的
1.4.4  容错的
1.4.5  保证数据处理
1.4.6  可以使用任何语言
1.4.7  部署和操作简单
1.4.8  自由开源
1.5  Storm的应用现状和发展趋势
1.5.1  应用现状
1.5.2  发展趋势
1.6  如何学习Storm
1.7  本书的章节安排及学习建议
1.7.1  本书的章节安排
1.7.2  关于如何阅读本书的建议
1.8  本章小结
第2章  Storm的基本知识
2.1  概念
2.1.1  元组（Tuple）
2.1.2  流（Stream）
2.1.3  喷口（Spout）
2.1.4  螺栓（Bolt）
2.1.5  拓扑（Topology）
2.1.6  主控节点与工作节点
2.1.7  Nimbus进程与Supervisor进程
2.1.8  流分组（Stream grouping）
2.1.9  工作进程（Worker）
2.1.10  任务（Task）
2.1.11  执行器（Executor）
2.1.12  可靠性（Reliability）
2.2  Storm的配置
2.2.1  Storm的配置类型
2.2.2  defaults.yaml文件
2.2.3  storm.yaml文件
2.2.4  Config类
2.3  序列化（Serialization）
2.3.1  动态类型
2.3.2  自定义序列化
2.3.3  Java序列化
2.3.4  特定组件序列化注册
2.4  容错机制
2.4.1  Worker进程死亡
2.4.2  节点死亡
2.4.3  Nimbus或者Supervisor守护进程死亡
2.4.4  Nimbus是否是“单点故障”的
2.5  可靠性机制——保证消息处理
2.5.1  消息被“完全处理”的含义
2.5.2  如果一个消息被完全处理或完全处理失败会发生什么
2.5.3  Storm如何保证可靠性
2.5.4  Storm如何实现可靠性
2.5.5  调节可靠性
2.6  消息传输机制
2.6.1  ZeroMQ
2.6.2  Netty
2.6.3  自定义消息通信机制
2.7  Storm的开发环境与生产环境
2.7.1  开发环境与本地模式
2.7.2  生产环境与远程模式
2.7.3  开发环境与生产环境的对比
2.8  Storm拓扑的并行度（parallelism）
2.8.1  工作进程、执行器和任务
2.8.2  配置拓扑的并行度
2.8.3  拓扑示例
2.8.4  如何改变运行中拓扑的并行度
2.9  Storm命令行客户端
2.10  Javadoc文档
2.11  本章小结
第3章  拓扑详解
3.1  什么是拓扑
3.2  TopologyBuilder
3.3  流分组
3.3.1  什么是流分组
3.3.2  不同的流分组方式
3.4  一个简单的拓扑
3.5  在本地模式下运行拓扑
3.6  在生产集群上运行拓扑
3.6.1  常见的配置
3.6.2  杀死拓扑
3.6.3  更新运行中的拓扑
3.6.4  监控拓扑
3.7  拓扑的常见模式
3.7.1  流连接（Stream Join）
3.7.2  批处理（Batching）
3.7.3  BasicBolt
3.7.4  内存中缓存与字段的组合
3.7.5  流的top N
3.7.6  高效保存最近更新缓存对象的TimeCacheMap（已弃用）
3.7.7  分布式RPC的CoordinatedBolt与KeyedFairBolt
3.8  本地模式与StormSubmitter的对比
3.9  多语言协议（Multi-Language Protocol）
3.10  使用非JVM语言操作Storm
3.10.1  支持的非Java语言
3.10.2  对Storm使用非Java语言
3.10.3  实现非Java DSL的笔记
3.11  Hook
3.12  本章小结
第4章  组件详解
4.1  基本接口
4.1.1  IComponent接口
4.1.2  ISpout接口
4.1.3  IBolt接口
4.1.4  IRichSpout与IRichBolt接口
4.1.5  IBasicBolt接口
4.1.6  IStateSpout与IRichStateSpout接口
4.2  基本抽象类
4.2.1  BaseComponent抽象类
4.2.2  BaseRichSpout抽象类
4.2.3  BaseRichBolt抽象类
4.2.4  BaseBasicBolt抽象类
4.3  事务接口
4.3.1  IPartitionedTransactionalSpout
4.3.2  IOpaquePartitionedTransactionalSpout
4.3.3  ITransactionalSpout
4.3.4  ICommitterTransactionalSpout
4.3.5  IBatchBolt
4.4  组件之间的相互关系
4.5  本章小结
第5章  Spout详解
5.1  可靠的与不可靠的消息
5.2  Spout获取数据的方式
5.2.1  直接连接（Direct Connection）
5.2.2  消息队列（Enqueued Messages）
5.2.3  DRPC（分布式RPC）
5.3  常用的Spout
5.3.1  Kestrel作为Spout的数据源
5.3.2  AMQP作为Spout的数据源
5.3.3  JMS作为Spout的数据源
5.3.4  Redis作为Spout的数据源
5.3.5  beanstalkd作为Spout的数据源
5.4  学习编写Spout类
5.5  本章小结
第6章  Bolt详解
6.1  Bolt概述
6.2  可靠的与不可靠的Bolt
6.2.1  使用Anchoring机制实现可靠的Bolt
6.2.2  使用IBasicBolt接口实现自动确认
6.3  复合流与复合Anchoring
6.3.1  复合流
6.3.2  复合Anchoring
6.4  使用其他语言定义Bolt
6.5  学习编写Bolt类
6.5.1  可靠的Bolt
6.5.2  不可靠的Bolt
6.6  本章小结
第7章  ZooKeeper详解
7.1  ZooKeeper简介
7.2  ZooKeeper的下载和部署
7.2.1  ZooKeeper的下载
7.2.2  ZooKeeper的部署
7.3  ZooKeeper的配置
7.4  ZooKeeper的运行
7.5  ZooKeeper的本地模式实例
7.6  ZooKeeper的数据模型
7.6.1  ZNode
7.6.2  ZooKeeper中的时间
7.6.3  ZooKeeper的Stat结构
7.7  ZooKeeper的命令行操作范例
7.8  Storm在ZooKeeper中的目录结构
7.9  本章小结
第8章  基础软件的安装与使用
8.1  Linux的基本操作
8.1.1  环境变量
8.1.2  常用命令
8.2  JDK的下载与配置
8.2.1  Sun JDK的下载
8.2.2  在Linux下安装JDK
8.2.3  在Windows下安装JDK
8.3  GitHub托管项目的下载
8.4  Maven的下载与配置
8.4.1  Maven的下载
8.4.2  在Linux下部署Maven
8.4.3  在Windows下部署Maven
8.5  其他软件——Notepad++
8.6  本章小结
第9章  Storm的安装与配置
9.1  Storm集群的安装步骤与准备工作
9.1.1  搭建ZooKeeper集群
9.1.2  安装Storm的本地依赖
9.1.3  下载并解压Storm发行版本
9.1.4  配置storm.yaml文件
9.1.5  启动Storm的守护进程
9.2  本地模式的Storm完整的配置命令
9.3  本章小结
第10章  Storm集群搭建实践
10.1  准备工作
10.1.1  概述
10.1.2  配置hosts文件
10.1.3  配置静态IP
10.1.4  集群SSH无密码
10.1.5  修改主机名
10.1.6  关闭防火墙
10.1.7  同步时间
10.1.8  安装JDK
10.2  ZooKeeper集群的搭建
10.2.1  部署第一个节点
10.2.2  部署第i个节点
10.2.3  启动ZooKeeper集群
10.2.4  查看ZooKeeper状态
10.2.5  关闭ZooKeeper集群
10.2.6  清理ZooKeeper集群
10.3  Storm集群的搭建
10.3.1  安装Storm依赖（每个Storm节点）
10.3.2  部署第一个节点
10.3.3  部署第i个节点
10.3.4  启动Storm守护进程
10.4  本章小结
第11章  准备Storm的开发环境
11.1  Storm的开发环境
11.1.1  什么是Storm的开发环境
11.1.2  如何管理Storm
11.1.3  如何提交拓扑到集群
11.2  Eclipse的下载与配置
11.2.1  Eclipse的下载
11.2.2  Eclipse的配置与运行
11.2.3  Eclipse插件的安装
11.3  使用Maven管理项目
11.3.1  Maven的下载与配置
11.3.2  配置pom.xml文件
11.3.3  运行Maven命令
11.4  使用Nexus搭建本地Maven私服
11.4.1  下载Nexus
11.4.2  运行Nexus
11.4.3  登录Nexus后台
11.4.4  配置Repositories
11.4.5  配置setting.xml文件
11.4.6  修改Eclipse的Maven插件的配置
11.5  使用SVN管理代码版本
11.5.1  在Windows下搭建SVN服务器
11.5.2  在Linux下搭建SVN服务器
11.5.3  安装SVN客户端
11.6  部署单节点的Storm集群
11.6.1  部署伪分布的ZooKeeper
11.6.2  部署伪分布的Storm集群
11.7  本章小结
第12章  开发自己的Storm应用
12.1  新建Maven项目
12.2  修改为适合Storm开发的项目
12.2.1  对包名进行分类管理
12.2.2  修改pom.xml文件
12.3  编写代码
12.3.1  编写Spout类
12.3.2  编写Bolt类
12.3.3  编写Topology类
12.4  本地测试运行
12.5  提交到Storm集群运行
12.5.1  使用Maven打包
12.5.2  提交jar包到集群
12.6  本章小结
第13章  storm-starter详解
13.1  storm-starter项目概述
13.2  storm-starter的下载
13.3  使用Maven进行管理
13.3.1  使用Maven打包storm-starter
13.3.2  使用Maven直接运行WordCountTopology
13.3.3  使用Maven运行单元测试
13.4  在Eclipse中运行
13.4.1  新建Maven项目的方式
13.4.2  导入已存在的项目的方式
13.5  storm-starter的入门例子
13.5.1  ExclamationTopology
13.5.2  WordCountTopology
13.5.3  ReachTopology
13.6  storm-starter的其他例子
13.6.1  BasicDRPCTopology
13.6.2  ManualDRPC
13.6.3  PrintSampleStream
13.6.4  RollingTopWords
13.6.5  SingleJoinExample
13.6.6  TransactionalGlobalCount
13.6.7  TransactionalWords
13.7  本章小结
第14章  研发与集群管理技巧
14.1  使用daemontools监控Storm进程
14.1.1  daemontools简介
14.1.2  安装daemontools
14.1.3  编写监控脚本
14.2  使用Monit监控Storm
14.2.1  Monit简介
14.2.2  安装Monit
14.2.3  配置Monit
14.2.4  启动Monit
14.2.5  获取Monit帮助信息
14.3  常用的集群操作命令
14.4  使用Storm的经验与建议
14.5  本章小结
第15章  DRPC详解
15.1  概述
15.2  DRPCTopologyBuilder
15.2.1  LinearDRPCTopologyBuilder
15.2.2  LinearDRPCTopologyBuilder提供的方法
15.2.3  LinearDRPCTopologyBuilder使用范例
15.2.4  LinearDRPCTopologyBuilder的工作原理
15.2.5  LinearDRPCTopologyBuilder目前已弃用
15.3  本地模式的DRPC
15.4  远程模式的DRPC
15.5  一个复杂的DRPC例子（计算reach值）
15.6  非线性DRPC
15.7  本章小结
第16章  事务拓扑详解
16.1  什么是事务拓扑
16.1.1  设计1
16.1.2  设计2
16.1.3  设计3（Storm的设计)
16.2  事务拓扑的设计细节
16.3  事务拓扑的实现细节
16.3.1  事务Spout的工作原理	262
16.3.2  “对于给定的事务id不能发射相同的Batch”的处理
16.3.3  更多的细节
16.4  事务拓扑API
16.4.1  Bolt
16.4.2  事务Spout
16.4.3  配置
16.5  TransactionalTopologyBuilder
16.5.1  TransactionalTopologyBuilder提供的方法
16.5.2  TransactionalTopologyBuilder类已弃用
16.6  一个简单的例子
16.7  本章小结
第17章  Trident详解
17.1  Trident概述
17.1.1  简单的例子——单词统计（TridentWordCount）
17.1.2  另一个例子——计算Reach值（TridentReach）
17.1.3  字段和元组
17.1.4  状态（State）
17.1.5  Trident拓扑的执行
17.2  Trident API
17.2.1  概述
17.2.2  本地分区操作
17.2.3  重新分区操作
17.2.4  聚合操作
17.2.5  流分组操作
17.2.6  合并与连接
17.3  Trident的状态
17.3.1  Trident状态分类
17.3.2  事务Spout（Transactional Spout）
17.3.3  不透明事务Spout（Opaque Transactional Spout）
17.3.4  非事务Spout（Non-transactional Spout）
17.3.5  Spout与State之间的联系
17.3.6  State API
17.3.7  persistentAggregate方法
17.3.8  实现 MapStates
17.4  Trident Spout
17.4.1  流水线（Pipelining）
17.4.2  Trident Spout的类型
17.5  本章小结
第18章  Storm的内部实现
18.1  文件系统分析
18.2  数据目录结构
18.2.1  Nimbus节点的目录结构
18.2.2  Supervisor节点的目录结构
18.3  代码库的结构
18.3.1  storm.thrift
18.3.2  Java接口
18.3.3  实现
18.4  拓扑的生命周期
18.4.1  启动拓扑
18.4.2  监控拓扑
18.4.3  杀死拓扑
18.5  Acking框架的实现
18.5.1  异或计算的基本原理
18.5.2  Acking框架的实现原理
18.5.3  Acker的execute方法
18.5.4  待定元组（pending tuple）和RotatingMap
18.6  Metric
18.7  本章小结
第19章  Storm相关的其他项目
19.1  JStorm项目
19.1.1  项目简介
19.1.2  下载与部署
19.1.3  源代码编译
19.2  storm-deploy项目
19.3  Storm与Kafka
19.3.1  Kafka简介
19.3.2  Kafka的安装
19.3.3  启动服务
19.3.4  测试运行
19.3.5  Storm与Kafka的项目
19.4  storm-kestrel项目	334
19.4.1  storm-kestrel项目简介
19.4.2  使用storm-kestrel项目
19.4.3  Kestrel服务器和队列
19.4.4  添加元素到kestrel
19.4.5  从Kestrel中移除元素
19.4.6  持续添加元素到Kestrel
19.4.7  使用KestrelSpout
19.4.8  执行
19.5  本章小结
第20章  企业应用案例
20.1  Storm席卷众多互联网企业
20.1.1  Storm的典型应用场景
20.1.2  Storm的三大基本应用
20.2  Storm在Twitter中的应用
20.2.1  Twitter公司简介
20.2.2  Storm帮助Twitter提升产品性能
20.2.3  MapR在Twitter中的应用简介
20.3  Storm在阿里巴巴集团的应用
20.3.1  阿里巴巴集团简介
20.3.2  Storm在阿里巴巴的应用
20.3.3  Storm在淘宝公司的应用
20.3.4  Storm在支付宝公司的应用
20.4  其他应用Storm的知名企业和项目
20.5  本章小结
参考资料
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>从零开始学Storm
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Storm企业级应用：实战、运维和调优
前　言
基　础　篇
第1章　认识Storm  2
1.1　什么是实时流计算  2
1.1.1　实时流计算背景  3
1.1.2　实时计算应用场景  3
1.1.3　实时计算处理流程  4
1.1.4　实时计算框架  5
1.2　Storm是什么  11
1.2.1　Storm出现的背景  12
1.2.2　Storm简介  12
1.2.3　Storm的设计思想  13
1.2.4　Storm与Hadoop的角色和组件比较  14
1.3　Storm核心组件  15
1.3.1　主节点Nimbus  15
1.3.2　工作节点Supervisor  15
1.3.3　协调服务组件ZooKeeper  16
1.3.4　其他核心组件  16
1.4　Storm的特性  16
1.5　Storm的功能  18
1.6　本章小结  19
第2章　开始使用Storm  20
2.1　环境准备  20
2.1.1　系统配置  20
2.1.2　安装ZooKeeper集群  22
2.2　启动模式  26
2.2.1　本地模式  26
2.2.2　分布式模式  26
2.3　安装部署Storm集群  26
2.3.1　安装Storm依赖库  27
2.3.2　安装Storm集群  28
2.3.3　启动Storm集群  31
2.3.4　停止Storm集群  33
2.4　创建Topology并向集群提交任务  33
2.4.1　创建Topology  34
2.4.2　向集群提交任务  36
2.5　本章小结  36
第3章　核心概念和数据流模型  37
3.1　Tuple元组  37
3.1.1　Tuple描述  37
3.1.2　Tuple的生命周期  38
3.2　Spout数据源  39
3.2.1　Spout介绍  39
3.2.2　Spout实例  40
3.3　Bolt消息处理者  42
3.3.1　Bolt介绍  42
3.3.2　Bolt实例  45
3.4　Topology拓扑  47
3.4.1　Topology实例  48
3.4.2　Topology运行  51
3.5　Stream消息流和Stream Grouping消息流组  55
3.5.1　Stream消息流  55
3.5.2　Stream Grouping消息流组  55
3.6　Task任务  56
3.7　Worker工作者进程  56
3.8　Worker、Task、Executor三者之间的关系  57
3.9　事务  57
3.10　数据流模型  58
3.10.1　数据流模型简介  58
3.10.2　Storm数据流模型  60
3.11　本章小结  61
实　战　篇
第4章　实例1：移动互联——语音“实时墙”  64
4.1　业务背景  64
4.1.1　案例背景  64
4.1.2　设计目标  65
4.1.3　数据格式  66
4.1.4　硬件配置  68
4.2　系统架构与模块设计  68
4.2.1　整体架构  69
4.2.2　数据采集  70
4.2.3　数据实时处理  70
4.2.4　存储设计  70
4.2.5　Web实时展示  71
4.2.6　硬件部署图  72
4.3　核心模块实现  73
4.3.1　实时处理业务逻辑实现  73
4.3.2　Web展示实现  80
4.3.3　最终效果呈现  88
4.4　本章小结  89
第5章　实例2：运营商——网络流量流向实时分析  90
5.1　业务背景  90
5.1.1　案例背景  91
5.1.2　设计目标  91
5.1.3　数据规模预估  92
5.1.4　数据格式  92
5.1.5　统计分析需求  93
5.2　系统架构与模块设计  94
5.2.1　整体架构  94
5.2.2　数据源  95
5.2.3　日志采集  96
5.2.4　数据存储  96
5.2.5　数据处理  97
5.2.6　目标存储和扩展服务  97
5.2.7　结果Web展示  97
5.3　核心模块实现  98
5.3.1　模拟数据实现  98
5.3.2　日志采集和存储实现  102
5.3.3　数据处理实现  105
5.3.4　Web展示实现  111
5.4　本章小结  114
第6章　实例3：交通——基于GPS的实时路况分析  115
6.1　业务背景  115
6.1.1　案例背景  115
6.1.2　设计目标  116
6.1.3　数据格式  118
6.1.4　实时路况分析方法  118
6.2　系统架构和模块设计  118
6.3　核心模块的实现  121
6.3.1　安装Kafka集群  121
6.3.2　Flume整合Kafka  124
6.3.3　实时处理数据  125
6.3.4　Web页面展示  127
6.4　本章小结  129
第7章　实例4：互联网——数据质量实时监控  130
7.1　业务背景  130
7.1.1　案例背景  130
7.1.2　设计目标  132
7.1.3　数据格式  132
7.2　系统架构与模块设计  133
7.2.1　整体架构  133
7.2.2　结果Web展示  135
7.3　核心模块实现  135
7.3.1　模拟数据  135
7.3.2　实时处理业务逻辑的实现  141
7.3.3　Web界面实现  147
7.3.4　最终效果图  150
7.4　本章小结  152
第8章　实例5：交通——超速频发路段监控  153
8.1　业务背景  153
8.1.1　案例背景  153
8.1.2　数据类型  155
8.2　系统架构和模块设计  157
8.3　核心模块实现  158
8.3.1　实现入口类Main  158
8.3.2　数据源SocketSpout的实现  159
8.3.3　实时处理MapSearchBolt和SpeedProcessBolt的实现  161
8.3.4　目标存储DataBaseLoadBolt的实现  169
8.4　本章小结  171
第9章　实例6：互联网——广告实时流量统计  172
9.1　广告实时流量统计系统架构  172
9.1.1　广告数据  172
9.1.2　详细需求描述  174
9.1.3　系统架构  175
9.2　表结构与模块设计  177
9.2.1　表结构设计  177
9.2.2　功能模块设计  178
9.3　核心模块实现  179
9.3.1　部署物理集群环境  179
9.3.2　Kafka生产者逻辑的实现  181
9.3.3　使用Storm-kafka实现业务逻辑  182
9.3.4　使用HBase存储并实现统计  193
9.4　本章小结  194
技　巧　篇
第10章　Storm常见故障及解决方法  196
10.1　安装部署故障  196
10.1.1　“no jzmq in java.library.path”异常  196
10.1.2　“No rule to make target”异常  198
10.1.3　“cannot access org.zeromq.ZMQ”异常  198
10.1.4　缺少pkg-conf?ig异常  198
10.1.5　“java.lang.Unsatisf?iedLinkError”异常  199
10.1.6　“java.lang.NoClassDefFoundError：clojure.core.protocols$”异常  199
10.1.7　“Error：cannot link with -luuid，install uuid-dev”异常  199
10.1.8　“bad interpreter：No such f?ile or directory”异常  200
10.1.9　“org.zeromq.ZMQException：Invalid argument”异常  200
10.2　启动故障  201
10.2.1　“java.io.FileNotFoundException”异常  201
10.2.2　“java.io.EOFException”异常  202
10.3　运行时故障  202
10.3.1　“Nimbus host is not set”异常  203
10.3.2　“AlreadyAliveException（msg：xxx is alreadyactive）”异常  203
10.3.3　无法序列化log4j.Logger异常  203
10.3.4　“Failing message”异常  203
10.3.5　“java.io.NotSerializableException”异常  204
10.3.6　“java.lang.NoClassDefFoundError”异常  205
10.3.7　“java.net.NoRouteToHostException”异常  206
10.3.8　“java.net.UnknownHostException”异常  206
10.3.9　重复defaults.yaml资源文件异常  207
10.3.10　“KeeperException$NoNodeException”异常  208
10.3.11　“A fatal error has been detected by the Java Runtime Environment”错误  209
10.3.12　“java.lang.ArrayIndexOutOfBoundsException”异常  212
10.3.13　DRPC空指针异常  212
10.3.14　Storm Thrift读取数据报错  212
10.4　本章小结  214
第11章　Storm使用技巧和最佳实践  215
11.1　核心组件使用要点  215
11.1.1　Spout和Bolt  215
11.1.2　ZooKeeper集群尽量独立  219
11.1.3　Thrift服务的应用场景  220
11.1.4　序列化机制的使用场景  220
11.2　集群配置技巧  220
11.2.1　默认参数配置  220
11.2.2　日志信息  223
11.2.3　合理配置JVM参数  223
11.3　集群运维技巧  224
11.3.1　Storm计算结果的存储位置  224
11.3.2　Storm集群动态增删节点  224
11.3.3　关闭Storm相关进程  224
11.3.4　Storm UI显示内容的问题  224
11.4　项目开发技巧  225
11.4.1　使用assembly插件打包  225
11.4.2　依赖JAR冲突  228
11.5　保证消息的可靠处理  228
11.5.1　消息失败后的处理  228
11.5.2　主动干预可靠性  229
11.5.3　处理重复的Tuple  229
11.6　理解DRPC原语  230
11.6.1　DRPC工作流  230
11.6.2　LinearDRPCTopologyBuilder实现类  231
11.6.3　DRPC的两种模式  231
11.7　快速理解一致性事务  232
11.7.1　Trident框架的使用  233
11.7.2　Trident框架的细节  234
11.7.3　事务性Spout  236
11.7.4　状态State  238
11.8　本章小结  241
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Storm企业级应用：实战、运维和调优

第4章　视图技术
4.1　Beetl模板引擎
4.1.1　安装Beetl
4.1.2　设置定界符号和占位符
4.1.3　配置Beetl
4.1.4　groupTemplate
4.2　使用变量
4.2.1　全局变量
4.2.2　局部变量
4.2.3　共享变量
4.2.4　模板变量
4.3　表达式
4.3.1　计算表达式
4.3.2　逻辑表达式
4.4　控制语句
4.4.1　循环语句
4.4.2　条件语句
4.4.3　try catch
4.5　函数调用
4.6　格式化函数
4.7　直接调用Java
4.8　标签函数
4.9　HTML标签
4.10　安全输出
4.11　高级功能
4.11.1　配置Beetl
4.11.2　自定义函数
4.11.3　自定义格式化函数
4.11.4　自定义标签函数
4.11.5　自定义HTML标签
4.11.6　布局
4.11.7　AJAX局部渲染
4.12　脚本引擎
4.13　JSON技术
4.13.1　在Spring Boot中使用Jackson
4.13.2　自定义ObjectMapper
4.13.3　Jackson的三种使用方式
4.13.4　Jackson树遍历
4.13.5　对象绑定
4.13.6　流式操作
4.13.7　Jackson注解
4.13.8　集合的反序列化
4.14　MVC分离开发
4.14.1　集成WebSimulate
4.14.2　模拟JSON响应
4.14.3　模拟模板渲染
第4章　视图技术
4.1　Beetl模板引擎
4.1.1　安装Beetl
4.1.2　设置定界符号和占位符
4.1.3　配置Beetl
4.1.4　groupTemplate
4.2　使用变量
4.2.1　全局变量
4.2.2　局部变量
4.2.3　共享变量
4.2.4　模板变量
4.3　表达式
4.3.1　计算表达式
4.3.2　逻辑表达式
4.4　控制语句
4.4.1　循环语句
4.4.2　条件语句
4.4.3　try catch
4.5　函数调用
4.6　格式化函数
4.7　直接调用Java
4.8　标签函数
4.9　HTML标签
4.10　安全输出
4.11　高级功能
4.11.1　配置Beetl
4.11.2　自定义函数
4.11.3　自定义格式化函数
4.11.4　自定义标签函数
4.11.5　自定义HTML标签
4.11.6　布局
4.11.7　AJAX局部渲染
4.12　脚本引擎
4.13　JSON技术
4.13.1　在Spring Boot中使用Jackson
4.13.2　自定义ObjectMapper
4.13.3　Jackson的三种使用方式
4.13.4　Jackson树遍历
4.13.5　对象绑定
4.13.6　流式操作
4.13.7　Jackson注解
4.13.8　集合的反序列化
4.14　MVC分离开发
4.14.1　集成WebSimulate
4.14.2　模拟JSON响应
4.14.3　模拟模板渲染


第7章　使用Spring MVC开发Web应用 129
7.1　Spring MVC简介 129
7.1.1　Servlet概述 129
7.1.2　MVC简介 131
7.1.3　Spring、Spring MVC与Spring Boot 2.0 132
7.1.4　Spring MVC框架 133
7.2　Spring MVC常用注解 136
7.3　项目实战：使用FreeMarker模板引擎 137
7.3.1　FreeMarker简介 137
7.3.2　实现一个分页查询页面 138
7.4　实现文件下载 144
7.5　本章小结 145
第8章　Spring Boot自定义Web MVC配置 146
8.1　Web MVC配置简介 146
8.1.1　静态资源配置 147
8.1.2　拦截器配置 148
8.1.3　跨域配置 148
8.1.4　视图控制器配置 149
8.1.5　消息转换器配置 150
8.1.6　数据格式化器配置 150
8.1.7　视图解析器配置 151
8.2　全局异常处理 152
8.2.1　使用@ControllerAdvice和@ExceptionHandler注解 152
8.2.2　实现HandlerExceptionResolver接口 154
8.3　定制Web容器 157
8.4　定制Spring Boot应用程序启动Banner 158
8.5　自定义注册Servlet、Filter和Listener 161
8.5.1　注册Servlet 161
8.5.2　注册Filter 163
8.5.3　注册Listener 168
8.6　本章小结 169
第3章 Spring Boot的Web之旅  23
3.1 Spring Boot的第一个Web项目  23
3.1.1 加入Web依赖  23
3.1.2 创建Controller  23
3.1.3 测试运行  24
3.2 WebFlux的使用  25
3.2.1 添加WebFlux依赖  25
3.2.2 创建一个处理方法类  26
3.2.3 创建一个Router类  26
3.2.4 测试运行  27
3.3 使用热部署  27
3.4 配置文件  28
3.4.1 配置文件类型  28
3.4.2 自定义属性  28
3.4.3 使用随机数  29
3.4.4 多环境配置  31
3.4.5 自定义配置文件  31
3.5 使用页面模板  32
3.5.1 使用Thymeleaf  32
3.5.2 使用FreeMarker  35
3.5.3 使用传统JSP  37
3.6 使用WebJars  39
3.7 国际化使用  41
3.8 文件的上传和下载  44
3.9 小结  48
第3章  Spring Boot的Web开发  31
3.1  Spring Boot的Web开发支持  32
3.2  Thymeleaf模板引擎  32
3.2.1  Thymeleaf概述  33
3.2.2  Thymeleaf基础语法  33
3.3  Spring和Thymeleaf的整合  36
3.4  Spring Boot的Thymeleaf支持  37
3.5  Spring Boot的Web开发实例  38
示例：第一个Spring Boot的Web应用  38
示例：Thymeleaf常用功能  45
3.6  Spring Boot对JSP的支持  52
示例：Spring Boot添加JSP支持  53
3.7  Spring Boot处理JSON数据  57
示例：Spring Boot处理JSON  57
3.8  Spring Boot文件上传下载  63
示例：Spring Boot文件上传  63
示例：使用对象方式接收上传文件  66
示例：文件下载  69
3.9  Spring Boot的异常处理  71
示例：ExceptionHandler处理异常  71
示例：父类Controller处理异常  73
示例：Advice处理异常返回JSON  76
3.10  本章小结  78
第10章　REST
10.1　REST简介
10.1.1　REST风格的架构
10.1.2　使用“api”作为上下文
10.1.3　增加一个版本标识
10.1.4　标识资源
10.1.5　确定HTTP Method
10.1.6　确定HTTP Status
10.1.7　REST VS. WebService
10.2　Spring Boot集成REST
10.2.1　集成REST
10.2.2　@RestController
10.2.3　REST Client
10.3　Swagger UI
10.3.1　集成Swagger
10.3.2　Swagger规范
10.3.3　接口描述
10.3.4　查询参数描述
10.3.5　URI中的参数
10.3.6　HTTP头参数
10.3.7　表单参数
10.3.8　文件上传参数
10.3.9　整个请求体作为参数
10.4　模拟REST服务

第12章　任务调度与邮件服务开发 236
12.1　定时任务 236
12.1.1　通用实现方法 236
12.1.2　静态定时任务 237
12.1.3　Cron简介 238
12.1.4　动态定时任务 240
12.1.5　多线程执行任务 243
12.2　开发任务调度服务 245
12.2.1　同步与异步 245
12.2.2　同步任务执行 245
12.2.3　异步任务执行 247
12.3　开发邮件服务 250
12.3.1　发送富文本邮件 252
12.3.2　发送带附件的富文本邮件 253
12.4　本章小结 254
第13章　Spring Boot集成WebFlux开发响应式Web应用 255
13.1　响应式宣言及架构 255
13.2　项目实战 256
13.2.1　创建项目 256
13.2.2　代码分析 258
13.3　本章小结 262
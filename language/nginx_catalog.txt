>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>深入理解Nginx（第2版）
第一部分　Nginx能帮我们做什么
第1章　研究Nginx前的准备工作 2
1.1　Nginx是什么 2
1.2　为什么选择Nginx 5
1.3　准备工作 7
1.3.1　Linux操作系统 7
1.3.2　使用Nginx的必备软件 7
1.3.3　磁盘目录 8
1.3.4　Linux内核参数的优化 9
1.3.5　获取Nginx源码 10
1.4　编译安装Nginx 11
1.5　configure详解 11
1.5.1　configure的命令参数 11
1.5.2　configure执行流程 18
1.5.3　configure生成的文件 21
1.6　Nginx的命令行控制 23
1.7　小结 27
第2章　Nginx的配置 28
2.1　运行中的Nginx进程间的关系 28
2.2　Nginx配置的通用语法 31
2.2.1　块配置项 31
2.2.2　配置项的语法格式 32
2.2.3　配置项的注释 33
2.2.4　配置项的单位 33
2.2.5　在配置中使用变量 33
2.3　Nginx服务的基本配置 34
2.3.1　用于调试进程和定位问题的配置项 34
2.3.2　正常运行的配置项 36
2.3.3　优化性能的配置项 37
2.3.4　事件类配置项 39
2.4　用HTTP核心模块配置一个静态Web服务器 40
2.4.1　虚拟主机与请求的分发 41
2.4.2　文件路径的定义 45
2.4.3　内存及磁盘资源的分配 47
2.4.4　网络连接的设置 49
2.4.5　MIME类型的设置 52
2.4.6　对客户端请求的限制 53
2.4.7　文件操作的优化 54
2.4.8　对客户端请求的特殊处理 56
2.4.9　ngx_http_core_module模块提供的变量 57
2.5　用HTTP proxy module配置一个反向代理服务器 59
2.5.1　负载均衡的基本配置 61
2.5.2　反向代理的基本配置 63
2.6　小结 66
第二部分　如何编写HTTP模块
第3章　开发一个简单的HTTP模块 68
3.1　如何调用HTTP模块 68
3.2　准备工作 70
3.2.1　整型的封装 71
3.2.2　ngx_str_t数据结构 71
3.2.3　ngx_list_t数据结构 71
3.2.4　ngx_table_elt_t数据结构 75
3.2.5　ngx_buf_t数据结构 75
3.2.6　ngx_chain_t数据结构 77
3.3　如何将自己的HTTP模块编译进Nginx 77
3.3.1　config文件的写法 77
3.3.2　利用configure脚本将定制的模块加入到Nginx中 78
3.3.3　直接修改Makefile文件 81
3.4　HTTP模块的数据结构 82
3.5　定义自己的HTTP模块 86
3.6　处理用户请求 89
3.6.1　处理方法的返回值 89
3.6.2　获取URI和参数 92
3.6.3　获取HTTP头部 94
3.6.4　获取HTTP包体 97
3.7　发送响应 99
3.7.1　发送HTTP头部 99
3.7.2　将内存中的字符串作为包体发送 101
3.7.3　经典的“Hello World”示例 102
3.8　将磁盘文件作为包体发送 103
3.8.1　如何发送磁盘中的文件 104
3.8.2　清理文件句柄 106
3.8.3　支持用户多线程下载和断点续传 107
3.9　用C++语言编写HTTP模块 108
3.9.1　编译方式的修改 108
3.9.2　程序中的符号转换 109
3.10　小结 110
第4章　配置、error日志和请求上下文 111
4.1　http配置项的使用场景 111
4.2　怎样使用http配置 113
4.2.1　分配用于保存配置参数的数据结构 113
4.2.2　设定配置项的解析方式 115
4.2.3　使用14种预设方法解析配置项 121
4.2.4　自定义配置项处理方法 131
4.2.5　合并配置项 133
4.3　HTTP配置模型 135
4.3.1　解析HTTP配置的流程 136
4.3.2　HTTP配置模型的内存布局 139
4.3.3　如何合并配置项 142
4.3.4　预设配置项处理方法的工作原理 144
4.4　error日志的用法 145
4.5　请求的上下文 149
4.5.1　上下文与全异步Web服务器的关系 149
4.5.2　如何使用HTTP上下文 151
4.5.3　HTTP框架如何维护上下文结构 152
4.6　小结 153
第5章　访问第三方服务 154
5.1　upstream的使用方式 155
5.1.1　ngx_http_upstream_t结构体 158
5.1.2　设置upstream的限制性参数 159
5.1.3　设置需要访问的第三方服务器地址 160
5.1.4　设置回调方法 161
5.1.5　如何启动upstream机制 161
5.2　回调方法的执行场景 162
5.2.1　create_request回调方法 162
5.2.2　reinit_request回调方法 164
5.2.3　finalize_request回调方法 165
5.2.4　process_header回调方法 165
5.2.5　rewrite_redirect回调方法 167
5.2.6　input_filter_init与input_filter回调方法 167
5.3　使用upstream的示例 168
5.3.1　upstream的各种配置参数 168
5.3.2　请求上下文 170
5.3.3　在create_request方法中构造请求 170
5.3.4　在process_header方法中解析包头 171
5.3.5　在finalize_request方法中释放资源 175
5.3.6　在ngx_http_mytest_handler方法中启动upstream 175
5.4　subrequest的使用方式 177
5.4.1　配置子请求的处理方式 177
5.4.2　实现子请求处理完毕时的回调方法 178
5.4.3　处理父请求被重新激活后的回调方法 179
5.4.4　启动subrequest子请求 179
5.5　subrequest执行过程中的主要场景 180
5.5.1　如何启动subrequest 180
5.5.2　如何转发多个子请求的响应包体 182
5.5.3　子请求如何激活父请求 185
5.6　subrequest使用的例子 187
5.6.1　配置文件中子请求的设置 187
5.6.2　请求上下文 188
5.6.3　子请求结束时的处理方法 188
5.6.4　父请求的回调方法 189
5.6.5　启动subrequest 190
5.7　小结 191
第6章　开发一个简单的HTTP过滤模块 192
6.1　过滤模块的意义 192
6.2　过滤模块的调用顺序 193
6.2.1　过滤链表是如何构成的 194
6.2.2　过滤链表的顺序 196
6.2.3　官方默认HTTP过滤模块的功能简介 197
6.3　HTTP过滤模块的开发步骤 198
6.4　HTTP过滤模块的简单例子 200
6.4.1　如何编写config文件 201
6.4.2　配置项和上下文 201
6.4.3　定义HTTP过滤模块 203
6.4.4　初始化HTTP过滤模块 204
6.4.5　处理请求中的HTTP头部 204
6.4.6　处理请求中的HTTP包体 206
6.5　小结 206
第7章　Nginx提供的高级数据结构 207
7.1　Nginx提供的高级数据结构概述 207
7.2　ngx_queue_t双向链表 209
7.2.1　为什么设计ngx_queue_t双向链表 209
7.2.2　双向链表的使用方法 209
7.2.3　使用双向链表排序的例子 212
7.2.4　双向链表是如何实现的 213
7.3　ngx_array_t动态数组 215
7.3.1　为什么设计ngx_array_t动态数组 215
7.3.2　动态数组的使用方法 215
7.3.3　 使用动态数组的例子 217
7.3.4　动态数组的扩容方式 218
7.4　ngx_list_t单向链表 219
7.5　ngx_rbtree_t红黑树 219
7.5.1　为什么设计ngx_rbtree_t红黑树 219
7.5.2　红黑树的特性 220
7.5.3　红黑树的使用方法 222
7.5.4　使用红黑树的简单例子 225
7.5.5　如何自定义添加成员方法 226
7.6　ngx_radix_tree_t基数树 228
7.6.1　ngx_radix_tree_t基数树的原理 228
7.6.2　基数树的使用方法 230
7.6.3　使用基数树的例子 231
7.7　支持通配符的散列表 232
7.7.1　ngx_hash_t基本散列表 232
7.7.2　支持通配符的散列表 235
7.7.3　带通配符散列表的使用例子 241
7.8　小结 245
第三部分　深入Nginx
第8章　Nginx基础架构 248
8.1　Web服务器设计中的关键约束 249
8.2　Nginx的架构设计 251
8.2.1　优秀的模块化设计 251
8.2.2　事件驱动架构 254
8.2.3　请求的多阶段异步处理 256
8.2.4　管理进程、多工作进程设计 259
8.2.5　平台无关的代码实现 259
8.2.6　内存池的设计 259
8.2.7　使用统一管道过滤器模式的HTTP过滤模块 260
8.2.8　其他一些用户模块 260
8.3　Nginx框架中的核心结构体ngx_cycle_t 260
8.3.1　ngx_listening_t结构体 261
8.3.2　ngx_cycle_t结构体 262
8.3.3　ngx_cycle_t支持的方法 264
8.4　Nginx启动时框架的处理流程 266
8.5　worker进程是如何工作的 269
8.6　master进程是如何工作的 271
8.7　ngx_pool_t内存池 276
8.8　小结 284
第9章　事件模块 285
9.1　事件处理框架概述 286
9.2　Nginx事件的定义 288
9.3　Nginx连接的定义 291
9.3.1　被动连接 292
9.3.2　主动连接 295
9.3.3　ngx_connection_t连接池 296
9.4　ngx_events_module核心模块 297
9.4.1　如何管理所有事件模块的配置项 299
9.4.2　管理事件模块 300
9.5　ngx_event_core_module事件模块 302
9.6　epoll事件驱动模块 308
9.6.1　epoll的原理和用法 308
9.6.2　如何使用epoll 310
9.6.3　ngx_epoll_module模块的实现 312
9.7　定时器事件 320
9.7.1　缓存时间的管理 320
9.7.2　缓存时间的精度 323
9.7.3　定时器的实现 323
9.8　事件驱动框架的处理流程 324
9.8.1　如何建立新连接 325
9.8.2　如何解决“惊群”问题 327
9.8.3　如何实现负载均衡 329
9.8.4　post事件队列 330
9.8.5　ngx_process_events_and_timers流程 331
9.9　文件的异步I/O 334
9.9.1　Linux内核提供的文件异步I/O 335
9.9.2　ngx_epoll_module模块中实现的针对文件的异步I/O 337
9.10　TCP协议与Nginx 342
9.11　小结 347
第10章　HTTP框架的初始化 348
10.1　HTTP框架概述 349
10.2　管理HTTP模块的配置项 352
10.2.1　管理main级别下的配置项 353
10.2.2　管理server级别下的配置项 355
10.2.3　管理location级别下的配置项 358
10.2.4　不同级别配置项的合并 364
10.3　监听端口的管理 367
10.4　server的快速检索 370
10.5　location的快速检索 370
10.6　HTTP请求的11个处理阶段 372
10.6.1　HTTP处理阶段的普适规则 374
10.6.2　NGX_HTTP_POST_READ_PHASE阶段 375
10.6.3　NGX_HTTP_SERVER_REWRITE_PHASE阶段 378
10.6.4　NGX_HTTP_FIND_CONFIG_PHASE阶段 378
10.6.5　NGX_HTTP_REWRITE_PHASE阶段 378
10.6.6　NGX_HTTP_POST_REWRITE_PHASE阶段 379
10.6.7　NGX_HTTP_PREACCESS_PHASE阶段 379
10.6.8　NGX_HTTP_ACCESS_PHASE阶段 379
10.6.9　NGX_HTTP_POST_ACCESS_PHASE阶段 380
10.6.10　NGX_HTTP_TRY_FILES_PHASE阶段 380
10.6.11　NGX_HTTP_CONTENT_PHASE阶段 380
10.6.12　NGX_HTTP_LOG_PHASE阶段 382
10.7　HTTP框架的初始化流程 382
10.8　小结 384
第11章　HTTP框架的执行流程 385
11.1　HTTP框架执行流程概述 386
11.2　新连接建立时的行为 387
11.3　第一次可读事件的处理 388
11.4　接收HTTP请求行 394
11.5　接收HTTP头部 398
11.6　处理HTTP请求 400
11.6.1　ngx_http_core_generic_phase 406
11.6.2　ngx_http_core_rewrite_phase 408
11.6.3　ngx_http_core_access_phase 409
11.6.4　ngx_http_core_content_phase 412
11.7　subrequest与post请求 415
11.8　处理HTTP包体 417
11.8.1　接收包体 419
11.8.2　放弃接收包体 425
11.9　发送HTTP响应 429
11.9.1　ngx_http_send_header 430
11.9.2　ngx_http_output_filter 432
11.9.3　ngx_http_writer 435
11.10　结束HTTP请求 437
11.10.1　ngx_http_close_connection 438
11.10.2　ngx_http_free_request 439
11.10.3　ngx_http_close_request 440
11.10.4　ngx_http_finalize_connection 441
11.10.5　ngx_http_terminate_request 443
11.10.6　ngx_http_finalize_request 443
11.11　小结 446
第12章　upstream机制的设计与实现 447
12.1　upstream机制概述 448
12.1.1　设计目的 448
12.1.2　ngx_http_upstream_t数据结构的意义 450
12.1.3　ngx_http_upstream_conf_t配置结构体 453
12.2　启动upstream 455
12.3　与上游服务器建立连接 457
12.4　发送请求到上游服务器 460
12.5　接收上游服务器的响应头部 463
12.5.1　应用层协议的两段划分方式 463
12.5.2　处理包体的3种方式 464
12.5.3　接收响应头部的流程 465
12.6　不转发响应时的处理流程 469
12.6.1　input_filter方法的设计 469
12.6.2　默认的input_filter方法 470
12.6.3　接收包体的流程 472
12.7　以下游网速优先来转发响应 473
12.7.1　转发响应的包头 474
12.7.2　转发响应的包体 477
12.8　以上游网速优先来转发响应 481
12.8.1　ngx_event_pipe_t结构体的意义 481
12.8.2　转发响应的包头 485
12.8.3　转发响应的包体 487
12.8.4　ngx_event_pipe_read_upstream方法 489
12.8.5　ngx_event_pipe_write_to_downstream方法 494
12.9　结束upstream请求 496
12.10　小结 499
第13章　邮件代理模块 500
13.1　邮件代理服务器的功能 500
13.2　邮件模块的处理框架 503
13.2.1　一个请求的8个独立处理阶段 503
13.2.2　邮件类模块的定义 504
13.2.3　邮件框架的初始化 506
13.3　初始化请求 506
13.3.1　描述邮件请求的ngx_mail_session_t结构体 506
13.3.2　初始化邮件请求的流程 509
13.4　接收并解析客户端请求 509
13.5　邮件认证 510
13.5.1　ngx_mail_auth_http_ctx_t结构体 510
13.5.2　与认证服务器建立连接 511
13.5.3　发送请求到认证服务器 513
13.5.4　接收并解析响应 514
13.6　与上游邮件服务器间的认证交互 514
13.6.1　ngx_mail_proxy_ctx_t结构体 516
13.6.2　向上游邮件服务器发起连接 516
13.6.3　与邮件服务器认证交互的过程 518
13.7　透传上游邮件服务器与客户端间的流 520
13.8　小结 524
第14章　进程间的通信机制 525
14.1　概述 525
14.2　共享内存 526
14.3　原子操作 530
14.3.1　不支持原子库下的原子操作 530
14.3.2　x86架构下的原子操作 531
14.3.3　自旋锁 533
14.4　Nginx频道 535
14.5　信号 538
14.6　信号量 540
14.7　文件锁 541
14.8　互斥锁 544
14.8.1　文件锁实现的ngx_shmtx_t锁 546
14.8.2　原子变量实现的ngx_shmtx_t锁 548
14.9　小结 553
第15章　变量 554
15.1　使用内部变量开发模块 555
15.1.1　定义模块 556
15.1.2　定义http模块加载方式 557
15.1.3　解析配置中的变量 558
15.1.4　处理请求 560
15.2　内部变量工作原理 561
15.2.1　何时定义变量 561
15.2.2　相关数据结构详述 564
15.2.3　定义变量的方法 572
15.2.4　使用变量的方法 572
15.2.5　如何解析变量 573
15.3　定义内部变量 576
15.4　外部变量与脚本引擎 577
15.4.1　相关数据结构 578
15.4.2　编译“set”脚本 581
15.4.3　脚本执行流程 586
15.5　小结 589
第16章　slab共享内存 590
16.1　操作slab共享内存的方法 590
16.2　使用slab共享内存池的例子 592
16.2.1　共享内存中的数据结构 593
16.2.2　操作共享内存中的红黑树与链表 595
16.2.3　解析配置文件 600
16.2.4　定义模块 603
16.3　slab内存管理的实现原理 605
16.3.1　内存结构布局 607
16.3.2　分配内存流程 613
16.3.3　释放内存流程 617
16.3.4　如何使用位操作 619
16.3.5　slab内存池间的管理 624
16.4　小结 624
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>深入理解Nginx（第2版）
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>深入理解Nginx
前　言
第一部分　Nginx能帮我们做什么
第1章　研究Nginx前的准备工作 / 2
1.1　Nginx是什么 / 2
1.2　为什么选择Nginx / 4
1.3　准备工作 / 7
1.3.1　Linux操作系统 / 7
1.3.2　使用Nginx的必备软件 / 7
1.3.3　磁盘目录 / 8
1.3.4　Linux内核参数的优化 / 9
1.3.5　获取Nginx源码 / 11
1.4　编译安装Nginx / 11
1.5　configure详解 / 11
1.5.1　configure的命令参数 / 12
1.5.2　configure执行流程 / 18
1.5.3　configure生成的文件 / 22
1.6　Nginx的命令行控制 / 24
1.7　小结 / 27
第2章　Nginx的配置 / 28
2.1　运行中的Nginx进程间的关系 / 28
2.2　Nginx配置的通用语法 / 31
2.2.1　块配置项 / 31
2.2.2　配置项的语法格式 / 32
2.2.3　配置项的注释 / 33
2.2.4　配置项的单位 / 33
2.2.5　在配置中使用变量 / 33
2.3　Nginx服务的基本配置 / 34
2.3.1　用于调试进程和定位问题的配置项 / 34
2.3.2　正常运行的配置项 / 36
2.3.3　优化性能的配置项 / 38
2.3.4　事件类配置项 / 39
2.4　用HTTP核心模块配置一个静态Web服务器 / 41
2.4.1　虚拟主机与请求的分发 / 42
2.4.2　文件路径的定义 / 45
2.4.3　内存及磁盘资源的分配 / 48
2.4.4　网络连接的设置 / 50
2.4.5　MIME类型的设置 / 53
2.4.6　对客户端请求的限制 / 54
2.4.7　文件操作的优化 / 55
2.4.8　对客户端请求的特殊处理 / 57
2.4.9　ngx_http_core_module模块提供的变量 / 59
2.5　用HTTP proxy module配置一个反向代理服务器 / 60
2.5.1　负载均衡的基本配置 / 62
2.5.2　反向代理的基本配置 / 64
2.6　小结 / 68
第二部分　如何编写HTTP模块
第3章　开发一个简单的HTTP模块 / 70
3.1　如何调用HTTP模块 / 70
3.2　准备工作 / 72
3.2.1　整型的封装 / 72
3.2.2　ngx_str_t数据结构 / 73
3.2.3　ngx_list_t数据结构 / 73
3.2.4　ngx_table_elt_t数据结构 / 77
3.2.5　ngx_buf_t数据结构 / 77
3.2.6　ngx_chain_t数据结构 / 79
3.3　如何将自己的HTTP模块编译进Nginx / 79
3.3.1　config文件的写法 / 80
3.3.2　利用configure脚本将定制的模块加入到Nginx中 / 80
3.3.3　直接修改Makefile文件 / 84
3.4　HTTP模块的数据结构 / 85
3.5　定义自己的HTTP模块 / 88
3.6　处理用户请求 / 92
3.6.1　处理方法的返回值 / 92
3.6.2　获取URI和参数 / 95
3.6.3　获取HTTP头部 / 98
3.6.4　获取HTTP包体 / 101
3.7　发送响应 / 102
3.7.1　发送HTTP头部 / 102
3.7.2　将内存中的字符串作为包体发送 / 104
3.7.3　经典的“Hello World”示例 / 106
3.8　将磁盘文件作为包体发送 / 107
3.8.1　如何发送磁盘中的文件 / 107
3.8.2　清理文件句柄 / 110
3.8.3　支持用户多线程下载和断点续传 / 111
3.9　用C++语言编写HTTP模块 / 112
3.9.1　编译方式的修改 / 112
3.9.2　程序中的符号转换 / 114
3.10　小结 / 114
第4章　配置、error日志和请求上下文 / 115
4.1　http配置项的使用场景 / 115
4.2　怎样使用http配置 / 117
4.2.1　分配用于保存配置参数的数据结构 / 117
4.2.2　设定配置项的解析方式 / 119
4.2.3　使用14种预设方法解析配置项 / 125
4.2.4　自定义配置项处理方法 / 136
4.2.5　合并配置项 / 137
4.3　HTTP配置模型 / 140
4.3.1　解析HTTP配置的流程 / 141
4.3.2　HTTP配置模型的内存布局 / 144
4.3.3　如何合并配置项 / 147
4.3.4　预设配置项处理方法的工作原理 / 149
4.4　error日志的用法 / 150
4.5　请求的上下文 / 155
4.5.1　上下文与全异步Web服务器的关系 / 155
4.5.2　如何使用HTTP上下文 / 156
4.5.3　HTTP框架如何维护上下文结构 / 157
4.6　小结 / 158
第5章　访问第三方服务 / 159
5.1　upstream的使用方式 / 160
5.1.1　ngx_http_upstream_t结构体 / 163
5.1.2　设置upstream的限制性参数 / 164
5.1.3　设置需要访问的第三方服务器地址 / 165
5.1.4　设置回调方法 / 166
5.1.5　如何启动upstream机制 / 166
5.2　回调方法的执行场景 / 167
5.2.1　create_request回调方法 / 167
5.2.2　reinit_request回调方法 / 169
5.2.3　finalize_request回调方法 / 170
5.2.4　process_header回调方法 / 171
5.2.5　rewrite_redirect回调方法 / 172
5.2.6　input_filter_init与input_filter回调方法 / 172
5.3　使用upstream的示例 / 173
5.3.1　upstream的各种配置参数 / 174
5.3.2　请求上下文 / 175
5.3.3　在create_request方法中构造请求 / 176
5.3.4　在process_header方法中解析包头 / 177
5.3.5　在finalize_request方法中释放资源 / 180
5.3.6　在ngx_http_mytest_handler方法中启动upstream / 181
5.4　subrequest的使用方式 / 183
5.4.1　配置子请求的处理方式 / 183
5.4.2　实现子请求处理完毕时的回调方法 / 184
5.4.3　处理父请求被重新激活后的回调方法 / 185
5.4.4　启动subrequest子请求 / 185
5.5　subrequest执行过程中的主要场景 / 186
5.5.1　如何启动subrequest / 186
5.5.2　如何转发多个子请求的响应包体 / 188
5.5.3　子请求如何激活父请求 / 192
5.6　subrequest使用的例子 / 193
5.6.1　配置文件中子请求的设置 / 194
5.6.2　请求上下文 / 194
5.6.3　子请求结束时的处理方法 / 195
5.6.4　父请求的回调方法 / 196
5.6.5　启动subrequest / 197
5.7　小结 / 198
第6章　开发一个简单的HTTP过滤模块 / 199
6.1　过滤模块的意义 / 199
6.2　过滤模块的调用顺序 / 200
6.2.1　过滤链表是如何构成的 / 200
6.2.2　过滤链表的顺序 / 203
6.2.3　官方默认HTTP过滤模块的功能简介 / 204
6.3　HTTP过滤模块的开发步骤 / 206
6.4　HTTP过滤模块的简单例子 / 207
6.4.1　如何编写config文件 / 208
6.4.2　配置项和上下文 / 208
6.4.3　定义HTTP过滤模块 / 210
6.4.4　初始化HTTP过滤模块 / 211
6.4.5　处理请求中的HTTP头部 / 212
6.4.6　处理请求中的HTTP包体 / 213
6.5　小结 / 214
第7章　Nginx提供的高级数据结构 / 215
7.1　Nginx提供的高级数据结构概述 / 215
7.2　ngx_queue_t双向链表 / 217
7.2.1　为什么设计ngx_queue_t双向链表 / 217
7.2.2　双向链表的使用方法 / 217
7.2.3　使用双向链表排序的例子 / 219
7.2.4　双向链表是如何实现的 / 221
7.3　ngx_array_t动态数组 / 222
7.3.1　为什么设计ngx_array_t动态数组 / 223
7.3.2　动态数组的使用方法 / 223
7.3.3　 使用动态数组的例子 / 225
7.3.4　动态数组的扩容方式 / 226
7.4　ngx_list_t单向链表 / 226
7.5　ngx_rbtree_t红黑树 / 227
7.5.1　为什么设计ngx_rbtree_t红黑树 / 227
7.5.2　红黑树的特性 / 228
7.5.3　红黑树的使用方法 / 230
7.5.4　使用红黑树的简单例子 / 233
7.5.5　如何自定义添加成员方法 / 234
7.6　ngx_radix_tree_t基数树 / 236
7.6.1　ngx_radix_tree_t基数树的原理 / 236
7.6.2　基数树的使用方法 / 238
7.6.3　使用基数树的例子 / 239
7.7　支持通配符的散列表 / 240
7.7.1　ngx_hash_t基本散列表 / 240
7.7.2　支持通配符的散列表 / 243
7.7.3　带通配符散列表的使用例子 / 250
7.8　小结 / 254
第三部分　深入Nginx
第8章　Nginx基础架构 / 256
8.1　Web服务器设计中的关键约束 / 256
8.2　Nginx的架构设计 / 259
8.2.1　优秀的模块化设计 / 259
8.2.2　事件驱动架构 / 263
8.2.3　请求的多阶段异步处理 / 264
8.2.4　管理进程、多工作进程设计 / 267
8.2.5　平台无关的代码实现 / 268
8.2.6　内存池的设计 / 268
8.2.7　使用统一管道过滤器模式的HTTP过滤模块 / 268
8.2.8　其他一些用户模块 / 269
8.3　Nginx框架中的核心结构体ngx_cycle_t / 269
8.3.1　ngx_listening_t结构体 / 269
8.3.2　ngx_cycle_t结构体 / 271
8.3.3　ngx_cycle_t支持的方法 / 273
8.4　Nginx启动时框架的处理流程 / 275
8.5　worker进程是如何工作的 / 278
8.6　master进程是如何工作的 / 281
8.7　小结 / 286
第9章　事件模块 / 287
9.1　事件处理框架概述 / 287
9.2　Nginx事件的定义 / 290
9.3　Nginx连接的定义 / 293
9.3.1　被动连接 / 294
9.3.2　主动连接 / 297
9.3.3　ngx_connection_t连接池 / 298
9.4　ngx_events_module核心模块 / 300
9.4.1　如何管理所有事件模块的配置项 / 301
9.4.2　管理事件模块 / 303
9.5　ngx_event_core_module事件模块 / 305
9.6　epoll事件驱动模块 / 310
9.6.1　epoll的原理和用法 / 311
9.6.2　如何使用epoll / 313
9.6.3　ngx_epoll_module模块的实现 / 315
9.7　定时器事件 / 323
9.7.1　缓存时间的管理 / 324
9.7.2　缓存时间的精度 / 326
9.7.3　定时器的实现 / 327
9.8　事件驱动框架的处理流程 / 328
9.8.1　如何建立新连接 / 329
9.8.2　如何解决“惊群”问题 / 330
9.8.3　如何实现负载均衡 / 333
9.8.4　post事件队列 / 334
9.8.5　ngx_process_events_and_timers流程 / 335
9.9　文件的异步I/O / 338
9.9.1　Linux内核提供的文件异步I/O / 339
9.9.2　ngx_epoll_module模块中实现的针对文件的异步I/O / 342
9.10　小结 / 346
第10章　HTTP框架的初始化 / 347
10.1　HTTP框架概述 / 348
10.2　管理HTTP模块的配置项 / 351
10.2.1　管理main级别下的配置项 / 352
10.2.2　管理server级别下的配置项 / 354
10.2.3　管理location级别下的配置项 / 357
10.2.4　不同级别配置项的合并 / 362
10.3　监听端口的管理 / 367
10.4　server的快速检索 / 369
10.5　location的快速检索 / 371
10.6　HTTP请求的11个处理阶段 / 372
10.6.1　HTTP处理阶段的普适规则 / 374
10.6.2　NGX_HTTP_POST_READ_PHASE阶段 / 376
10.6.3　NGX_HTTP_SERVER_REWRITE_PHASE阶段 / 378
10.6.4　NGX_HTTP_FIND_CONFIG_PHASE阶段 / 379
10.6.5　NGX_HTTP_REWRITE_PHASE阶段 / 379
10.6.6　NGX_HTTP_POST_REWRITE_PHASE阶段 / 379
10.6.7　NGX_HTTP_PREACCESS_PHASE阶段 / 379
10.6.8　NGX_HTTP_ACCESS_PHASE阶段 / 380
10.6.9　NGX_HTTP_POST_ACCESS_PHASE阶段 / 380
10.6.10　NGX_HTTP_TRY_FILES_PHASE阶段 / 381
10.6.11　NGX_HTTP_CONTENT_PHASE阶段 / 381
10.6.12　NGX_HTTP_LOG_PHASE阶段 / 382
10.7　HTTP框架的初始化流程 / 383
10.8　小结 / 385
第11章　HTTP框架的执行流程 / 386
11.1　HTTP框架执行流程概述 / 387
11.2　新连接建立时的行为 / 388
11.3　第一次可读事件的处理 / 390
11.4　接收HTTP请求行 / 396
11.5　接收HTTP头部 / 399
11.6　处理HTTP请求 / 403
11.6.1　ngx_http_core_generic_phase / 409
11.6.2　ngx_http_core_rewrite_phase / 411
11.6.3　ngx_http_core_access_phase / 412
11.6.4　ngx_http_core_content_phase / 415
11.7　subrequest与post请求 / 419
11.8　处理HTTP包体 / 421
11.8.1　接收包体 / 422
11.8.2　放弃接收包体 / 429
11.9　发送HTTP响应 / 433
11.9.1　ngx_http_send_header / 434
11.9.2　ngx_http_output_filter / 436
11.9.3　ngx_http_writer / 440
11.10　结束HTTP请求 / 442
11.10.1　ngx_http_close_connection / 443
11.10.2　ngx_http_free_request / 444
11.10.3　ngx_http_close_request / 446
11.10.4　ngx_http_finalize_connection / 447
11.10.5　ngx_http_terminate_request / 447
11.10.6　ngx_http_finalize_request / 448
11.11　小结 / 452
第12章　upstream机制的设计与实现 / 453
12.1　upstream机制概述 / 453
12.1.1　设计目的 / 454
12.1.2　ngx_http_upstream_t数据结构的意义 / 456
12.1.3　ngx_http_upstream_conf_t配置结构体 / 459
12.2　启动upstream / 462
12.3　与上游服务器建立连接 / 464
12.4　发送请求到上游服务器 / 467
12.5　接收上游服务器的响应头部 / 470
12.5.1　应用层协议的两段划分方式 / 470
12.5.2　处理包体的3种方式 / 471
12.5.3　接收响应头部的流程 / 473
12.6　不转发响应时的处理流程 / 476
12.6.1　input_filter方法的设计 / 477
12.6.2　默认的input_filter方法 / 478
12.6.3　接收包体的流程 / 479
12.7　以下游网速优先来转发响应 / 481
12.7.1　转发响应的包头 / 482
12.7.2　转发响应的包体 / 484
12.8　以上游网速优先来转发响应 / 489
12.8.1　ngx_event_pipe_t结构体的意义 / 489
12.8.2　转发响应的包头 / 493
12.8.3　转发响应的包体 / 495
12.8.4　ngx_event_pipe_read_upstream方法 / 498
12.8.5　ngx_event_pipe_write_to_downstream方法 / 502
12.9　结束upstream请求 / 504
12.10　小结 / 508
第13章　邮件代理模块 / 509
13.1　邮件代理服务器的功能 / 509
13.2　邮件模块的处理框架 / 512
13.2.1　一个请求的8个独立处理阶段 / 512
13.2.2　邮件类模块的定义 / 514
13.2.3　邮件框架的初始化 / 516
13.3　初始化请求 / 517
13.3.1　描述邮件请求的ngx_mail_session_t结构体 / 517
13.3.2　初始化邮件请求的流程 / 519
13.4　接收并解析客户端请求 / 520
13.5　邮件认证 / 520
13.5.1　ngx_mail_auth_http_ctx_t结构体 / 520
13.5.2　与认证服务器建立连接 / 522
13.5.3　发送请求到认证服务器 / 522
13.5.4　接收并解析响应 / 525
13.6　与上游邮件服务器间的认证交互 / 526
13.6.1　ngx_mail_proxy_ctx_t结构体 / 526
13.6.2　向上游邮件服务器发起连接 / 527
13.6.3　与邮件服务器认证交互的过程 / 528
13.7　透传上游邮件服务器与客户端间的流 / 530
13.8　小结 / 535
第14章　进程间的通信机制 / 536
14.1　概述 / 536
14.2　共享内存 / 536
14.3　原子操作 / 541
14.3.1　不支持原子库下的原子操作 / 541
14.3.2　x86架构下的原子操作 / 542
14.3.3　自旋锁 / 545
14.4　Nginx频道 / 546
14.5　信号 / 549
14.6　信号量 / 551
14.7　文件锁 / 553
14.8　互斥锁 / 556
14.8.1　文件锁实现的ngx_shmtx_t锁 / 558
14.8.2　原子变量实现的ngx_shmtx_t锁 / 560
14.9　小结 / 565
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>深入理解Nginx
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>实战Nginx
第1部分 基础篇
第1章 Nginx简介
1.1 常用的Web服务器简介
1.2 Nginx简介
1.3 选择Nginx的理由
1.4 Nginx与Apache、Lighttpd的综合对比
第2章 Nginx服务器的安装与配置
2.1 安装Nginx服务器所需要的系统资源
2.2 Nginx的下载
2.3 Nginx的安装
2.4 Nginx的启动、停止、平滑重启
2.5 Nginx的平滑重启
2.6 Nginx的信号控制
2.7 Nginx的平滑升级
第2部分 进阶篇
第3章 Nginx的基本配置与优化
3.1 Nginx的完整配置示例
3.2 Nginx的虚拟主机配置
3.3 Nginx的日志文件配置与切割
3.4 Nginx的压缩输出配置
3.5 Nginx的自动列目录配置
3.6 Nginx的浏览器本地缓存设置
第4章 Nginx与PHP（FastCGI）的安装、配置与优化
4.1 获取相关开源程序
4.2 安装PHP 5.2.10（FastCGI模式）
4.3 安装Nginx 0.8.15
4.4 配置开机自动启动Nginx + PHP
4.5 优化Linux内核参数
4.6 在不停止Nginx服务的情况下平滑变更Nginx配置
4.7 编写每天定时切割Nginx日志的脚本
第5章 Nginx与JSP、ASP.NET、Perl的安装与配置
5.1 Nginx与JSP（Tomcat）在Linux上的安装、配置
5.2 Nginx与ASP.NET（Mono+FastCGI）在Linux上的安装、配置
5.3 Nginx与Perl（FastCGI）在Linux上的安装、配置
第6章 Nginx HTTP负载均衡和反向代理的配置与优化
6.1 什么是负载均衡和反向代理
6.2 常见的Web负载均衡方法
6.3 Nginx负载均衡与反向代理的配置实例
6.4 Nginx负载均衡的HTTP Upstream 模块
6.5 Nginx负载均衡服务器的双机高可用
第7章 Nginx的Rewrite规则编写实例
7.1 什么是Nginx的Rewrite规则
7.2 Nginx Rewrite规则相关指令
7.3 PCRE正则表达式语法
7.4 Nginx的Rewrite规则编写实例
7.5 Nginx与Apache的Rewrite规则实例对比
第8章 Nginx模块开发
8.1 Nginx模块概述
8.2 Nginx模块编写实践
第9章 Nginx的Web缓存服务与新浪网的开源NCACHE模块
9.1 什么是Web缓存？
9.2 Nginx的Web缓存服务
9.3 新浪网开源软件项目——基于Nginx的NCache网页缓存系统
第3部分 实战篇
第10章 Nginx在国内知名网站中的应用案例
10.1 Nginx反向代理与负载均衡类网站应用案例
10.2 Nginx+PHP类网站应用案例
第11章 Nginx的非典型应用实例
11.1 用HTTPS（SSL）构建一个安全的Nginx Web服务器
11.2 采用Nginx搭建FLV视频服务器
11.3 Nginx+PHP+MySQL在小内存VPS服务器上的优化
11.4 采用Nginx搭建正向代理服务器
第4部分 模块篇
第12章 Nginx的核心模块
12.1 主模块指令
12.2 主模块变量
12.3 事件模块指令
第13章 Nginx的标准HTTP模块
13.1 HTTP的核心模块
13.2 HTTP Upstream模块
13.3 Http Access 模块
13.4 HTTP Auth Basic 模块
13.5 Http Autoindex 模块
13.6 Http Browser 模块
13.7 Http Charset 模块
13.8 Http Empty Gif模块
13.9 Http Fcgi 模块
13.10 geo 模块
13.11 Gzip 模块
13.12 Http Headers模块
13.13 Http Index模块
13.14 HTTP Referer模块
13.15 Http Limit Zone模块
13.16 Http Limit Req模块
13.17 Http Log模块
13.18 Http Map模块
13.19 Http Memcached模块
13.20 Http Proxy模块
第14章 Nginx的其他HTTP模块
14.1 Http Addition模块
14.2 Embedded Perl模块
14.3 Flv Stream模块
14.3 flv 指令
14.4 Http Gzip Static模块
14.5 Http Random Index模块
14.6 Http Geo IP模块
14.7 Http RealIp模块
14.8 Http SSL模块
14.9 Http Stub Status模块
14.10 Http Sub模块
14.11 Http Dav模块
14.12 Google Perftools模块
14.13 Http XSLT模块
14.14 Http Secure Link模块
14.15 Http Image Filter模块
第15章 Nginx的邮件模块
15.1 Nginx邮件核心模块
15.2 Nginx邮件认证模块
15.3 Nginx邮件代理模块
15.4 Nginx邮件SSL模块
15.5 Nginx邮件模块配置实例
索引
参考资料
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>实战Nginx
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>深入剖析Nginx
目　录
第1章　源码分析的准备工作	1
1.1　主要特性	1
1.2　源码下载	4
1.3　源码目录结构	5
1.4　源码分析工具	6
1.5　测试辅助工具	7
1.6　编译与执行	8
1.7　其他准备	9
第2章　跟踪与调试	10
2.1　利用gdb调试	10
2.1.1　绑定Nginx到gdb	10
2.1.2　gdb的watch指令	13
2.1.3　Nginx对gdb的支持	14
2.1.4　宏	16
2.1.5　cgdb	18
2.2　利用日志信息跟踪Nginx	19
2.3　利用strace/pstack调试Nginx	21
2.4　获得Nginx程序完整执行流程	23
2.5　加桩调试	29
2.6　特殊应用逻辑的调试	31
第3章　进程模型	35
3.1　整体架构	35
3.2　核心进程模型	36
3.2.1　监控进程	36
3.2.2　工作进程	38
3.3　Cache进程模型	38
3.3.1　Cache管理进程	40
3.3.2　Cache加载进程	42
3.4　进程通信	43
3.5　共享内存	46
3.6　slab机制	50
3.7　信号处理	59
3.7.1　准备工作	60
3.7.2　设置生效	61
3.7.3　处理实例	62
第4章　数据结构	65
4.1　内存池	65
4.2　Hash	72
4.3　Radix tree	77
第5章　配置解析	81
5.1　配置文件格式	81
5.2　配置项目解析准备	84
5.3　配置文件解析流程	86
5.4　配置信息组织结构	95
5.5　配置信息的继承	108
第6章　模块综述	113
6.1　Handler模块	116
6.2　Filter模块	124
6.3　Upstream模块	127
6.4　Load-balance模块	132
第7章　事件管理机制	134
7.1　I/O多路复用模型	134
7.2　epoll模型	138
7.3　事件处理	144
7.4　负载均衡	146
7.4.1　客户端请求均衡	146
7.4.2　多核绑定	152
7.5　超时管理	153
第8章　变量机制	160
8.1　初识变量	160
8.2　支撑机制	163
8.3　脚本引擎	174
8.4　执行顺序	180
第9章　请求处理与响应	182
9.1　创建监听套接口	182
9.2　创建连接套接口	188
9.3　请求处理	191
9.4　数据响应	197
9.5　子请求	201
9.6　连接关闭	214
9.6.1　keepalive机制	217
9.6.2　延迟关闭机制	221
第10章　请求定位	228
10.1　Location的生成	228
10.2　Location的整理	232
10.3　Server的定位	239
10.4　Location的定位与使用	242
10.5　未命名location的使用	244
10.6　try_files指令	248
第11章　动态页面请求处理	252
11.1　测试环境	252
11.2　客户端发起Php请求	255
11.3　请求转发	259
11.3.1　建立连接	261
11.3.2　发送请求数据	265
11.4　数据响应	267
11.4.1　接收并处理Fastcgi响应头	267
11.4.2　接收并发送Fastcgi响应体	273
第12章　过滤模块	283
12.1　ngx_http_not_modified_filter_module	283
12.1.1　304状态码	283
12.1.2　412状态码	285
12.2　ngx_http_headers_filter_module	288
12.2.1　HTTP缓存功能的扩展	289
12.2.2　增加自定义响应头	290
12.3　ngx_http_gzip_filter_module	291
12.4　ngx_http_range_filter_module	293
第13章　负载均衡	299
13.1　负载均衡策略	300
13.2　加权轮询	301
13.2.1　准备工作	301
13.2.2　选择后端服务器	304
13.2.3　后端服务器权值计算	307
13.2.4　释放后端服务器	307
13.3　IP哈希	310
选择后端服务器	310
13.4　两种策略对比	313
第14章　访问控制	315
14.1　禁止指定IP访问	315
14.2　密码认证访问	318
14.3　其他访问控制措施	327
14.3.1　禁止用户通过IP地址访问服务器	327
14.3.2　禁止对某目录或某类文件的访问	327
附录A	329
附录B	332
附录C	333
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>深入剖析Nginx
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>学习Nginx HTTP Server中文版
目录
前言 1
第1章 准备工作环境 7
设置终端仿真器 7
查找并下载PuTTY 8
建立会话 8
使用PuTTY和shell 10
基本的shell命令 11
文件和目录管理 11
用户和组管理 15
程序和进程 18
了解Linux文件系统 22
目录结构 22
特殊文件和设备 25
文件和inode 28
EXT3文件系统 29
文件处理 32
系统管理工具 37
以超级管理员身份运行
命令 37
系统检查和维护 39
软件包 40
文件和权限 43
小结 46
第2章 下载和安装Nginx 47
准备先决条件 47
GCC——GNU编译器集合 48
PCRE库 49
zlib 库 50
OpenSSL 50
下载Nginx 51
网站和资源 51
版本分支 52
功能 53
下载并解压 54
配置选项 55
容易的方法 55
路径选项 56
先决条件选项 58
模块选项 59
杂项 61
配置举例 62
普通的HTTP和HTTPS服务器 67
建立配置的问题 65
编译和安装 66
控制Nginx 服务 67
守护进程和服务 67
用户和组 68
Nginx命令行开关项 68
启动和停止守护进程 69
测试配置文件 69
其他开关选项 70
添加Nginx作为系统服务 71
System V 脚本 71
什么是init脚本? 73
为Nginx建立init脚本 73
安装Nginx的init脚本 75
小结 77
第3章 Nginx的基本配置 79
配置文件的语法 79
配置指令 80
组织和包含 81
指令块 83
高级语言规则 84
基本模块指令 86
什么是基本模块? 87
Nginx 进程结构 87
核心模块指令 88
Events模块 93
Configuration模块 95
适合你需求的配置文件 95
理解默认的配置文件 95
必要的调整 96
适当选择硬件 97
测试服务器 99
建立测试服务器 99
性能测试 100
平滑升级Nginx 105
小结 106
第4章 HTTP配置 107
HTTP核心模块 107
区段的结构 108
模块指令 109
套接字和主机的配置 110
路径和文档 114
客户端请求 117
MIME 类型 121
限制和约束 123
文件处理和缓存 125
其他指令 127
模块变量 130
请求头 130
响应头 131
Nginx产生的变量 132
Location区段 133
Location修饰符 133
查找顺序和优先级 136
小结 139
第5章 模块配置 141
Rewrite模块 141
正则表达式 142
内部请求 146
条件结构 151
指令 153
通用重写规则 156
SSI模块 157
模块指令和变量 158
SSI命令 160
其他模块 164
站点访问和日志记录 164
限制和约束 168
内容和编码 170
与访问者相关的模块 179
SSL和安全 184
其他杂项模块 187
第三方模块 189
小结 190
第6章 Nginx与PHP、
Python 191
FastCGI入门 192
理解Web服务的机制 192
CGI通用网关接口 193
FastCGI 194
主要指令 195
FastCGI缓存 201
Upstream块 204
Nginx＋PHP 207
结构 207
PHP-FPM 208
设置PHP和PHP-FPM 208
Nginx 配置 211
Nginx与Python 212
Django 212
设置Python 和 Django 213
Nginx的配置文件 215
小结 215
第7章 Nginx和Apache 217
Nginx作为反向代理 217
理解问题根源 218
反向代理机制 219
优势和劣势 220
Nginx代理模块 221
主要指令 222
配置Apache和Nginx 230
重新配置Apache 231
配置 Nginx 233
高级配置 237
其他步骤 238
转发正确的IP地址 238
SSL问题及解决方案 239
服务器面板控制问题 239
小结 240
第8章 从Apache到Nginx 241
Nginx对Apache 241
特征 242
灵活性和团队 244
性能 244
使用 245
结论 246
移植Apache配置 246
指令 246
模块 249
虚拟主机和配置部分 250
.htaccess文件 254
重写规则 257
一般意见 257
WordPress 259
MediaWiki 261
vBulletin 262
小结 263
附录A 指令索引 265
附录B 模块参考 287
附录C 疑难解答 299
索引 305
译者注 329
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>学习Nginx HTTP Server中文版
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Nginx高性能Web服务器详解
第1章  Nginx初探	1
1.1  Nginx的历史	1
1.2  常见服务器产品介绍	2
1.2.1  Apache服务器	2
1.2.2  Microsoft IIS	3
1.2.3  Tomcat服务器	3
1.2.4  Lighttpd服务器	4
1.2.5  Nginx诞生记	4
1.2.6  版本变更大事记	5
1.3  Nginx的功能特性	5
1.3.1  基本HTTP服务	6
1.3.2  高级HTTP服务	6
1.3.3  邮件代理服务	7
1.4  常用功能介绍	7
1.4.1  HTTP代理和反向代理	7
1.4.2  负载均衡	7
1.4.3  Web缓存	8
1.5  本章小结	9
第2章  Nginx服务器的安装部署	10
2.1  如何获取Nginx服务器安装文件	10
2.1.1  获取新版本的Nginx服务器	11
2.1.2  获取Nginx服务器的历史版本	11
2.2  安装Nginx服务器和基本配置	12
2.2.1  Windows版本的安装	12
2.2.2  Linux版本的编译和安装：准备工作	13
2.2.3  Linux版本的编译和安装：Nginx软件的自动脚本	14
2.2.4  Linux版本的编译和安装：Nginx源代码的编译和安装	18
2.3  Nginx服务的启停控制	21
2.3.1  Nginx服务的信号控制	21
2.3.2  Nginx服务的启动	22
2.3.3  Nginx服务的停止	23
2.3.4  Nginx服务的重启	23
2.3.5  Nginx服务器的升级	24
2.4  Nginx服务器基础配置指令	24
2.4.1  nginx.conf文件的结构	25
2.4.2  配置运行Nginx服务器用户（组）	28
2.4.3  配置允许生成的worker process数	28
2.4.4  配置Nginx进程PID存放路径	29
2.4.5  配置错误日志的存放路径	29
2.4.6  配置文件的引入	30
2.4.7  设置网络连接的序列化	30
2.4.8  设置是否允许同时接收多个网络连接	30
2.4.9  事件驱动模型的选择	30
2.4.10 配置最大连接数	31
2.4.11 定义MIME-Type	31
2.4.12 自定义服务日志	32
2.4.13 配置允许sendfile方式传输文件	33
2.4.14 配置连接超时时间	33
2.4.15 单连接请求数上限	34
2.4.16 配置网络监听	34
2.4.17 基于名称的虚拟主机配置	35
2.4.18 基于IP的虚拟主机配置	36
2.4.19 配置location块	38
2.4.20 配置请求的根目录	39
2.4.21 更改location的URI	39
2.4.22 设置网站的默认首页	40
2.4.23 设置网站的错误页面	40
2.4.24 基于IP配置Nginx的访问权限	42
2.4.25 基于密码配置Nginx的访问权限	43
2.5  Nginx服务器基础配置实例	43
2.5.1  测试myServer1的访问	46
2.5.2  测试myServer2的访问	46
2.6  本章小结	47
第3章  Nginx服务器架构初探	48
3.1  模块化结构	48
3.1.1  什么是“模块化设计”	48
3.1.2  Nginx模块化结构	49
3.2  Nginx服务器的Web请求处理机制	54
3.2.1  多进程方式	54
3.2.2  多线程方式	55
3.2.3  异步方式	55
3.2.4  Nginx服务器如何处理请求	56
3.2.5  Nginx服务器的事件处理机制	57
3.3  Nginx服务器的事件驱动模型	57
3.3.1  事件驱动模型概述	57
3.3.2  Nginx中的事件驱动模型	58
3.3.3  select库	59
3.3.4  poll库	59
3.3.5  epoll库	60
3.3.6  rtsig模型	60
3.3.7  其他事件驱动模型	61
3.4  设计架构概览	61
3.4.1  Nginx服务器架构	62
3.4.2  Nginx服务器的进程	63
3.4.3  进程交互	64
3.4.4  Run Loops事件处理循环模型	64
3.5  本章小结	65
第4章  Nginx服务器的高级配置	67
4.1  针对IPv4的内核7个参数的配置优化	67
4.2  针对CPU的Nginx配置优化的2个指令	68
4.3  与网络连接相关的配置的4个指令	70
4.4  与事件驱动模型相关的配置的8个指令	71
4.5  本章小结	73
第5章  Nginx服务器的Gzip压缩	74
5.1  由ngx_http_gzip_module模块处理的9个指令	74
5.2  由ngx_http_gzip_static_module模块处理的指令	78
5.3  由ngx_http_gunzip_module模块处理的2个指令	79
5.4  Gzip压缩功能的使用	80
5.4.1  Gzip压缩功能综合配置实例	80
5.4.2  Gzip压缩功能与IE6浏览器运行脚本的兼容问题	82
5.4.3  Nginx与其他服务器交互时产生的Gzip压缩功能相关问题	83
5.5  本章小结	84
第6章  Nginx服务器的Rewrite功能	85
6.1  Nginx后端服务器组的配置的5个指令	85
6.2  Rewrite功能的配置	88
6.2.1  “地址重写”与“地址转发”	88
6.2.2  Rewrite规则	89
6.2.3  if指令	89
6.2.4  break指令	91
6.2.5  rewrite指令	92
6.2.6  rewrite_log指令	94
6.2.7  set指令	94
6.2.8  uninitialized_variable_warn指令	94
6.2.9  Rewrite常用全局变量	94
6.3  Rewrite的使用	95
6.3.1  域名跳转	95
6.3.2  域名镜像	96
6.3.3  独立域名	97
6.3.4  目录自动添加“/”	98
6.3.5  目录合并	99
6.3.6  防盗链	99
6.4  本章小结	101
第7章  Nginx服务器的代理服务	102
7.1  正向代理与反向代理的概念	102
7.2  Nginx服务器的正向代理服务	104
7.2.1  Nginx服务器正向代理服务的配置的3个指令	104
7.2.2  Nginx服务器正向代理服务的使用	105
7.3  Nginx服务器的反向代理服务	105
7.3.1  反向代理的基本设置的21个指令	106
7.3.2  Proxy Buffer的配置的7个指令	113
7.3.3  Proxy Cache的配置的12个指令	115
7.4   Nginx服务器的负载均衡	119
7.4.1  什么是负载均衡	120
7.4.2  Nginx服务器负载均衡配置	120
7.4.3  配置实例一：对所有请求实现一般轮询规则的负载均衡	120
7.4.4  配置实例二：对所有请求实现加权轮询规则的负载均衡	121
7.4.5  配置实例三：对特定资源实现负载均衡	121
7.4.6  配置实例四：对不同域名实现负载均衡	122
7.4.7  配置实例五：实现带有URL重写的负载均衡	123
7.5  本章小结	124
第8章  Nginx服务器的缓存机制	125
8.1  Web缓存技术简述	125
8.2  404错误驱动Web缓存	126
8.3  资源不存在驱动Web缓存	127
8.4  基于memcached的缓存机制的6个指令	128
8.5  Proxy Cache缓存机制	130
8.6  Nginx与Squid组合	133
8.6.1  Squid服务器的配置	133
8.6.2  Nginx服务器的配置	133
8.7  基于第三方模块ncache的缓存机制	134
8.8  本章小结	134
第9章  Nginx服务器的邮件服务	135
9.1  邮件服务	135
9.2  Nginx邮件服务的配置的12个指令	136
9.3  Nginx邮件服务配置实例	140
9.4  本章小结	142
第10章  Nginx源码结构	143
10.1  Nginx源码的3个目录结构	143
10.1.1  core目录	144
10.1.2  event目录	144
10.1.3  http目录	145
10.2  Nginx源码的模块化结构	145
10.2.1  公共功能	145
10.2.2  配置解析	146
10.2.3  内存管理	147
10.2.4  事件驱动	147
10.2.5  日志管理	148
10.2.6  HTTP服务	148
10.2.7  Mail服务	149
10.2.8  模块支持	150
10.3  本章小结	150
第11章  Nginx基本数据结构	151
11.1  ngx_module_s结构体	151
11.1.1  分类标识ctx_index	152
11.1.2  模块计数器index	152
11.1.3  模块上下文	153
11.1.4  回调函数	153
11.2  ngx_command_s结构体	154
11.2.1  type成员	154
11.2.2  函数指针set	156
11.2.3  conf和offset	156
11.3  3个基本模块的指令集数组结构	157
11.3.1  http模块	157
11.3.2  event模块	158
11.3.3  mail模块	159
11.4  ngx_ pool_s结构体	160
11.4.1  ngx_pool_data_t结构体	160
11.4.2  ngx_pool_large_s结构体	161
11.4.3  ngx_pool_cleanup_s结构体	161
11.5  Nginx socket相关的数据结构	161
11.5.1  ngx_listening_s结构体	161
11.5.2  ngx_http_conf_port_t结构体	162
11.5.3  ngx_http_conf_addr_t结构体	163
11.6  ngx_event_s结构体	163
11.7  ngx_connection_s结构体	164
11.8  ngx_cycle_s结构体	166
11.9  ngx_conf_s结构体	168
11.9.1  配置上下文*ctx	169
11.9.2  指令类型type	169
11.10  ngx_signal_t结构体	170
11.11  ngx_process_t结构体	172
11.12  本章小结	172
第12章  Nginx的启动初始化	173
12.1  Nginx启动过程概览	173
12.1.1  程序初始化	173
12.1.2  启动多进程	174
12.2  Nginx的初始化	175
12.2.1  读取并处理启动参数	176
12.2.2  继承socket	185
12.2.3  初始化时间及建立新的cycle结构	187
12.2.4  建立core模块上下文结构	188
12.2.5  解析配置文件	190
12.2.6  初始化core模块上下文	196
12.2.7  创建PID文件	199
12.2.8  处理监听socket	199
12.2.9  信号设置	201
12.2.10  启动Master Process	203
12.2.11  Nginx初始化过程总结	204
12.3  Nginx的启动	205
12.3.1  主进程设置信号阻塞	206
12.3.2  设置进程标题	206
12.3.3  启动工作进程	208
12.3.4  启动缓存索引重建及管理进程	211
12.3.5  循环处理信号	212
12.3.6  Nginx启动过程总结	216
12.4  本章小结	217
第13章  Nginx的时间管理	218
13.1  获取系统时间的一般方法	218
13.1.1  系统调用的开销	218
13.1.2  gettimeofday()	219
13.2  Nginx时间管理的工作原理	220
13.2.1  时间缓存的更新	220
13.2.2  更新时间缓存的时机	224
13.3  缓存时间的精度	226
13.3.1  设置缓存时间的精度	226
13.3.2  缓存时间精度的控制原理	226
13.4  本章小结	228
第14章  Nginx的内存管理	229
14.1  内存池的逻辑结构	229
14.2  内存池的管理	230
14.2.1  创建内存池	231
14.2.2  销毁内存池	234
14.2.3  重置内存池	235
14.3  内存的使用	235
14.3.1  申请内存	235
14.3.2  释放内存	241
14.3.3  回收内存	241
14.4  本章小结	243
第15章  Nginx工作进程	244
15.1  工作进程概览	244
15.2  相关源码分析	245
15.2.1  设置工作进程运行环境	246
15.2.2  监听和处理进程控制事件	249
15.2.3  接收网络请求事件	250
15.2.4  执行进程控制	254
15.3  Nginx服务器进程间通信	256
15.3.1  Linux进程间通信方式	256
15.3.2  Linux进程间双工通信的实现	257
15.3.3  通信通道的建立和设置	257
15.3.4  通信通道的使用	259
15.3.5  消息的读写	259
15.4  本章小结	263
第16章  Nginx的模块编程	264
16.1  模块的种类	264
16.2  模块开发实践	265
16.2.1  “Hello_Nginx”模块编程实例	265
16.2.2  模块的结构	268
16.2.3  模块命名规则	272
16.3  模块的编译与安装	272
16.4  本章小结	274
第17章  Nginx在动态网站建设中的应用实例	275
17.1  Nginx在JSP网站建设中的应用	275
17.1.1  环境描述	275
17.1.2  特别模块说明	276
17.1.3  配置方案	276
17.2  Nginx在PHP网站建设中的应用	278
17.2.1  环境描述	278
17.2.2  特别模块说明	279
17.2.3  配置方案	280
17.3  Nginx+Perl脚本在网站建设中的应用	281
17.3.1  环境描述	282
17.3.2  特别模块说明	282
17.3.3  配置方案	282
17.4  本章小结	285
第18章  Nginx经典应用——LNAMP	286
18.1  LNAMP概述	286
18.2  手动部署和配置	287
18.2.1  环境准备	287
18.2.2  安装和配置MySQL	288
18.2.3  安装和配置Apache	289
18.2.4  安装 PHP	289
18.3  自动安装	293
18.4  本章小结	293
附录A  Nginx内置变量	294
附录B  正则表达式语法	296
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Nginx高性能Web服务器详解
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>决战Nginx系统卷
第1部分 Nginx服务器
第1章 Nginx的功能
1.1 功能描述
1.1.1 基本HTTP功能
1.1.2 其他HTTP功能
1.1.3 邮件代理服务器功能
1.1.4 架构和可扩展性
1.1.5 被测试的系统和平台
1.2 服务器的类型
1.3 认识Nginx服务器的基本模块
1.3.1 Nginx的内核模块
1.3.2 Nginx的事件模块
1.3.3 Nginx的HTTP内核模块
第2章 Nginx的模块管理和
进程管理
2.1 模块管理
2.1.1 从源码看模块
2.1.2 选择使用Nginx的模块
2.1.3 Nginx使用第三方模块
2.2 进程管理
2.2.1 master进程和worker进程
2.2.2 关于worker数目的设置
2.3 针对Nginx对Linux系统的优化
2.3.1 关闭系统中不需要的服务
2.3.2 优化写磁盘操作
2.3.3 优化资源限制
2.3.4 优化内核TCP选项
2.4 优化Nginx服务器
2.4.1 关闭访问日志
2.4.2 使用epoll
2.4.3 Nginx服务器配置优化
第3章 Nginx如何处理一个请求
3.1 IP、域名部分的处理
3.1.1 基于名字的虚拟主机
3.1.2 阻止处理对不明确主机名的请求
3.1.3 基于IP和域名的虚拟域名服务器处理请求
3.2 URI部分的处理
3.2.1 实例
3.2.2 分析
第4章 服务器名字
4.1 通配符名字
4.2 正则表达式名字
4.3 其他不同种类的名字
4.4 名字优化
4.5 兼容性
4.6 对服务器名字的扩展
4.7 基于目录名的域名访问
4.7.1 正则表达式处于主机名字的位置上
4.7.2 正则表达式处于域名的位置上
4.8 关于$1、$2…的使用
第5章 协助用户操作Nginx的工具
5.1 工具1——nginx.vim
5.1.1 下载与安装
5.1.2 使用
5.2 工具2——eperusio-nginx_ensit
5.2.1 下载与安装
5.2.2 相关命令
5.2.3 实例
5.3 工具3——htpasswd.py
5.3.1 下载文件
5.3.2 命令的使用方法
5.4 工具4——Nginx启动脚本
第6章 5xx错误及处理
6.1 500内部服务器错误
6.1.1 问题分析
6.1.2 问题解决
6.2 502问题—— 502 bad gateway
6.3 504问题—— 504 gatewaytime-out
第7章 使用TCMalloc优化Nginx
7.1 相关安装
7.2 配置示例
7.3 指令
7.4 使用实例
第8章 PCRE正则表达式
8.1 安装PCRE
8.2 命令
8.2.1 pcre-config命令
8.2.2 pcretest命令
8.3 man目录
8.4 Nginx与正则表达式
8.4.1 正则表达式支持UTF-8
8.4.2 Nginx使用正则表达式
第9章 Nginx高可用的实现
9.1 安装Heartbeat
9.1.1 下载安装glue
9.1.2 下载安装Heartbeat
9.1.3 安装agents
9.2 配置Heartbeat
9.2.1 ha.cf文件
9.2.2 haresources文件
9.2.3 authkeys文件
9.3 启动Heartbeat
9.3.1 环境部署
9.3.2 启动主Heartbeat
9.3.3 启动备用Heartbeat
9.4 测试Heartbeat
9.4.1 宕掉主节点
9.4.2 重新启动主节点
第10章 10个QA
10.1 什么是Nginx
10.2 Nginx可以安装在哪些操作系统下
10.3 Nginx在Windows下的性能如何
10.4 Nginx与Apache比较有哪些优点
10.5 Nginx解决了C10k问题
10.6 从Nginx接收客户端请求处理的角度来说，它与Apache有何不同
10.7 安装完成Nginx后，如何查看Nginx的版本
10.8 安装完成Nginx后，如何查看configure时的配置
10.9 启动Nginx后，能不能看到Nginx当前都支持哪些模块
10.10 Https仅能用在指定的目录下吗
第2部分 Nginx服务器的功能模块
第11章 限 制 流 量
11.1 指令
11.2 实例配置
第12章 限制用户并发连接数
12.1 示例配置
12.2 指令
12.3 配置实例
第13章 修改或隐藏Nginx的版本号
13.1 隐藏版本号
13.2 修改版本号
第14章 配置FLV服务器
14.1 示例配置
14.2 指令
14.3 配置实例
第15章 Nginx的访问控制
15.1 配置示例
15.2 指令
15.3 使用实例
第16章 提供FTP下载
16.1 配置示例
16.2 指令
16.3 使用实例
第17章 Nginx与编码
17.1 文件和文件名的编码
17.2 使用convmv
17.3 使用enca
17.4 字符集设置模块
第18章 网页压缩传输
18.1 HttpGzipModule
18.2 HttpGzipStaticModule
第19章 控制Nginx如何记录日志
第20章 map模块的使用
第21章 Nginx预防应用层DDoS攻击
21.1 Limit request模块
21.2 访问测试
21.2.1 限制连接数
21.2.2 未限制连接数
第22章 为Nginx添加、清除或改写响应
22.1 HttpHeadersModule
22.2 ngx_headers_more
第23章 重写URI
第24章 Nginx与服务器端包含
24.1 ssi指令
24.2 使用实例
第25章 Nginx与X-Sendfile
25.1 处理流程
25.2 特殊头
25.3 使用实例 2
第26章 在Nginx的响应体之前或之后添加内容
第27章 Nginx与访问者的地理信息
第28章 Nginx的图像处理
第29章 location中随机显示文件
第30章 后台Nginx服务器记录原始客户端的IP地址
第31章 解决防盗链
31.1 使用Referer模块
31.2 使用AccessKey模块
31.3 使用SecureLink模块
第32章 Nginx提供HTTPS服务
32.1 兼容性
32.2 安装SSL服务
32.3 通配符证书
32.4 变量
32.5 非标准的错误代码
32.6 使用举例
32.6.1 单向认证
32.6.2 更新Nginx配置
32.6.3 访问测试
32.6.4 双向认证
32.6.5 创建相关目录
32.7 HTTPS 服务器优化
第33章 监控Nginx的工作状态
第34章 使用empty_gif
第35章 Nginx实现对响应体内容的替换
第36章 Nginx的WebDAV
第37章 Nginx的Xslt模块
第38章 Nginx的基本认证方式
38.1 生成密码
38.2 添加配置
38.3 访问测试
第39章 Nginx的cookie
第40章 Nginx基于客户端请求头的访问分
第41章 通过Upstream模块使得Nginx实现后台服务器集群
第42章 根据浏览器选择主页
第43章 关于Nginx提供下载.ipa或.apk文件的处理方法
第44章 SCGI
44.1 被传递给SCGI服务器的参数
44.2 实例1：Perl语言的应用
44.3 实例2：Python语言的应用
44.4 在Nginx中使用Etag
第45章 Expires与ETag
45.1 安装nginx-static-etags模块
45.2 安装nginx-dynamic-etags模块
45.3 四个头的区别与联系
第46章 使用upstream_keepalive模块实现keep-live
第47章 后台服务器的健康检测
第48章 使用sticky模块实现粘贴性会话
第49章 Nginx对后台服务器实现“公平”访问
第50章 Nginx使用redis数据库
50.1 安装redis模块
50.2 安装redis2模块
50.3 关于redis
第51章 Nginx访问MongoDB
51.1 安装nginx-gridfs模块
51.2 关于MongoDB
第52章 Nginx访问Mogilefs
第3部分 Nginx与缓存
第53章 缓存技术——proxy_cache
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>决战Nginx系统卷
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>精通Nginx
第1章 安装Nginx及第三方模块 1
1.1 使用包管理器安装Nginx 2
1.1.1 CentOS 2
1.1.2 Debian 3
1.2 从源代码安装Nginx 3
1.2.1 准备编译环境 4
1.2.2 从源代码编译 4
1.3 配置web或者mail服务器 6
1.3.1 邮件代理的配置选项 6
1.3.2 指定路径的配置选项 7
1.4 使用各种模块 8
1.5 查找并安装第三方模块 11
1.6 组合在一起 12
1.7 总结 14
第2章 配置指南 15
2.1 基本配置格式 15
2.2 Nginx的全局配置参数 16
2.3 使用include文件 17
2.4 Http的server部分 18
2.4.1 客户端指令 18
2.4.2 文件I/O指令 19
2.4.3 Hash指令 20
2.4.4 Socket指令 21
2.4.5 示例配置文件 22
2.5 虚拟server部分 22
2.6 Locations——wheve，when，how 26
2.7 mail的server部分 28
2.8 完整的样本配置文件 30
2.9 总结 31
第3章 使用mail模块 33
3.1 基本代理服务 33
3.1.1 POP3服务 35
3.1.2 IMAP服务 36
3.1.3 SMTP服务 36
3.1.4 使用SSL/TLS 37
3.1.5 完整的mail示例 40
3.2 认证服务 42
3.3 与Memcached结合 49
3.4 解释日志文件 52
3.5 操作系统的限制 54
3.6 总结 55
第4章 Nginx作为反向代理 57
4.1 反向代理简介 58
4.1.1 代理模块 59
4.1.2 upstream模块 64
4.2 upstream服务器的类型 67
4.2.1 单个upstream服务器 67
4.2.2 多个upstream服务器 69
4.2.3 非Http型upstream服务器 70
4.3 将if配置转换为一个更现代的解释 72
4.4 使用错误文件来处理upstream的问题 76
4.5 确定客户端的真实IP地址 78
4.6 总结 78
第5章 反向代理高级话题 81
5.1 实现安全隔离 82
5.1.1 使用SSL对流量进行加密 82
5.1.2 使用SSL进行客户端身份验证 84
5.1.3 基于原始IP地址阻止流量 86
5.2 孤立应用程序的扩展 89
5.3 反向代理服务器的性能调优 92
5.3.1 缓冲 92
5.3.2 缓存 94
5.3.3 压缩 100
5.4 总结 103
第6章 Nginx Http服务器 105
6.1 Nginx的系统结构 106
6.2 Http的核心模块 106
6.2.1 server 107
6.2.2 日志 108
6.2.3 文件查找 111
6.2.4 名字解析 113
6.2.5 客户端交互 115
6.3 使用limit指令防止滥用 117
6.4 约束访问 121
6.5 流媒体文件 126
6.6 预定义变量 127
6.7 使用Nginx和PHP-FPM 129
6.8 将Nginx和uWSGI连接在一起工作 141
6.9 总结 143
第7章 Nginx的开发 145
7.1 缓存集成 145
7.1.1 应用程序没有缓存 146
7.1.2 使用数据库缓存 148
7.1.3 使用文件做缓存 150
7.2 动态修改内容 154
7.2.1 addition模块 154
7.2.2 sub模块 155
7.2.3 xslt模块 156
7.3 使用服务器端包含SSI 157
7.4 在Nginx中的决策 159
7.5 创建安全链接 163
7.6 生成图像 165
7.7 跟踪网站的访问者 169
7.8 防止意外的代码执行 170
7.9 总结 171
第8章 故障排除技巧 173
8.1 分析日志文件 173
8.1.1 错误日志文件格式 174
8.1.2 错误日志文件条目实例 175
8.2 配置高级日志记录 178
8.2.1 调试日志记录 178
8.2.2 使用访问日志文件进行调试 185
8.3 常见的配置错误 188
8.3.1使用if取代try_files 188
8.3.2 使用if作为主机名切换 189
8.3.3 不使用server部分的配置追求更好的效果 190
8.4 操作系统限制 192
8.4.1 文件描述符限制 192
8.4.2 网络限制 194
8.5 性能问题 195
8.6 使用Stub Status模块 197
8.7 总结 198
附录A 指令参考 199
附录B Rewrite规则指南 241
B.1 介绍rewrite模块 241
创建新的rewrite规则 245
B.2 转换Apache的重写规则 247
B.2.1 规则 #1：使用try_files替代目录和文件存在性检测 247
B.2.2 规则 #2：使用location替代匹配REQUEST_URI 247
B.2.3 规则 #3：使用server替代匹配R Http_HOST 248
B.2.4 规则 #4：变量检查使用if替代RewriteCond 250
B.3 总结 251
附录C Nginx的社区 253
C.1 邮件列表 253
C.2 IRC频道 254
C.3 Web资源 254
C.4 撰写好的bug报告 254
C.5 总结 255
附录D Solaris系统下的网络调优 257
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>精通Nginx
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>直播系统开发：基于Nginx与Nginx-rtmp-module
第1 章 Nginx 基础  1
1.1 Nginx 概述及作用  1
1.1.1 可作为Web 服务器  1
1.1.2 可作为反向代理服务器  2
1.1.3 可作为邮件代理服务器  3
1.2 为什么选择Nginx  3
1.3 安装Nginx  4
1.3.1 选择安装版本  4
1.3.2 编译安装Nginx  5
1.3.3 配置防火墙  7
1.3.4 加入自启动和系统服务  9
1.3.5 加入系统变量  12
1.4 Nginx 命令行  13
1.4.1 命令行参数  14
1.4.2 启动、停止和重启  15
1.4.3 信号控制  17
1.4.4 平滑升级  18
1.5 Nginx 配置  19
1.5.1 配置命令  20
1.5.2 配置上下文  20
1.5.3 配置文件结构  21
1.5.4 配置变量  22
1.5.5 配置实例  23
1.6 Nginx 模块化体系  25
1.6.1 模块概述  25
1.6.2 模块分类  26
1.7 本章小结  26
第2 章 Nginx-rtmp-module 基础  27
2.1 Nginx-rtmp-module 介绍  27
2.2 RTMP 协议与HLS 协议  28
2.2.1 RTMP 协议  28
2.2.2 HLS 协议  29
2.3 NRM 的搭建  34
2.4 搭建第一个直播系统  36
2.5 本章小结  40
第3 章 Nginx-rtmp-module 进阶  41
3.1 如何使NRM 支持HLS 协议直播  41
3.2 推/拉流与串流码  43
3.3 Control 控制器  43
3.3.1 record 命令  44
3.3.2 drop 命令  47
3.3.3 redirect 命令  47
3.4 数据统计模块  47
3.5 Exec 相关功能  48
3.6 本章小结  48
第4 章 Nginx-rtmp-module 应用  49
4.1 FFmpeg  49
4.1.1 FFmpeg 的安装  51
4.1.2 FFmpeg 的配置  54
4.1.3 FFmpeg 与直播的应用  59
4.2 基础配置信息  59
4.3 本章小结  64
第5 章 Android 端解决方案  65
5.1 移动端视频直播介绍  65
5.2 Yasea 框架介绍  66
5.3 IJKPlayer 框架介绍  69
5.4 Android 端开发实战  74
5.4.1 主要功能  75
5.4.2 框架导入  75
5.4.3 滤镜  77
5.4.4 推流  80
5.4.5 拉流  83
5.4.6 弹幕  90
5.5 本章小结  94
第6 章 iOS 端解决方案  95
6.1 iOS 端视频直播介绍  95
6.2 SDK 的选择和前期准备  96
6.3 GPUImage 框架介绍  99
6.4 LFLiveKit 框架介绍  103
6.5 IJKPlayer 框架介绍  106
6.6 iOS 端开发实战  110
6.6.1 主要功能  110
6.6.2 框架导入  111
6.6.3 滤镜  112
6.6.4 推流  116
6.6.5 拉流  121
6.6.6 点赞  126
6.6.7 弹幕  129
6.7 本章小结  132
第7 章 Web 端解决方案  133
7.1 Adobe Flash Player  133
7.1.1 Flash Player  134
7.1.2 为什么要使用Flash  134
7.2 ActionScript 与Flex  135
7.2.1 Flex 环境的搭建  135
7.2.2 Flex 项目的创建  137
7.2.3 使用ActionScript 组件  142
7.2.4 NetStream 对象  148
7.2.5 获取视频流  149
7.2.6 实例：使用as 实现一个基础的推流器  151
7.3 SWFObject  156
7.3.1 为什么选择SWFObject  156
7.3.2 静态嵌入Flash Player  158
7.3.3 动态嵌入Flash Player  162
7.4 Flex 与JavaScript 的通信  167
7.4.1 使用Flex 调用JavaScript 函数  167
7.4.2 使用JavaScript 调用Flex 函数  168
7.4.3 使用JavaScript 获取SWF 对象的引用  169
7.4.4 实例：使用SWFObject 将Flash 播放器嵌入网页中  170
7.5 播放器的制作  171
7.5.1 主要功能  171
7.5.2 相关变量  172
7.5.3 初始化视频画布  172
7.5.4 加载视频流并播放  172
7.5.5 高亮显示播放进度及缓冲进度  174
7.5.6 视频的播放与暂停  175
7.5.7 拖曳滑块播放视频  176
7.5.8 播放结束处理  177
7.5.9 音量大小控制  177
7.5.10 全屏显示控制  178
7.5.11 流数据字符格式化  178
7.5.12 视频画面的平滑优化处理  179
7.5.13 播放接口的调用  179
7.5.14 实例：制作自定义播放器  180
7.6 Web 端开发实战  185
7.6.1 推流  185
7.6.2 拉流  195
7.7 本章小结  199
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>直播系统开发：基于Nginx与Nginx-rtmp-module
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Nginx模块开发指南
目录
第0章  导读	1
0.1  关于本书	1
0.2  读者对象	2
0.3  读者要求	3
0.4  运行环境	3
0.5  本书的结构	4
0.6  如何阅读本书	6
0.7  本书的源码	6
第1章  Nginx入门	7
1.1  关于Nginx	7
1.1.1  历史	8
1.1.2  特点	8
1.1.3  进程模型	9
1.1.4  版本	10
1.2  安装Nginx	11
1.2.1  准备工作	11
1.2.2  快速安装	11
1.2.3  运行命令	12
1.2.4  验证安装	13
1.2.5  定制安装	14
1.3  配置Nginx	15
1.3.1  配置文件格式	16
1.3.2  进程配置	17
1.3.3  运行日志配置	18
1.3.4  http配置	18
1.3.5  server配置	19
1.3.6  location配置	20
1.3.7  文件访问配置	21
1.3.8  upstream配置	22
1.3.9  变量	22
1.4  总结	24
第2章  Nginx开发准备	25
2.1  开发环境	25
2.1.1  C++标准	25
2.1.2  Boost程序库	26
2.2  Nginx的目录结构	26
2.3  Nginx源码的特点	27
2.3.1  代码风格	28
2.3.2  代码优化	28
2.3.3  面向对象思想	28
2.4  在Nginx里使用C++	29
2.4.1  实现原则	29
2.4.2  代码风格	29
2.4.3  编译脚本	30
2.5  基本的C++包装类	32
2.5.1  类定义	32
2.5.2  构造和析构	33
2.5.3  成员函数	33
2.6  总结	34
第3章  Nginx基础设施	35
3.1  头文件	35
3.2  整数类型	36
3.2.1  标准整数类型	36
3.2.2  自定义整数类型	36
3.2.3  无效值	37
3.2.4  C++封装	38
3.3  错误处理	41
3.3.1  错误码定义	41
3.3.2  C++异常	41
3.4  内存池	44
3.4.1  结构定义	44
3.4.2  操作函数	45
3.4.3  C++封装	45
3.4.4  清理机制	48
3.4.5  C++内存分配器	50
3.5  字符串	52
3.5.1  结构定义	52
3.5.2  操作函数	53
3.5.3  C++封装	55
3.6  时间与日期	58
3.6.1  时间结构定义	58
3.6.2  时间操作函数	58
3.6.3  日期结构定义	59
3.6.4  日期操作函数	60
3.6.5  C++封装时间	61
3.6.6  C++封装日期	62
3.7  运行日志	64
3.7.1  结构定义	65
3.7.2  操作函数	65
3.7.3  C++封装	66
3.8  总结	68
第4章  Nginx高级数据结构	71
4.1  动态数组	71
4.1.1  结构定义	71
4.1.2  操作函数	73
4.1.3  C++封装	73
4.2  单向链表	76
4.2.1  结构定义	77
4.2.2  操作函数	78
4.2.3  C++迭代器	79
4.2.4  C++封装链表	81
4.3  双端队列	84
4.3.1  结构定义	84
4.3.2  操作函数	85
4.3.3  C++节点	87
4.3.4  C++迭代器	89
4.3.5  C++封装队列	90
4.4  缓冲区	95
4.4.1  结构定义	95
4.4.2  操作函数	97
4.4.3  C++封装	98
4.5  数据块链	100
4.5.1  结构定义	100
4.5.2  操作函数	101
4.5.3  C++节点	101
4.5.4  C++迭代器	103
4.5.5  C++封装数据块链	105
4.6  键值对	107
4.6.1  简单键值对	107
4.6.2  散列表键值对	107
4.7  总结	108
第5章  Nginx开发综述	111
5.1  最简单的Nginx模块	111
5.1.1  模块设计	112
5.1.2  配置解析	112
5.1.3  处理函数	114
5.1.4  模块集成	116
5.1.5  编译脚本和命令	117
5.1.6  测试验证	118
5.2  Nginx开发基本流程	119
5.2.1  设计	119
5.2.2  开发	119
5.2.3  编译	120
5.2.4  测试验证	120
5.2.5  调优	121
5.3  Nginx的模块	121
5.3.1  模块的数据结构	121
5.3.2  模块的种类	123
5.3.3  http模块	124
5.3.4  模块的类图	124
5.3.5  模块的组织形式	125
5.4  Nginx的配置	127
5.4.1  结构定义	128
5.4.2  配置解析的基本流程	131
5.4.3  配置数据的存储模型	133
5.4.4  访问配置数据	138
5.4.5  确定配置数据的位置	138
5.4.6  配置解析函数	140
5.4.7  配置数据的合并	141
5.4.8  配置指令的类型	142
5.5  Nginx模块源码分析	143
5.5.1  ngx_core_module	143
5.5.2  ngx_errlog_module	146
5.6  Nginx的编译脚本	147
5.6.1  运行机制	147
5.6.2  使用的变量	148
5.7  C++封装模块信息	149
5.7.1  NgxModuleConfig	149
5.7.2  NgxModule	153
5.8  C++封装配置解析	155
5.8.1  NgxCommand	155
5.8.2  NgxTake	155
5.8.3  NGX_MODULE_NULL	157
5.9  C++开发Nginx模块	158
5.9.1  C++模块的基本组成	158
5.9.2  配置信息类	159
5.9.3  业务逻辑类	160
5.9.4  模块集成类	162
5.9.5  实现源文件	164
5.9.6  增加更多功能	164
5.10  总结	165
第6章  Nginx HTTP框架综述	169
6.1  HTTP框架简介	169
6.1.1  模块分类	169
6.1.2  处理流程	170
6.1.3  请求结构体	172
6.1.4  请求的处理阶段	173
6.1.5  请求的环境数据	175
6.2  HTTP处理引擎	176
6.2.1  处理函数原型	176
6.2.2  处理函数的存储方式	176
6.2.3  内容处理函数	177
6.2.4  引擎的数据结构	178
6.2.5  引擎的初始化	179
6.2.6  引擎的运行机制	181
6.2.7  日志阶段的处理	182
6.3  HTTP过滤引擎	183
6.3.1  过滤函数原型	183
6.3.2  过滤函数链表	184
6.3.3  过滤函数的顺序	185
6.3.4  过滤链表的运行机制	187
6.3.5  请求体过滤	188
6.4  Nginx模块源码分析	188
6.4.1  ngx_http_static_module	188
6.4.2  ngx_http_not_modified_filter_ module	189
6.5  C++封装	190
6.5.1  NgxModuleCtx	191
6.5.2  NgxHttpCoreModule	193
6.5.3  NgxFilter	195
6.6  总结	197
第7章  Nginx HTTP请求处理	199
7.1  HTTP状态码	199
7.2  请求结构体	200
7.3  请求行	201
7.3.1  请求方法	201
7.3.2  协议版本号	202
7.3.3  资源标识符	202
7.4  请求头	203
7.5  请求体	204
7.5.1  结构定义	205
7.5.2  操作函数	205
7.6  响应头	206
7.6.1  结构定义	206
7.6.2  操作函数	207
7.7  响应体	207
7.8  C++封装	208
7.8.1  NgxHeaders	208
7.8.2  NgxRequestBody	211
7.8.3  NgxRequest	212
7.8.4  NgxResponse	213
7.9  开发HTTP处理模块	216
7.9.1  模块设计	216
7.9.2  配置信息类	217
7.9.3  业务逻辑类	217
7.9.4  模块集成类	219
7.9.5  实现源文件	221
7.9.6  编译脚本	221
7.9.7  测试验证	221
7.10  开发HTTP过滤模块	222
7.10.1  模块设计	222
7.10.2  配置信息类	222
7.10.3  环境数据类	223
7.10.4  业务逻辑类	223
7.10.5  模块集成类	227
7.10.6  实现源文件	228
7.10.7  编译脚本	228
7.10.8  测试验证	228
7.11  总结	229
第8章  Nginx HTTP请求转发	231
8.1  upstream框架简介	231
8.1.1  工作原理	232
8.1.2  请求结构体	233
8.1.3  上游结构体	234
8.1.4  上游配置参数	236
8.2  upstream运行机制	237
8.2.1  回调函数	237
8.2.2  初始化upstream	239
8.2.3  设置upstream	239
8.2.4  启动upstream	241
8.2.5  处理upstream数据	241
8.3  load-balance运行机制	242
8.3.1  结构定义	243
8.3.2  初始化模块入口	247
8.3.3  初始化IP地址列表	248
8.3.4  初始化算法	250
8.3.5  执行算法	251
8.4  Nginx模块源码分析	251
8.4.1  ngx_http_memcached_module	251
8.4.2  ngx_http_upstream_ip_hash_ module	254
8.5  C++封装	257
8.5.1  NgxUpstream	257
8.5.2  NgxUpstreamHelper	259
8.5.3  NgxHttpUpstreamModule	261
8.5.4  NgxLoadBalance	263
8.6  开发upstream模块	264
8.6.1  模块设计	264
8.6.2  配置信息类	264
8.6.3  业务逻辑类	265
8.6.4  模块集成类	268
8.6.5  实现源文件	269
8.6.6  编译脚本	269
8.6.7  测试验证	269
8.7  开发load-balance模块	270
8.7.1  模块设计	271
8.7.2  配置信息类	271
8.7.3  业务逻辑类	271
8.7.4  模块集成类	273
8.7.5  实现源文件	275
8.7.6  编译脚本	275
8.7.7  测试验证	275
8.8  总结	276
第9章  Nginx HTTP子请求	277
9.1  子请求简介	277
9.1.1  工作原理	278
9.1.2  请求结构体	279
9.1.3  回调函数	280
9.1.4  待处理请求链表	282
9.1.5  子请求存储结构	282
9.2  子请求运行机制	283
9.2.1  创建子请求	283
9.2.2  处理引擎	287
9.2.3  数据整理	288
9.3  C++封装	290
9.3.1  NgxSubRequestHandler	290
9.3.2  NgxSubRequest	292
9.4  数据回传模块	293
9.4.1  模块设计	293
9.4.2  环境数据类	293
9.4.3  业务逻辑类	295
9.4.4  模块集成类	297
9.4.5  编译脚本	298
9.5  在模块里使用子请求	299
9.5.1  模块设计	299
9.5.2  配置信息类	299
9.5.3  业务逻辑类	300
9.5.4  测试验证	303
9.6  总结	304
第10章  Nginx变量	305
10.1  结构定义	305
10.1.1  变量值	305
10.1.2  变量访问对象	306
10.1.3  变量的存储	307
10.1.4  请求结构体	307
10.2  运行机制	308
10.2.1  注册变量	308
10.2.2  获取变量	309
10.3  C++封装	310
10.3.1  NgxVariableValue	310
10.3.2  NgxVariable	311
10.3.3  NgxVariables	312
10.3.4  NgxVarManager	313
10.3.5  NgxVariableValueProxy	314
10.4  在模块里使用变量	315
10.4.1  添加变量	316
10.4.2  读写变量	317
10.5  总结	317
第11章  Nginx辅助设施	319
11.1  摘要算法	319
11.1.1  MD5	319
11.1.2  SHA-1	320
11.1.3  MurmurHash	321
11.1.4  C++封装	321
11.2  编码和解码	324
11.2.1  CRC校验	324
11.2.2  Base64编码解码	325
11.2.3  URI编码解码	326
11.2.4  HTML和JSON编码	327
11.3  正则表达式	327
11.4  共享内存	328
11.4.1  结构定义	328
11.4.2  操作函数	329
11.4.3  C++共享内存	329
11.5  定时器	331
11.5.1  结构定义	331
11.5.2  操作函数	332
11.5.3  C++定时器事件	332
11.5.4  C++定时器工厂	333
11.6  总结	335
第12章  Nginx与设计模式	337
12.1  设计模式简介	337
12.2  框架级别的模式	337
12.3  业务级别的模式	339
12.4  代码级别的模式	340
12.5  总结	342
第13章  结束语	343
13.1  本书的遗憾	343
13.2  下一步	344
13.3  临别赠言	345
附录A  推荐书目	347
附录B  GDB调试简介	349
附录C  Nginx的字符串格式化	351
附录D  Nginx里的void*变量	353
附录E  Nginx C++模块简介	355
附录F  Nginx Lua模块简介	357
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Nginx模块开发指南
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Nginx完全开发指南：使用C、C++和OpenResty
第0章  导读	1
0.1  关于本书	1
0.2  读者对象	2
0.3  读者要求	3
0.4  运行环境	4
0.5  本书的结构	4
0.6  如何阅读本书	7
0.7  本书的源码	8
第1章  Nginx入门	9
1.1  关于Nginx	9
1.2  安装Nginx	13
1.3  配置Nginx	19
1.4  总结	30
第2章  Nginx开发准备	31
2.1  开发环境	31
2.2  目录结构	32
2.3  源码特点	34
2.4  使用C++	35
2.5  C++包装类	38
2.6  总结	40
第3章  Nginx基础设施	41
3.1  头文件	41
3.2  整数类型	42
3.3  错误处理	47
3.4  内存池	50
3.5  字符串	58
3.6  时间与日期	64
3.7  运行日志	70
3.8  总结	74
第4章  Nginx高级数据结构	77
4.1  动态数组	77
4.2  单向链表	83
4.3  双端队列	90
4.4  红黑树	101
4.5  缓冲区	108
4.6  数据块链	113
4.7  键值对	120
4.8  总结	121
第5章  Nginx开发综述	123
5.1  最简单的模块	123
5.2  开发基本流程	131
5.3  编译脚本	134
5.4  总结	137
第6章  Nginx模块体系	139
6.1  模块架构	139
6.2  配置解析	152
6.3  源码分析	168
6.4  C++封装	172
6.5  C++开发模块	180
6.6  总结	187
第7章  Nginx HTTP框架综述	191
7.1  框架简介	191
7.2  处理引擎	198
7.3  过滤引擎	205
7.4  源码分析	211
7.5  C++封装	213
7.6  总结	219
第8章  Nginx HTTP请求处理	221
8.1  状态码	221
8.2  请求结构体	222
8.3  请求行	223
8.4  请求头	225
8.5  请求体	226
8.6  响应头	227
8.7  响应体	229
8.8  源码分析	229
8.9  C++封装	232
8.10  开发handler模块	241
8.11  开发filter模块	246
8.12  总结	253
第9章  Nginx HTTP请求转发	255
9.1  框架简介	255
9.2  请求转发机制	261
9.3  负载均衡机制	266
9.4  源码分析	275
9.5  C++封装	281
9.6  开发upstream模块	288
9.7  开发load-balance模块	294
9.8  总结	299
第10章  Nginx HTTP子请求	301
10.1  子请求简介	301
10.2  子请求运行机制	307
10.3  C++封装	314
10.4  数据回传模块	317
10.5  在模块里使用子请求	323
10.6  总结	328
第11章  Nginx变量	329
11.1  结构定义	329
11.2  运行机制	332
11.3  复杂变量	334
11.4  C++封装	335
11.5  在模块里使用变量	341
11.6  在模块里使用复杂变量	343
11.7  总结	345
第12章  Nginx辅助设施	347
12.1  摘要算法	347
12.2  编码和解码	352
12.3  正则表达式	356
12.4  共享内存	356
12.5  总结	359
第13章  Nginx进程机制	361
13.1  基本系统调用	361
13.2  进程系统调用	362
13.3  信号系统调用	364
13.4  结构定义	365
13.5  全局变量	368
13.6  启动过程	370
13.7  信号处理	377
13.8  单进程模式	379
13.9  多进程模式	382
13.10  总结	390
第14章  Nginx事件机制	393
14.1  基本系统调用	393
14.2  socket系统调用	395
14.3  epoll系统调用	399
14.4  结构定义	403
14.5  定时器	415
14.6  模块体系	419
14.7  全局变量	425
14.8  运行机制	427
14.9  总结	452
第15章  Nginx多线程机制	455
15.1  eventfd系统调用	455
15.2  pthread系统调用	456
15.3  结构定义	457
15.4  事件通知	460
15.5  运行机制	463
15.6  在模块里使用多线程	469
15.7  总结	474
第16章  Nginx Stream机制	477
16.1  模块体系	477
16.2  监听端口	483
16.3  处理引擎	491
16.4  过滤引擎	495
16.5  运行机制	496
16.6  开发stream模块	507
16.7  总结	514
第17章  Nginx HTTP机制	517
17.1  结构定义	517
17.2  初始化连接	519
17.3  执行引擎	528
17.4  处理请求体	534
17.5  发送数据	540
17.6  结束请求	543
17.7  总结	548
第18章  Nginx与设计模式	551
18.1  设计模式简介	551
18.2  框架级别的模式	551
18.3  业务级别的模式	553
18.4  代码级别的模式	554
18.5  总结	556
第19章  OpenResty开发	557
19.1  简介	557
19.2  Lua语言	566
19.3  LuaJIT	577
19.4  Lua模块	581
19.5  功能接口	585
19.6  应用实例	594
19.7  Stream Lua模块	598
19.8  lua-resty库	601
19.9  总结	603
第20章  结束语	605
20.1  本书的遗憾	605
20.2  下一步	605
20.3  临别赠言	606
附录A  推荐书目	607
附录B  GDB调试简介	609
附录C  Nginx C++模块简介	611
附录D  Nginx的字符串格式化	613
附录E  nginScript简介	615
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Nginx完全开发指南：使用C、C++和OpenResty
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>精通Nginx(第2版)
版权
版权声明
内容提要
作者简介
审稿人简介
译者序
前言
第1章　安装Nginx及第三方模块
第2章　配置指南
第3章　使用mail模块
第4章　Nginx作为反向代理
第5章　反向代理高级话题
第6章　Nginx HTTP服务器
第7章　Nginx的开发
第8章　在Nginx中集成Lua
第9章　故障排除技巧
附录A　指令参考
附录B　Rewrite规则指南
附录C　Nginx社区
附录D　Solaris系统下的网络调优
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>精通Nginx(第2版)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Nginx Lua开发实战
前言
第一部分　Nginx操作基础
第1章　Nginx高效服务器 2
1.1　Nginx的特点 2
1.2　Nginx的安装 3
1.3　configure命令参数 7
1.4　小结 12
第2章　数据库的基本操作 13
2.1　Nginx应用中的数据库 13
2.2　MySQL关系型数据库 15
2.2.1　yum安装方法 16
2.2.2　使用mysql测试服务 18
2.2.3　MySQL文件分布 19
2.2.4　数据库操作 19
2.3　Redis内存数据库 22
2.3.1　Redis安装 22
2.3.2　启动Redis服务 23
2.3.3　Redis 配置 23
2.3.4　参数说明 26
2.3.5　数据类型 29
2.4　PostgreSQL关系型数据库 31
2.5　Memcached内存数据库 33
2.5.1　Memcached安装 34
2.5.2　连接编辑 34
2.5.3　管理Memcached服务 35
2.5.4　Memcached命令 37
2.6　MongoDB分布式NoSQL数据库 42
2.6.1　MongoDB安装 43
2.6.2　mongod.conf配置说明 45
2.7　小结 48
第3章　OpenResty 49
3.1　OpenResty：概述 49
3.2　OpenResty的组成 50
3.3　OpenResty的安装 52
3.4　Nginx多实例 54
3.5　小结 54
第4章　Nginx核心技术 55
4.1　Nginx设计目标 55
4.2　Nginx架构 57
4.2.1　事件驱动 57
4.2.2　异步多阶段处理 59
4.2.3　模块化设计 61
4.2.4　管理进程、工作进程设计 63
4.2.5　内存池 65
4.2.6　连接池 66
4.2.7　时间缓存 66
4.2.8　延迟关闭 67
4.2.9　跨平台 67
4.2.10　HTTP模块管道过滤模式 67
4.2.11　keepalive 68
4.2.12　pipeline 69
4.3　小结 69
第5章　Nginx的工作流程 70
5.1　Nginx的启动流程 70
5.2　管理进程的工作流程 72
5.3　工作进程的工作流程 75
5.4　配置加载流程 76
5.5　HTTP框架初始化流程 79
5.6　HTTP模块调用流程 81
5.7　HTTP请求处理流程 82
5.8　小结 83
第二部分　Lua脚本语言
第6章　Lua教程 86
6.1　Lua基础 86
6.1.1　Lua的特性 86
6.1.2　Lua的应用场景 87
6.1.3　安装Lua环境 87
6.2　Lua基本语法 88
6.2.1　第一个Lua程序 88
6.2.2　注释 89
6.2.3　标识符 90
6.2.4　关键词 90
6.2.5　全局变量 90
6.3　Lua的数据类型 90
6.4　Lua变量 96
6.4.1　赋值语句 96
6.4.2　索引 97
6.5　Lua循环 98
6.6　Lua流程控制 98
6.7　Lua函数 99
6.7.1　函数的定义 99
6.7.2　多返回值 100
6.7.3　可变参数 101
6.8　Lua运算符 101
6.8.1　算术运算符 102
6.8.2　关系运算符 102
6.8.3　逻辑运算符 103
6.8.4　其他运算符 104
6.8.5　运算符的优先级 105
6.9　Lua字符串 106
6.10　Lua数组 107
6.10.1　一维数组 107
6.10.2　多维数组 108
6.11　Lua迭代器 109
6.11.1　泛型for迭代器 109
6.11.2　无状态的迭代器 110
6.11.3　多状态的迭代器 111
6.12　Lua表 112
6.13　Lua模块与包 113
6.13.1　require函数 114
6.13.2　加载机制 115
6.13.3　C包 115
6.14　Lua元表 116
6.14.1　_index元方法 117
6.14.2　_newindex元方法 118
6.14.3　为表添加运算符 119
6.14.4　_call元方法 119
6.14.5　_tostring元方法 120
6.15　Lua协同程序 121
6.15.1　基本语法 121
6.15.2　生产者–消费者问题 124
6.16　Lua错误处理 125
6.16.1　语法错误 125
6.16.2　运行错误 125
6.16.3　错误处理 126
6.16.4　error函数 126
6.16.5　pcall、xpcall、debug 127
6.17　Lua调试 128
6.18　Lua垃圾回收 130
6.19　Lua面向对象 131
6.19.1　Lua中面向对象 132
6.19.2　Lua继承 134
6.20　Lua数据库访问 136
6.21　小结 137
第7章　Lua通用库 138
7.1　字符串库 138
7.2　表库 141
7.3　文件I/O库 143
7.3.1　简单模式 144
7.3.2　完全模式 145
7.3.3　其他方法 146
7.4　数学库 147
7.5　操作系统库 150
7.6　小结 151
第三部分　Nginx开发技术
第8章　JSON数据交换格式 154
8.1　什么是JSON 154
8.2　JSON转换为JavaScript对象 155
8.3　JSON与XML的比较 155
8.4　JSON语法规则 156
8.5　格式化 157
8.6　小结 158
第9章　nginx.conf文件配置 159
9.1　默认nginx.conf文件 159
9.2　nginx.conf示例 162
9.3　全局配置与顶层配置块 166
9.3.1　main全局配置 166
9.3.2　events配置块 170
9.3.3　http服务器配置块 172
9.3.4　ngx_http_core_module变量 194
9.3.5　stream 195
9.4　中文版nginx.conf 201
9.5　小结 204
第10章　Nginx下Lua实现机制 206
10.1　ngx_lua原理 206
10.2　HTTP请求的处理阶段 209
10.3　ngx_lua的处理阶段 210
10.4　Lua阶段解析 212
10.4.1　init_by_lua 212
10.4.2　init_worker_by_lua 213
10.4.3　set_by_lua 214
10.4.4　rewrite_by_lua 216
10.4.5　access_by_lua 217
10.4.6　content_by_lua 218
10.4.7　header_filter_by_lua 220
10.4.8　body_filter_by_lua 220
10.4.9　log_by_lua 220
10.4.10　balancer_by_lua_block 221
10.5　小结 222
第四部分　Nginx Lua开发实战
第11章　Redis操作 224
11.1　Redis操作方法概述 224
11.2　HttpRedis访问方法 225
11.2.1　示例 225
11.2.2　HttpRedis API 226
11.2.3　HttpRedis变量 228
11.3　HttpRedis2Module访问方法 229
11.3.1　示例 229
11.3.2　nginx.conf配置 230
11.3.3　常用指令 231
11.3.4　技术点 234
11.3.5　应答包解析 238
11.4　lua-resty-redis访问方法 239
11.4.1　示例 239
11.4.2　API函数 240
11.4.3　技术点 244
11.4.4　问题列表 246
11.4.5　限制 247
11.4.6　安装 247
11.5　小结 247
第12章　MySQL操作 248
12.1　lua-restry-mysql访问方式 248
12.1.1　示例 248
12.1.2　安装 250
12.1.3　方法与函数 251
12.1.4　多结果集返回示例 254
12.1.5　其他注意事项 255
12.1.6　限制 255
12.2　HttpDrizzleModule访问方式 255
12.2.1　示例 256
12.2.2　安装 257
12.2.3　技术点 258
12.2.4　配置指令 259
12.2.5　变量 263
12.2.6　输出格式 264
12.3　HttpDrizzleModule完整示例 265
12.4　小结 272
第13章　Memcached操作 273
13.1　mem-nginx-module访问方式 273
13.1.1　概述 273
13.1.2　命令 276
13.1.3　指令 279
13.1.4　安装 281
13.1.5　说明 281
13.1.6　示例 282
13.2　lua-resty-memcached 访问方式 285
13.2.1　概述 285
13.2.2　API 286
13.2.3　自动日志 291
13.2.4　限制 291
13.3　小结 291
第14章　PostgreSQL操作 292
14.1　概述 292
14.2　配置指令 293
14.3　配置变量 295
14.4　示例 296
14.5　小结 298
第15章　MongoDB操作 299
15.1　安装 299
15.2　配置 299
15.3　操作函数 300
15.3.1　连接对象方法 300
15.3.2　数据库对象方法 301
15.3.3　列对象方法 301
15.4　示例 302
15.5　小结 303
第16章　bit库的使用 304
16.1　示例 304
16.2　安装 305
16.3　函数 305
16.4　说明 307
16.5　小结 308
第17章　lfs库的使用 309
17.1　目录迭代示例 309
17.2　安装 310
17.3　LuaFileSystem函数 310
17.4　小结 312
第18章　resty.http库的使用 313
18.1　安装 313
18.2　概述 314
18.3　函数 315
18.3.1　连接类 315
18.3.2　应答类 318
18.3.3　代理类 319
18.3.4　工具类 319
18.4　小结 320
第19章　lcurl库的使用 321
19.1　安装 321
19.1.1　安装libcurl 321
19.1.2　安装lcurl 322
19.2　示例 322
19.3　函数 324
19.3.1　httpform类 325
19.3.2　easy类 327
19.3.3　multi类 331
19.3.4　error类 333
19.3.5　share类 333
19.4　常用变量 334
19.4.1　字符串数组类选项 334
19.4.2　字符串选项 334
19.4.3　数值型选项 336
19.4.4　布尔型选项 337
19.5　完整示例 338
19.6　小结 340
第20章　FFI扩展C库 341
20.1　示例 341
20.1.1　调用外部C函数 341
20.1.2　使用C结构体数据 342
20.2　FFI库的使用 344
20.2.1　载入FFI库 344
20.2.2　访问标准系统函数 344
20.2.3　访问zlib压缩库 345
20.2.4　为一个C类型定义元方法 346
20.2.5　转换C语法 347
20.3　FFI API 348
20.3.1　声明和访问外部符号 348
20.3.2　创建cdata对象 349
20.3.3　C类型信息 349
20.3.4　功能函数 350
20.3.5　特定目标信息 351
20.3.6　方法回调 351
20.3.7　扩展标准库函数 351
20.4　调用curl库的完整示例 352
20.5　小结 352
第21章　cjson库的使用 353
21.1　示例 353
21.2　函数 354
21.3　变量 358
21.4　小结 358
第22章　lua-resty-template类的使用 359
22.1　示例 359
22.2　模板符号 360
22.2.1　短转义符号 361
22.2.2　上下文表中的复杂key 361
22.2.3　HTML转义 361
22.2.4　保留的上下文key和评论 362
22.3　安装 363
22.3.1　Nginx/OpenResty配置 363
22.3.2　使用document_root 363
22.3.3　使用template_root 364
22.3.4　使用template_location 364
22.4　Lua API 364
22.5　模板预编译 368
22.6　模板助手 368
22.7　用法示例 369
22.7.1　引用模板 369
22.7.2　Layouts的views 370
22.7.3　使用Blocks 371
22.7.4　继承 373
22.7.5　Macros 374
22.7.6　调用模板中的方法 375
22.7.7　模板内嵌的Angular或其他标签/模板 376
22.7.8　模板内嵌的Markdown 376
22.7.9　LSP 377
22.8　FAQ 378
22.9　小结 379
第23章　WebSocket的使用 380
23.1　示例 381
23.2　安装 383
23.3　resty.websocket.server 383
23.4　resty.websocket.client 386
23.5　resty.websocket.protocol 389
23.6　使用注意事项 390
23.7　小结 390
第24章　TCP私有服务器实例 391
24.1　协议 391
24.1.1　协议总体要求 391
24.1.2　包头定义 392
24.1.3　协议命令 393
24.2　DDP系统架构 394
24.3　DDP服务实现 395
24.3.1　nginx.conf配置 395
24.3.2　init.lua 398
24.3.3　ddp.lua 399
24.3.4　DDP代码解析 405
24.3.5　Redis和MySQL的
location 407
24.3.6　管理页面REST操作 411
24.4　小结 412
第25章　WebSocket接入服务器实战 413
25.1　nginx.conf内容 413
25.2　ws_svr.lua内容 421
25.3　update_alarts代码 436
25.4　小结 438
第26章　Nginx应用简述 439
26.1　简单系统 439
26.2　读写分离系统 439
26.3　引入缓存系统 440
26.4　缓存主从系统 441
26.5　小结 442
第五部分　开发手册
第27章　ngx_lua_module模块配置指令详解 444
27.1　概述 444
27.2　Lua配置顺序 456
27.3　配置指令 457
27.4　小结 487
第28章　ngx_lua API详解 488
28.1　概述 488
28.2　API与常量 491
28.3　小结 565
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Nginx Lua开发实战
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Nginx实战：基于Lua语言的配置、开发与架构详解
第1章  Nginx学前必知  1
1.1  HTTP请求报文  1
1.2  HTTP响应报文  2
1.3  安装Nginx  2
1.4  支持HTTPS  4
1.5  添加模块  4
1.6  小结  4
第2章  基础配置  5
2.1  Nginx指令和指令块  5
2.2  Nginx基本配置说明  6
2.2.1  Main配置  6
2.2.2  与客户端有关的配置  7
2.2.3  server块  7
2.2.4  location块  8
2.3  include的使用  9
2.4  常见配置  9
2.4.1  常见配置注解  10
2.4.2  常见配置实战技巧  11
2.5  内置变量  13
2.5.1  常见内置变量  13
2.5.2  常见内置变量实战技巧  15
2.6  小结  16
第3章  强化基础配置  17
3.1  牢记Context标识  17
3.2  获取请求的IP地址  18
3.2.1  获取用户的真实IP地址  18
3.2.2  防止IP地址伪造  19
3.2.3  后端服务器对IP地址的需求  19
3.3  管理请求的行为  20
3.3.1  限制IP地址的访问  20
3.3.2  auth身份验证  21
3.3.3  利用LDAP服务加强安全  22
3.3.4  satisfy二选一的访问限制功能  23
3.4  proxy代理  23
3.4.1  proxy_pass请求代理规则  24
3.4.2  减少后端服务器的网络开销  24
3.4.3  控制请求头和请求体  25
3.4.4  控制请求和后端服务器的交互时间  26
3.5  upstream使用手册  26
3.5.1  代理多台服务器  27
3.5.2  故障转移  28
3.5.3  负载均衡  29
3.5.4  通过hash分片提升缓存命中率  29
3.5.5  利用长连接提升性能  30
3.5.6  利用resolver加速内部域名访问  31
3.6  rewrite使用手册  32
3.6.1  内部重定向  32
3.6.2  域名跳转  33
3.6.3  跳转POST请求  34
3.6.4  设置变量的值  34
3.7  限速白名单  35
3.8  日志  36
3.8.1  记录自定义变量  36
3.8.2  日志格式规范  36
3.8.3  日志存储  37
3.9  HTTP执行阶段  38
3.10  小结  39
第4章  常用模块精解  40
4.1  定制HTTP头信息  40
4.1.1  使用ngx_http_headers_module设置响应头  40
4.1.2  使用headers-more-nginx控制请求头和响应头  43
4.2  第三方模块set-misc-nginx  45
4.2.1  设置变量  46
4.2.2  防止SQL注入  46
4.2.3  字符串非转义和转义  47
4.2.4  基于键值的集群分片  48
4.2.5  base编码  48
4.2.6  md5编码  50
4.2.7  生成随机数  50
4.2.8  本地时间的输出  52
4.2.9  实战经验  52
4.3  图片的处理  53
4.3.1  image_filter图片处理  53
4.3.2  采用渐进式方式打开JPEG图片  55
4.3.3  WebP格式  56
4.3.4  优化图片  56
4.3.5  实战经验：动态切图  58
4.4  TCP和UDP代理  58
4.4.1  代理配置说明  58
4.4.2  DNS服务的反向代理  62
4.4.3  MySQL集群代理配置  62
4.4.4  实战经验  63
4.5  常用模块介绍  63
4.5.1  基于访问IP地址跳转到对应城市  63
4.5.2  修改响应内容  65
4.5.3  零像素文件的生成及其作用  66
4.5.4  图片的防盗链  67
4.6  小结  68
第5章  缓存系统  69
5.1  缓存配置说明  69
5.2  控制缓存有效期  71
5.3  性能优化  72
5.3.1  缓存未命中的最佳实践  72
5.3.2  横向扩展最佳实践  75
5.3.3  避免硬盘I/O阻塞  76
5.3.4  集群模式  77
5.4  高可用方案  77
5.5  proxy_cache配置模板  78
5.6  小结  81
第6章  引入Lua  82
6.1  为什么要引入Lua  82
6.2  Lua和LuaJIT  83
6.3  环境搭建  83
6.4  Lua的数据类型  84
6.4.1  类型说明  84
6.4.2  类型示例  85
6.5  表达式  89
6.5.1  算术运算符  89
6.5.2  关系运算符  90
6.5.3  逻辑运算符  91
6.5.4  字符串连接和字符串长度计算  92
6.5.5  运算符优先级  93
6.6  变量  93
6.6.1  全局变量  94
6.6.2  局部变量  94
6.6.3  变量赋值  94
6.7  流程控制  95
6.7.1  if-else  95
6.7.2  for循环  96
6.7.3  while循环  97
6.7.4  break和return  97
6.8  函数  98
6.8.1  函数格式  98
6.8.2  传参方式  99
6.8.3  函数的创建位置  100
6.9  模块  100
6.9.1  模块格式  101
6.9.2  加载模块  101
6.10  Lua常见操作  102
6.10.1  操作table  102
6.10.2  定义字符串  103
6.10.3  字符串连接  104
6.11  引入Lua的插曲  104
6.12  小结  105
第7章  Lua-Nginx-Module常用指令  106
7.1  Nginx和OpenResty  106
7.2  安装Ngx_Lua  107
7.3  牢记Context标识  108
7.4  Hello world  108
7.5  避免I/O阻塞  109
7.6  定义模块搜索路径  109
7.6.1  定义Lua模块的搜索路径  109
7.6.2  定义C模块的搜索路径  110
7.7  读/写Nginx的内置变量  110
7.8  控制请求头  111
7.8.1  添加请求头  111
7.8.2  清除请求头  112
7.8.3  获取请求头  112
7.9  控制响应头  113
7.9.1  获取响应头  113
7.9.2  修改响应头  114
7.9.3  清除响应头  116
7.10  读取请求体  116
7.10.1  强制获取请求体  116
7.10.2  用同步非阻塞方式获取请求体  117
7.10.3  使用场景示例  118
7.10.4  使用建议  121
7.11  输出响应体  121
7.11.1  异步发送响应体  121
7.11.2  同步发送响应体  122
7.12  正则表达式  124
7.12.1  单一捕获  124
7.12.2  全部捕获  125
7.12.3  更高效的匹配和捕获  126
7.12.4  替换数据  128
7.12.5  转义符号  129
7.13  子请求  130
7.13.1  请求方法  130
7.13.2  单一子请求  130
7.13.3  并发子请求  134
7.14  获取Nginx的环境变量  135
7.14.1  获取环境所在的模块  135
7.14.2  确认调试模式  136
7.14.3  获取prefix路径  136
7.14.4  获取Nginx的版本号  136
7.14.5  获取configure信息  136
7.14.6  获取Ngx_Lua的版本号  137
7.14.7  判断worker进程是否退出  137
7.14.8  获取worker进程的ID  137
7.14.9  获取worker进程的数量  137
7.15  定时任务  138
7.15.1  创建定时任务  138
7.15.2  性能优化  140
7.15.3  禁用的Lua API  141
7.16  常用指令  142
7.16.1  请求重定向  142
7.16.2  日志记录  144
7.16.3  请求中断处理  146
7.17  提升开发和测试效率  149
7.17.1  断开客户端连接  149
7.17.2  请求休眠  150
7.17.3  获取系统时间  150
7.17.4  编码与解码  152
7.17.5  防止SQL注入  154
7.17.6  判断是否为子请求  155
7.17.7  设置MIME类型  156
7.18  小结  156
第8章  Ngx_Lua的执行阶段  157
8.1  init_by_lua_block  157
8.1.1  阶段说明  157
8.1.2  初始化配置  158
8.1.3  控制初始值  159
8.1.4  init_by_lua_file  160
8.1.5  可使用的Lua API指令  160
8.2  init_worker_by_lua_block  160
8.2.1  阶段说明  160
8.2.2  启动Nginx的定时任务  161
8.2.3  动态进行后端健康检查  162
8.3  set_by_lua_block  165
8.3.1  阶段说明  165
8.3.2  变量赋值  165
8.3.3  rewrite阶段的混用模式  166
8.3.4  阻塞事件  167
8.3.5  被禁用的Lua API指令  167
8.4  rewrite_by_lua_block  168
8.4.1  阶段说明  168
8.4.2  利用rewrite_by_lua_no_postpone改变执行顺序  168
8.4.3  阶段控制  169
8.5  access_by_lua_block  169
8.5.1  阶段说明  169
8.5.2  利用access_by_lua_no_postpone改变执行顺序  170
8.5.3  阶段控制  170
8.5.4  动态配置黑白名单  170
8.6  content_by_lua_block  170
8.6.1  阶段说明  170
8.6.2  动态调整执行文件的路径  171
8.7  balancer_by_lua_block  171
8.7.1  阶段说明  171
8.7.2  被禁用的Lua API指令  172
8.8  header_filter_by_lua_block  172
8.8.1  阶段说明  172
8.8.2  被禁用的Lua API指令  173
8.9  body_filter_by_lua_block  173
8.9.1  阶段说明  173
8.9.2  控制响应体数据  173
8.9.3  被禁用的Lua API指令  175
8.10  log_by_lua_block  176
8.10.1  阶段说明  176
8.10.2  被禁用的Lua API指令  176
8.11  Lua和ngx.ssl  177
8.12  Ngx_Lua执行阶段  177
8.13  小结  180
第9章  Nginx与数据库的交互  181
9.1  安装cjson  181
9.2  与MySQL交互  183
9.2.1  安装lua-resty-mysql模块  183
9.2.2  读取MySQL数据  183
9.2.3  执行多条SQL语句  187
9.2.4  防止SQL注入  189
9.3  与Redis交互  189
9.3.1  安装lua-resty-redis  189
9.3.2  读/写Redis  189
9.3.3  管道命令  191
9.3.4  密码登录  193
9.3.5  其他执行命令  194
9.4  与数据库交互的常见问题  194
9.4.1  连接池  194
9.4.2  读/写分离  197
9.4.3  分离配置文件和代码  197
9.5  小结  198
第10章  缓存利器  199
10.1   worker进程的共享内存  200
10.1.1  创建共享内存区域  200
10.1.2  操作共享内存  201
10.1.3  制造消息队列  205
10.1.4  lua-resty-core  207
10.1.5  配置环境  208
10.2  Lua模块下的共享内存  209
10.2.1  安装lua-resty-lrucache  209
10.2.2  使用lua-resty-lrucache进行缓存的方法  209
10.3  当前请求在各执行阶段间的数据共享  213
10.3.1  ngx.ctx的使用  213
10.3.2  子请求和内部重定向的缓存区别  214
10.4  利用共享内存配置动态IP地址认证  215
10.5  缓存和数据库的交互  218
10.5.1  从数据库获取数据  218
10.5.2  避免因缓存失效引起的“风暴”  223
10.6  小结  228
第11章  动态管理upstream  229
11.1  实战需求分析  230
11.2  ngx_http_dyups_module  230
11.2.1  安装模块  230
11.2.2  动态管理upstream  230
11.2.3  确保upstream数据的完整性  232
11.3  nginx-upsync-module  233
11.3.1  安装nginx-upsync-module和Consul  233
11.3.2  Consul的键值操作  234
11.3.3  动态管理upstream  235
11.3.4  验证动态配置功能  237
11.3.5  高可用、高并发设计  237
11.4  基于balancer_by_lua_block的灵活控制  238
11.5  小结  239
第12章  Nginx日志分析系统  240
12.1  实战需求分析  240
12.2  ngxtop实时分析  241
12.3  Flume方案的日志分析  243
12.4  智能化nginx_log_analysis  244
12.4.1  架构重构  244
12.4.2  日志远程传输  245
12.4.3  时序数据库  245
12.4.4  日志规则设计  245
12.5  lua-resty-logger-socket传输方案  246
12.5.1  安装lua-resty-logger-socket  246
12.5.2  远程传输配置  247
12.5.3  参数解读  248
12.6  时序数据库InfluxDB  249
12.6.1  安装InfluxDB  249
12.6.2  基本概念和操作  249
12.6.3  数据分析之查询函数  250
12.6.4  数据存放之保留策略  251
12.6.5  定时任务之连续查询  251
12.6.6  客户端操作之API  252
12.6.7  使用UDP模式传输数据  253
12.7  利用lua-resty-http实现API交互  254
12.7.1  安装lua-resty-http  254
12.7.2  使用方式  254
12.8  提升InfluxDB性能  255
12.9  小结  255
第13章  静态容灾系统  256
13.1  荆棘之路  257
13.2  设计之路  259
13.3  架构流程图  261
13.3.1  反向代理系统  261
13.3.2  日志分析系统  261
13.3.3  后台系统  261
13.3.4  爬虫系统  262
13.3.5  容灾的缓存系统  262
13.3.6  时间版本的用途  263
13.3.7  异地容灾  263
13.4  核心代码解说  264
13.4.1  Ngx_Lua应用  264
13.4.2  爬虫和日志系统的关系  266
13.4.3  全部容灾和部分容灾功能  266
13.5  静态容灾的智能关闭方案  267
13.5.1  从日志分析系统中复制请求  267
13.5.2  利用goreplay复制流量  267
13.5.3  Nginx的镜像功能  268
13.5.4  灰度验证容灾系统缓存  269
13.6  小结  269
第14章  深入挖掘反向代理  270
14.1  验证码防御中心  270
14.2  鉴权管理中心  272
14.2.1  利用auth_request管理鉴权  272
14.2.2  利用Ngx_Lua子请求实现鉴权功能  273
14.3  并行访问  274
14.3.1  轻线程的启动和终止  275
14.3.2  等待和终止轻线程  276
14.3.3  URL的外部合并和内部并发  278
14.3.4  使用cosocket实现外部访问  281
14.4  小结  281
第15章  爬虫  282
15.1  区分搜索引擎爬虫和恶意爬虫  282
15.2  应对搜索引擎爬虫  284
15.2.1  搜索引擎的User-Agent  284
15.2.2  Robots协议  285
15.2.3  控制搜索引擎爬虫实战  286
15.3  应对恶意爬虫  288
15.3.1  发现恶意爬虫  288
15.3.2  抵御恶意爬虫之禁止访问  289
15.3.3  抵御恶意爬虫之验证码拦截  290
15.4  小插曲——使用假数据迷惑恶意爬虫  290
15.5  小结  291
第16章  性能分析和优化  292
16.1  性能分析场景搭建  292
16.1.1  安装SystemTap  292
16.1.2  LuaJIT的Debug模式  293
16.1.3  开启PCRE的Debug模式  294
16.1.4  分析工具下载  294
16.1.5  找出Debug不支持的包  295
16.2  流量复制  295
16.3  各项指标分析和优化建议  295
16.3.1  连接池使用状态分析  295
16.3.2  找出读/写频繁的文件  297
16.3.3  执行阶段耗时分析  297
16.3.4  连接数和文件打开数分析  298
16.3.5  找出CPU“偷窃者”  298
16.3.6  正则表达式耗时分析  299
16.3.7  找出消耗CPU资源较多的指令  301
16.3.8  利用火焰图展示和分析数据  303
16.4  检查全局变量  305
16.5  小结  305
第17章  值得拥有的OpenResty  306
17.1  OPM  307
17.2  使用DNS提升访问效率  309
17.3  TCP和UDP服务  310
17.4  多层级缓存  312
17.5  lua-resty-core扩展  313
17.6  字符串分割  313
17.7  Nginx进程管理  313
17.8  全局唯一标识符UUID  315
17.9  “全家福”awesome-resty  316
17.10  OpenResty，未来！  316
第18章  开发环境下的常见问题  317
18.1  被截断的响应体  317
18.2  “邪恶”的if  317
18.3  “贪婪”的正则匹配  318
18.4  规范HTTP状态码  319
18.5  规范URL  319
18.6  proxy_set_header的误操作  320
18.7  开发环境下的证书问题  320
18.8  深层次的错误重定向  323
18.9  压测环境下的限速和短连接  323
18.10  小结  323
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Nginx实战：基于Lua语言的配置、开发与架构详解
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Nginx完全开发指南：使用C、C++、JavaScript和Lua
第0章  导读	1
0.1  关于本书	1
0.2  读者对象	3
0.3  读者要求	4
0.4  运行环境	5
0.5  本书的结构	5
0.6  如何阅读本书	6
0.7  本书的源码	7
第1章  Nginx入门	8
1.1  关于Nginx	8
1.1.1  历史	9
1.1.2  特点	9
1.1.3  进程模型	10
1.1.4  版本	12
1.2  安装Nginx	12
1.2.1  准备工作	13
1.2.2  快速安装	13
1.2.3  运行命令	14
1.2.4  验证安装	15
1.2.5  定制安装	16
1.3  配置Nginx	18
1.3.1  语法格式	19
1.3.2  进程管理	20
1.3.3  动态模块	22
1.3.4  运行日志	22
1.3.5  事件机制	22
1.4  HTTP服务	23
1.4.1  基本配置	24
1.4.3  location配置	25
1.4.4  file配置	26
1.5  TCP/UDP服务	27
1.6  反向代理	28
1.6.1  上游集群	28
1.6.2  负载均衡	29
1.6.3  代理转发	30
1.7  变量	30
1.8  总结	32
第2章  Nginx开发准备	33
2.1  源码结构	33
2.2  源码特点	34
2.2.1  代码风格	34
2.2.2  代码优化	35
2.2.3  面向对象思想	35
2.3  头文件	36
2.4  总结	36
第3章  Nginx基础设施	37
3.1  常数	37
3.1.1  环境信息	37
3.1.2  版本信息	38
3.1.3  错误码	38
3.2  整数类型	39
3.2.1  标准整数类型	39
3.2.2  自用整数类型	40
3.2.3  无效值	40
3.3  内存池	42
3.3.1  结构定义	42
3.3.2  操作函数	43
3.3.3  用法示例	44
3.4  字符串	44
3.4.1  结构定义	44
3.4.2  操作函数	45
3.4.3  用法示例	48
3.5  时间	49
3.5.1  结构定义	49
3.5.2  操作函数	49
3.5.3  用法示例	50
3.6  日期	50
3.6.1  结构定义	50
3.6.2  操作函数	51
3.6.3  用法示例	52
3.7  运行日志	52
3.7.1  结构定义	52
3.7.2  操作函数	53
3.7.3  用法示例	54
3.8  摘要算法	54
3.8.1  Times33	55
3.8.2  CRC	55
3.8.3  MurmurHash	56
3.8.4  MD5	57
3.8.5  SHA-1	57
3.9  数据编码	58
3.9.1  Base64	58
3.9.2  HTML/JSON	59
3.10  总结	60
第4章  Nginx高级数据结构	61
4.1  动态数组	61
4.1.1  结构定义	62
4.1.2  操作函数	63
4.1.3  用法示例	64
4.2  单向链表	65
4.2.1  结构定义	65
4.2.2  操作函数	66
4.2.3  用法示例	66
4.3  双端队列	68
4.3.1  结构定义	68
4.3.2  操作函数	69
4.3.3  用法示例	71
4.4  红黑树	72
4.4.1  结构定义	73
4.4.2  操作函数	75
4.4.3  用法示例	76
4.5  缓冲区	78
4.5.1  结构定义	78
4.5.2  操作函数	80
4.5.3  用法示例	81
4.6  数据块链	82
4.6.1  结构定义	82
4.6.2  操作函数	83
4.6.3  用法示例	83
4.7  总结	84
第5章  Nginx开发概述	85
5.1  开发示例	85
5.1.1  模块设计	85
5.1.2  配置解析	86
5.1.3  处理函数	88
5.1.4  模块集成	90
5.1.5  编译脚本	91
5.1.6  测试验证	92
5.2  开发流程	92
5.2.1  设计	93
5.2.2  开发	93
5.2.3  编译	94
5.2.4  测试验证	94
5.2.5  调优	94
5.2.6  流程图	95
5.3  编译脚本	95
5.3.1  运行机制	96
5.3.2  脚本变量	96
5.3.3  添加模块	97
5.3.4  脚本格式	97
5.3.5  旧式脚本	98
5.4  总结	99
第6章  Nginx模块体系	100
6.1  模块架构	100
6.1.1  结构定义	100
6.1.2  模块的签名	102
6.1.3  模块的种类	103
6.1.4  模块的函数指针表	104
6.1.5  模块的类图	105
6.1.6  模块的组织形式	106
6.1.7  模块的静态加载	108
6.1.8  模块的动态加载	110
6.2  配置解析	113
6.2.1  结构定义	113
6.2.2  配置解析的基本流程	116
6.2.3  存储模型	118
6.2.4  访问配置数据	122
6.2.5  配置数据的位置	123
6.2.6  配置数据的解析	124
6.2.7  配置数据的合并	126
6.2.8  配置指令的类型	127
6.3  源码分析	128
6.3.1  ngx_core_module	128
6.3.2  ngx_errlog_module	130
6.4  总结	132
第7章  Nginx功能框架	134
7.1  框架简介	134
7.1.1  模块分类	134
7.1.2  处理流程	135
7.1.3  请求的处理阶段	137
7.1.4  请求结构体	138
7.1.5  请求的环境数据	140
7.2  处理引擎	141
7.2.1  函数原型	141
7.2.2  处理函数的存储方式	141
7.2.3  内容处理函数	142
7.2.4  引擎的数据结构	143
7.2.5  引擎的初始化	144
7.2.6  引擎的运行机制	145
7.2.7  日志阶段的处理	148
7.3  过滤引擎	148
7.3.1  函数原型	148
7.3.2  过滤函数链表	149
7.3.3  过滤函数的顺序	150
7.3.4  过滤链表的运行机制	152
7.3.5  请求体过滤	153
7.4  源码分析	153
7.4.1  ngx_http_static_module	154
7.4.2  ngx_http_not_modified_filter_module	155
7.5  总结	156
第8章  Nginx请求处理	158
8.1  状态码	158
8.2  请求结构体	159
8.3  请求行	160
8.3.1  请求方法	160
8.3.2  协议版本号	161
8.3.3  资源标识符	161
8.4  请求头	162
8.5  请求体	163
8.5.1  结构定义	163
8.5.2  操作函数	164
8.6  响应头	164
8.6.1  结构定义	164
8.6.2  操作函数	165
8.7  响应体	166
8.8  源码分析	166
8.8.1  ngx_http_static_module	166
8.8.2  ngx_http_not_modified_filter_module	168
8.9  开发示例：content handler	169
8.9.1  模块设计	169
8.9.2  配置数据	169
8.9.3  处理函数	170
8.9.4  注册函数	171
8.9.5  模块集成	172
8.9.6  编译脚本	173
8.9.7  测试验证	173
8.10  开发示例：filter	173
8.10.1  模块设计	173
8.10.2  配置数据	174
8.10.3  环境数据	174
8.10.4  注册过滤函数	175
8.10.5  过滤响应头	175
8.10.6  过滤响应体	176
8.10.7  模块集成	178
8.10.8  编译脚本	179
8.10.9  测试验证	179
8.11  总结	180
第9章  Nginx请求转发	181
9.1  框架简介	181
9.1.1  工作原理	182
9.1.2  请求结构体	183
9.1.3  上游结构体	184
9.1.4  上游配置参数	185
9.2  请求转发	186
9.2.1  回调函数	186
9.2.2  初始化	188
9.2.3  设置参数	189
9.2.4  启动连接	190
9.2.5  处理响应头	190
9.2.6  处理响应体	191
9.3  负载均衡	192
9.3.1  结构定义	192
9.3.2  初始化模块入口	196
9.3.3  初始化地址列表	197
9.3.4  初始化算法	199
9.3.5  执行算法	200
9.4  源码分析	200
9.4.1  ngx_http_memcached_module	201
9.4.2  ngx_http_upstream_ip_hash_module	203
9.5  开发示例：upstream	206
9.5.1  模块设计	206
9.5.2  配置数据	206
9.5.3  上行数据	208
9.5.4  下行数据	208
9.5.5  启动转发	209
9.5.6  注册函数	210
9.5.7  模块集成	210
9.5.8  编译脚本	211
9.5.9  测试验证	212
9.6  开发示例：balance	212
9.6.1  模块设计	212
9.6.2  配置数据	212
9.6.3  算法数据结构	213
9.6.4  模块入口	213
9.6.5  算法实现	214
9.6.6  模块集成	215
9.6.7  编译脚本	216
9.6.8  测试验证	216
9.7  总结	216
第10章  Nginx子请求	218
10.1  框架简介	218
10.1.1  工作原理	219
10.1.2  请求结构体	220
10.1.3  回调函数	221
10.1.4  待处理请求链表	223
10.1.5  子请求存储结构	223
10.2  运行机制	223
10.2.1  创建子请求	224
10.2.2  处理引擎	228
10.2.3  数据整理	229
10.3  开发示例	230
10.3.1  模块设计	231
10.3.2  配置数据	231
10.3.3  环境数据	231
10.3.4  回调函数	231
10.3.5  处理函数	232
10.3.6  注册函数	233
10.3.7  测试验证	234
10.4  总结	234
第11章  Nginx变量	236
11.1  结构定义	236
11.1.1  变量	237
11.1.2  复杂变量	238
11.1.3  变量的存储	239
11.1.4  请求结构体	239
11.2  操作变量	240
11.2.1  添加变量	240
11.2.2  获取变量	241
11.2.3  修改变量	242
11.2.4  编译复杂变量	242
11.2.5  获取复杂变量	242
11.3  开发示例：变量	243
11.3.1  模块设计	243
11.3.2  定义变量	243
11.3.3  添加变量	244
11.3.4  获取变量	244
11.3.5  测试验证	245
11.4  开发示例：复杂变量	246
11.4.1  模块设计	246
11.4.2  定义复杂变量	246
11.4.3  编译复杂变量	246
11.4.4  获取复杂变量	247
11.4.5  测试验证	247
11.5  总结	247
第12章  Nginx内存管理机制	249
12.1  基本系统调用	250
12.1.1  malloc	250
12.1.2  posix_memalign	251
12.1.3  free	251
12.2  块式内存池	252
12.2.1  结构定义	252
12.2.2  常量定义	255
12.2.3  创建内存池	255
12.2.4  分配内存	257
12.2.5  分配大块内存	258
12.2.6  分配小块内存	259
12.2.7  释放内存	264
12.2.8  清理机制	264
12.2.9  清空内存池	265
12.2.10  销毁内存池	266
12.3  页式内存池	267
12.3.1  结构定义	268
12.3.2  常量定义	270
12.3.3  初始化内存池	271
12.3.4  分配内存	273
12.3.5  分配大块内存	275
12.3.6  分配小块内存	277
12.3.7  释放内存	280
12.4  总结	282
第13章  Nginx进程机制	284
13.1  基本系统调用	284
13.1.1  errno	284
13.1.2  getrlimit	285
13.2  进程系统调用	285
13.2.1  getpid	285
13.2.2  fork	286
13.2.3  waitpid	286
13.3  信号系统调用	287
13.3.1  kill	287
13.3.2  sigaction	288
13.3.3  sigsuspend	288
13.4  结构定义	288
13.4.1  ngx_cycle_t	288
13.4.2  ngx_core_conf_t	289
13.4.3  ngx_process_t	290
13.5  全局变量	291
13.5.1  命令行相关	291
13.5.2  操作系统相关	292
13.5.3  进程功能相关	292
13.5.4  信号功能相关	293
13.6  启动过程	293
13.6.1  基本流程	293
13.6.2  解析命令行	294
13.6.3  版本和帮助信息	294
13.6.4  初始化cycle	294
13.6.5  测试配置	296
13.6.6  发送信号	297
13.6.7  守护进程化	297
13.6.8  启动工作进程	298
13.6.9  流程图	298
13.7  信号处理	299
13.7.1  信号处理函数	300
13.7.2  发送信号	300
13.7.3  处理信号	301
13.8  单进程模式	302
13.8.1  single进程	302
13.8.2  single进程流程图	304
13.9  多进程模式	304
13.9.1  产生子进程	304
13.9.2  master进程	306
13.9.3  master进程流程图	309
13.9.4  worker进程	310
13.9.5  worker进程流程图	312
13.10  总结	313
第14章  Nginx进程间通信机制	315
14.1  基本系统调用	315
14.1.1  atomic	315
14.1.2  sched_yield	316
14.1.3  semaphore	316
14.1.4  mmap	317
14.2  共享内存（Ⅰ）	317
14.2.1  结构定义	317
14.2.2  创建共享内存	317
14.2.3  使用共享内存	318
14.3  自旋锁	318
14.3.1  自旋锁定	319
14.3.2  解除锁定	320
14.3.3  使用自旋锁	320
14.4  互斥锁	320
14.4.1  结构定义	320
14.4.2  创建互斥锁	321
14.4.3  互斥锁定	322
14.4.4  解除锁定	323
14.4.5  销毁互斥锁	324
14.4.6  使用互斥锁	324
14.5  读写锁	325
14.5.1  写锁定	325
14.5.2  读锁定	325
14.5.3  解除锁定	326
14.5.4  降级锁定	326
14.5.5  使用读写锁	327
14.6  共享内存（Ⅱ）	327
14.6.1  结构定义	327
14.6.2  添加共享内存	328
14.6.3  创建共享内存	329
14.6.4  使用共享内存	330
14.7  总结	331
第15章  Nginx事件机制	333
15.1  基本系统调用	333
15.1.1  errno	334
15.1.2  ioctl	334
15.1.3  setitimer	334
15.1.4  gettimeofday	334
15.2  socket系统调用	335
15.2.1  socket	335
15.2.2  bind	335
15.2.3  listen	336
15.2.4  accept	336
15.2.5  connect	336
15.2.6  recv	336
15.2.7  send	337
15.2.8  setsockopt	337
15.2.9  close	337
15.2.10  函数关系图	338
15.3  epoll系统调用	338
15.3.1  epoll_create	339
15.3.2  epoll_ctl	339
15.3.3  epoll_wait	340
15.3.4  LT和ET	341
15.3.5  函数关系图	342
15.4  结构定义	342
15.4.1  ngx_event_t	342
15.4.2  ngx_connection_t	343
15.4.3  ngx_listening_t	345
15.4.4  ngx_cycle_t	346
15.4.5  ngx_os_io_t	347
15.4.6  ngx_event_actions_t	351
15.4.7  ngx_posted_events	353
15.4.8  关系图	354
15.5  定时器	354
15.5.1  红黑树	354
15.5.2  操作函数	355
15.5.3  超时处理	355
15.6  模块体系	358
15.6.1  函数指针表	358
15.6.2  模块的组织形式	359
15.6.3  核心配置	361
15.6.4  epoll模块	362
15.7  全局变量	363
15.7.1  更新时间相关	363
15.7.2  事件机制相关	364
15.7.3  负载均衡相关	365
15.7.4  统计相关	365
15.8  进程初始化	366
15.8.1  初始化函数	366
15.8.2  基本参数初始化	368
15.8.3  事件机制初始化	369
15.8.4  连接池初始化	370
15.8.5  监听端口初始化	371
15.8.6  初始化流程图	373
15.9  运行机制	373
15.9.1  添加事件	374
15.9.2  删除事件	377
15.9.3  处理事件	378
15.9.4  接受连接	382
15.9.5  负载均衡	384
15.10  避免阻塞	389
15.11  总结	390
第16章  Nginx多线程机制	392
16.1  eventfd系统调用	392
16.2  pthread系统调用	393
16.3  结构定义	393
16.3.1  ngx_thread_task_t	394
16.3.2  ngx_thread_pool_queue_t	394
16.3.3  ngx_thread_pool_t	395
16.3.4  结构关系图	396
16.4  事件通知	396
16.4.1  函数接口	396
16.4.2  初始化	397
16.4.3  发送通知	398
16.4.4  处理通知	398
16.5  运行机制	399
16.5.1  完成任务队列	399
16.5.2  创建线程池	399
16.5.3  创建任务	400
16.5.4  投递任务	401
16.5.5  执行任务	402
16.5.6  任务完成回调	404
16.5.7  销毁线程池	405
16.6  开发示例	406
16.6.1  模块设计	406
16.6.2  配置数据	407
16.6.3  线程任务	407
16.6.4  任务完成回调	408
16.6.5  投递任务	409
16.6.6  测试验证	410
16.7  总结	410
第17章  Nginx Stream机制	412
17.1  模块体系	412
17.1.1  函数指针表	413
17.1.2  基础模块	413
17.1.3  核心模块	415
17.1.4  结构关系图	416
17.1.5  存储模型	416
17.2  监听端口	418
17.2.1  结构定义	418
17.2.2  解析配置	420
17.2.3  启动监听	424
17.3  处理引擎	425
17.3.1  阶段定义	426
17.3.2  函数原型	426
17.3.3  处理函数的存储方式	426
17.3.4  引擎数据结构	427
17.3.5  结构关系图	428
17.3.6  引擎的初始化	428
17.4  过滤引擎	430
17.4.1  函数原型	430
17.4.2  过滤函数链表	430
17.5  运行机制	431
17.5.1  会话结构体	431
17.5.2  创建会话	432
17.5.3  执行引擎	435
17.5.4  通用阶段处理	437
17.5.5  预读数据	438
17.5.6  产生响应数据	442
17.5.7  过滤数据	442
17.5.8  结束会话	442
17.6  开发示例	443
17.6.1  discard协议	444
17.6.2  time协议	446
17.6.3  echo协议	448
17.7  总结	450
第18章  Nginx HTTP机制	452
18.1  结构定义	452
18.1.1  ngx_http_state_e	452
18.1.2  ngx_http_connection_t	453
18.1.3  ngx_http_request_t	453
18.2  初始化连接	454
18.2.1  建立连接	455
18.2.2  等待数据	456
18.2.3  读取请求头	458
18.3  执行引擎	463
18.3.1  初始化引擎	463
18.3.2  通用阶段	465
18.3.3  改写阶段	466
18.3.4  访问控制阶段	467
18.3.5  内容产生阶段	469
18.4  处理请求体	470
18.4.1  丢弃缓冲区数据	470
18.4.2  读取并丢弃数据	471
18.4.3  读事件处理函数	473
18.4.4  启动丢弃处理	474
18.5  发送数据	475
18.5.1  发送初始化	475
18.5.2  事件处理函数	476
18.6  结束请求	478
18.6.1  释放请求资源	478
18.6.2  检查引用计数结束请求	479
18.6.3  检查状态结束请求	480
18.6.4  综合处理结束请求	481
18.7  总结	483
第19章  Nginx与设计模式	485
19.1  设计模式简介	485
19.2  框架级别的模式	485
19.3  业务级别的模式	487
19.4  代码级别的模式	488
19.5  总结	490
第20章  Nginx C++开发	491
20.1  语言简介	491
20.2  开发准备	492
20.2.1  程序库	492
20.2.2  头文件	492
20.2.3  编程范式	493
20.2.4  实现原则	493
20.2.5  源码组织	494
20.2.6  编译脚本	495
20.3  封装类	497
20.3.1  基础设施	497
20.3.2  高级数据结构	500
20.3.3  功能框架	505
20.3.4  请求处理	509
20.4  开发示例：content handler	510
20.4.1  配置信息类	510
20.4.2  业务逻辑类	511
20.4.3  模块集成类	512
20.4.4  实现源文件	515
20.5  开发示例：filter	515
20.5.1  配置信息类	515
20.5.2  环境数据类	515
20.5.3  业务逻辑类	516
20.5.4  模块集成类	518
20.5.5  实现源文件	519
20.6  总结	519
第21章  Nginx JavaScript开发	521
21.1  语言简介	521
21.2  模块简介	522
21.3  开发准备	523
21.4  指令简介	523
21.5  功能接口	524
21.5.1  运行日志	524
21.5.2  变量	525
21.5.3  请求处理	525
21.5.4  子请求	527
21.5.5  定时器	527
21.5.6  流处理	527
21.6  开发示例	528
21.6.1  content handler	528
21.6.2  subrequest	529
21.6.3  A/B testing	530
21.7  总结	531
第22章  Nginx Lua开发	532
22.1  语言简介	532
22.2  模块简介	533
22.2.1  http_lua	533
22.2.2  stream_lua	533
22.2.3  lua-resty-lib	534
22.3  开发准备	534
22.4  指令简介	535
22.4.1  配置指令	536
22.4.2  功能指令	536
22.4.3  指令关系图	538
22.5  应用开发流程	538
22.6  功能接口	539
22.6.1  运行日志	539
22.6.2  时间与日期	540
22.6.3  变量	540
22.6.4  正则表达式	541
22.6.5  请求处理	542
22.6.6  请求转发	544
22.6.7  子请求	545
22.6.8  定时器	546
22.6.9  共享内存	546
22.7  开发示例	547
22.7.1  content handler	548
22.7.2  filter	549
22.7.3  upstream	550
22.7.4  subrequest	550
22.7.5  discard	551
22.7.6  echo	552
22.8  总结	552
第23章  Nginx调试与测试	554
23.1  调试	554
23.1.1  调试器	554
23.1.2  调试断点	555
23.1.3  调试日志	556
23.2  功能测试	558
23.2.1  测试套件	559
23.2.2  测试用例	559
23.2.3  运行测试	564
23.3  性能测试	564
23.3.1  ab	565
23.3.2  http_load	565
23.3.3  wrk	566
23.3.4  Test::Nginx	567
23.4  总结	568
第24章  Nginx性能分析	569
24.1  简介	569
24.2  火焰图	570
24.3  分析工具	572
24.3.1  使用方式	572
24.3.2  处理数据	573
24.4  动态追踪	576
24.4.1  CPU分析	577
24.4.2  I/O分析	579
24.4.3  Memory分析	580
24.4.4  观测工具	581
24.5  总结	582
第25章  结束语	583
25.1  本书的遗憾	583
25.2  下一步	583
25.3  临别赠言	584
附录A  推荐书目	585
附录B  字符串格式化	587
附录C  开发辅助工具	589
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Nginx完全开发指南：使用C、C++、JavaScript和Lua

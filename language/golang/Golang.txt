1	{"count":39,"start":0,"total":39,"books":[{"rating":{"max":10,"numRaters":4,"average":"0.0","min":0},"subtitle":"Next Generation Systems Programming with Golang","author":["[英] 乔治.奥尔波(George.Ornbo)"],"pubdate":"2017-12-18","tags":[{"count":2,"name":"编程","title":"编程"},{"count":2,"name":"golang","title":"golang"},{"count":2,"name":"Go","title":"Go"},{"count":1,"name":"计算机","title":"计算机"},{"count":1,"name":"入门","title":"入门"}],"origin_title":"Sams Teach Yourself Go in 24 Hours","image":"https://img9.doubanio.com\/view\/subject\/m\/public\/s29934614.jpg","binding":"Paperback","translator":["张海燕"],"catalog":"第1章 起步 1\n1.1 Go简介 1\n1.1.1 Go语言简史 1\n1.1.2 Go是编译型语言 2\n1.2 安装Go 2\n1.2.1 在Windows系统中安装 3\n1.2.2 在macOS或Linux系统中安装 4\n1.3 设置环境 4\n1.4 编写第一个Go程序——Hello World 5\n1.4.1 使用 go run 编译并运行程序 6\n1.4.2 Go吉祥物 6\n1.5 小结 6\n1.6 问与答 7\n1.7 作业 7\n1.7.1 小测验 7\n1.7.2 答案 7\n1.8 练习 7\n第2章 理解类型 8\n2.1 数据类型是什么 8\n2.2 区分静态类型和动态类型 8\n2.3 使用布尔类型 11\n2.4 理解数值类型 12\n2.4.1 带符号整数和无符号整数 13\n2.4.2 浮点数 14\n2.4.3 字符串 14\n2.4.4 数组 14\n2.5 检查变量的类型 15\n2.6 类型转换 16\n2.7 小结 17\n2.8 问与答 17\n2.9 作业 17\n2.9.1 小测验 17\n2.9.2 答案 17\n2.10 练习 18\n第3章 理解变量 19\n3.1 变量是什么 19\n3.2 快捷变量声明 21\n3.3 理解变量和零值 21\n3.4 编写简短变量声明 22\n3.5 变量声明方式 23\n3.6 理解变量作用域 24\n3.7 使用指针 25\n3.8 声明常量 27\n3.9 小结 28\n3.10 问与答 28\n3.11 作业 29\n3.11.1 小测验 29\n3.11.2 答案 29\n3.12 练习 29\n第4章 使用函数 30\n4.1 函数是什么 30\n4.1.1 函数的结构 30\n4.1.2 返回单个值 31\n4.1.3 返回多个值 32\n4.2 定义不定参数函数 33\n4.3 使用具名返回值 34\n4.4 使用递归函数 35\n4.5 将函数作为值传递 36\n4.6 小结 38\n4.7 问与答 38\n4.8 作业 38\n4.8.1 小测验 38\n4.8.2 答案 38\n4.9 练习 39\n第5章 控制流程 40\n5.1 使用if语句 40\n5.2 使用else语句 42\n5.3 使用else if语句 43\n5.4 使用比较运算符 44\n5.5 使用算数运算符 45\n5.6 使用逻辑运算符 45\n5.7 使用switch语句 46\n5.8 使用for语句进行循环 47\n5.8.1 包含初始化语句和后续语句的for语句 49\n5.8.2 包含range子句的for语句 49\n5.9 使用defer语句 50\n5.10 小结 52\n5.11 问与答 52\n5.12 作业 53\n5.12.1 小测验 53\n5.12.2 答案 53\n5.13 练习 53\n第6章 数组、切片和映射 54\n6.1 使用数组 54\n6.2 使用切片 56\n6.2.1 在切片中添加元素 56\n6.2.2 在切片中删除元素 58\n6.2.3 赋值切片中的元素 58\n6.3 使用映射 59\n6.3.1 从映射中删除元素 60\n6.4 小结 61\n6.5 问与答 61\n6.6 作业 62\n6.6.1 小测验 62\n6.6.2 答案 62\n6.7 练习 62\n第7章 使用结构体和指针 63\n7.1 结构体是什么 63\n7.2 创建结构体 65\n7.3 嵌套结构体 68\n7.4 自定义结构体数据字段的默认值 69\n7.5 比较结构体 71\n7.6 理解共有和私有值 72\n7.7 区分指针引用和值引用 73\n7.8 小结 75\n7.9 问与答 75\n7.10 作业 76\n7.10.1 小测验 76\n7.10.2 答案 76\n7.11 练习 76\n第8章 创建方法和接口 77\n8.1 使用方法 77\n8.2 创建方法集 79\n8.3 使用方法和指针 80\n8.4 使用接口 83\n8.5 小结 86\n8.6 问与答 86\n8.7 作业 87\n8.7.1 小测验 87\n8.7.2 答案 87\n8.8 练习 87\n第9章 使用字符串 88\n9.1 创建字符串 88\n9.2 理解rune字面量 89\n9.3 拼接字符串 90\n9.3.1 使用缓冲区拼接字符串 92\n9.3.2 理解字符串是什么 93\n9.3.3 处理字符串 94\n9.4 小结 97\n9.5 问与答 97\n9.6 作业 97\n9.6.1 小测验 97\n9.6.2 答案 97\n9.7 练习 98\n第10章 错误处理 99\n10.1 错误处理及Go语言的独特之处 99\n10.2 理解错误类型 101\n10.3 创建错误 101\n10.4 设置错误格式 102\n10.5 从函数返回错误 103\n10.6 错误和可用性 104\n10.7 慎用panic 104\n10.8 小结 106\n10.9 问与答 106\n10.10 作业 106\n10.10.1 小测验 106\n10.10.2 答案 106\n10.11 练习 107\n第11章 使用Goroutine 108\n11.1 理解并发 108\n11.2 并发和并行 110\n11.3 通过Web浏览器来理解并发 110\n11.4 阻塞和非阻塞代码 111\n11.5 使用Goroutine处理并发操作 112\n11.6 定义Goroutine 114\n11.7 小结 114\n11.8 问与答 114\n11.9 作业 115\n11.9.1 小测验 115\n11.9.2 答案 115\n11.10 练习 115\n第12章 通道简介 116\n12.1 使用通道 116\n12.2 使用缓冲通道 119\n12.3 阻塞和流程控制 120\n12.4 将通道用作函数参数 123\n12.5 使用select语句 123\n12.6 退出通道 126\n12.7 小结 128\n12.8 问与答 128\n12.9 作业 128\n12.9.1 小测验 129\n12.9.2 答案 129\n12.10 练习\n第13章 使用包实现代码重用 130\n13.1 导入包 130\n13.2 理解包的用途 131\n13.3 使用第三方包 132\n13.4 安装第三方包 132\n13.5 管理第三方依赖 133\n13.6 创建包 135\n13.7 小结 137\n13.8 问与答 137\n13.9 作业 137\n13.9.1 小测验 137\n13.9.2 答案 138\n13.10 练习 138\n第14章 Go语言命名约定 139\n14.1 Go代码格式设置 139\n14.2 使用gofmt 140\n14.3 配置文本编辑器 141\n14.4 命名约定 142\n14.5 使用golint 143\n14.6 使用godoc 144\n14.7 工作流程自动化 147\n14.8 小结 148\n14.9 问与答 149\n14.10 作业 149\n14.10.1 小测验 149\n14.10.2 答案 149\n14.11 练习 149\n第15章 测试和性能 150\n15.1 测试：软件开发最重要的方面 150\n15.1.1 单元测试 151\n15.1.2 集成测试 151\n15.1.3 功能测试 151\n15.1.4 测试驱动开发 151\n15.2 testing包 151\n15.3 运行表格测试驱动 154\n15.4 基准测试 156\n15.5 提供测试覆盖率 158\n15.6 小结 159\n15.7 问与答 159\n15.8 作业 159\n15.8.1 小测验 159\n15.8.2 答案 159\n15.9 练习 160\n第16章 调试 161\n16.1 日志 161\n16.2 打印数据 164\n16.3 使用fmt包 165\n16.4 使用Delve 168\n16.5 使用gdb 170\n16.6 小结 171\n16.7 问与答 171\n16.8 作业 171\n16.8.1 小测验 171\n16.8.2 答案 172\n16.9 练习 172\n第17章 使用命令行程序 173\n17.1 操作输入和输出 174\n17.2 访问命令行参数 174\n17.3 分析命令行标志 176\n17.4 指定标志的类型 177\n17.5 自定义帮助文本 178\n17.6 创建子命令 179\n17.7 POSIX兼容性 182\n17.8 安装分享命令行程序 182\n17.9 小结 184\n17.10 问与答 184\n17.11 作业 184\n17.11.1小测验 185\n17.11.2 答案 185\n17.12 练习 185\n第18章 创建HTTP服务器 186\n18.1 通过Hello World Web服务器宣告您的存在 186\n18.2 查看请求和响应 187\n18.2.1 使用curl发出请求 188\n18.2.2 详谈路由 189\n18.3 使用处理程序函数 189\n18.4 处理404错误 190\n18.5 设置报头 191\n18.6响应以不同类型的内容 192\n18.7 响应不同类型的请求 194\n18.8 获取GET和POST请求中的数据 195\n18.9 小结 197\n18.10 问与答 198\n18.11 作业 198\n18.11.1 小测验 198\n18.11.2 答案 198\n18.12 练习 199\n第19章 创建HTTP客户端 200\n19.1 理解HTTP 200\n19.2 发出GET请求 201\n19.3 发出POST请求 202\n19.4 进一步控制HTTP请求 204\n19.5 调试HTTP请求 205\n19.6 处理超时 207\n19.7 小结 208\n19.8 问与答 209\n19.9 作业 209\n19.9.1 小测验 209\n19.9.2 答案 209\n19.10 练习 210\n第20章 处理JSON 211\n20.1 JSON简介 211\n20.2 使用JSON API 213\n20.3 在Go语言中使用JSON 213\n20.4 解码JSON 217\n20.5 映射数据类型 219\n20.6 处理通过HTTP收到的JSON 220\n20.7 小结 221\n20.8 问与答 221\n20.9 作业 222\n20.9.1 小测验 222\n20.9.2 答案 222\n20.10 练习 222\n第21章 处理文件 223\n21.1 文件的重要性 223\n21.2 使用ioutil包读写文件 224\n21.2.1 读取文件 224\n21.2.2 创建文件 225\n21.3 写入文件 227\n21.4 列出目录的内容 228\n21.5 复制文件 229\n21.6 删除文件 230\n21.7 使用文件来管理配置 231\n21.7.1 使用JSON文件 231\n21.7.2 使用TOML文件 232\n21.8 小结 234\n21.9 问与答 234\n21.10 作业 234\n21.10.1 小测验 235\n21.10.2 答案 235\n21.11 练习 235\n第22章 正则表达式简介 236\n22.1定义正则表达式 236\n22.2 熟悉正则表达式 238\n22.3 使用正则表达式验证数据 239\n22.4 使用正则表达式来变换数据 240\n22.5 小结 241\n22.6 问与答 241\n22.7 作业 241\n22.7.1 小测验 242\n22.7.2 答案 242\n22.8 练习 242\n第23章 Go语言时间编程 243\n23.1 时间元素编程 243\n23.2 让程序休眠 245\n23.3 设置超时时间 245\n23.4 使用ticker 246\n23.5 以字符串格式表示时间 247\n23.6 使用结构体Time 248\n23.7时间加减 249\n23.8 比较两个不同的Time结构体 249\n23.9 小结 250\n23.10 问与答 250\n23.11 作业 251\n23.11.1 小测验 251\n23.11.2 答案 251\n23.12 练习 251\n第24章 部署Go语言代码 252\n24.1 理解目标 252\n24.2 压缩二进制文件大小 255\n24.3 使用Docker 256\n24.4 下载二进制文件 258\n24.5 使用go get 259\n24.6 通过包管理器发布代码 260\n24.7 小结 260\n24.8 问与答 260\n24.9 作业 261\n24.9.1 小测验 261\n24.9.2 答案 261\n24.10 练习","pages":"261","images":{"small":"https://img9.doubanio.com\/view\/subject\/s\/public\/s29934614.jpg","large":"https://img9.doubanio.com\/view\/subject\/l\/public\/s29934614.jpg","medium":"https://img9.doubanio.com\/view\/subject\/m\/public\/s29934614.jpg"},"alt":"https:\/\/book.douban.com\/subject\/30318264\/","id":"30318264","publisher":"Sams Publishing","isbn10":"0672338033","isbn13":"9780672338038","title":"Go语言入门经典","url":"https:\/\/api.douban.com\/v2\/book\/30318264","alt_title":"Sams Teach Yourself Go in 24 Hours","author_intro":"George Ornbo 是一位软件工程师、博主和作家，拥有14年的软件开发经验，其客户既有初创公司，也有大型企业客户；熟悉众多编程语言、UNIX和Web底层协议。当前供职于伦敦的一家区块链初创公司。","summary":"Go 语言是谷歌推出的一种全新的编程语言，旨在不损失应用程序性能的情况下降低代码的复杂性，具有“部署简单、并发性好、语言设计良好、执行性能良好”等优势，目前国内诸多IT公司均已采用Go语言开发项目。\n本书分为24章，讲解了使用Go语言编写高质量程序的方法，其内容涵盖了Go语言特性和标准库安装包，Go与JavaScript的对比，Go命令行工具，Go中的基本概念（比如类型、变量、函数、控制结构、指针、接口等）、错误处理、Goroutine和通道、Go代码测试、使用Go编写HTTP客户端与服务器、处理JSON和文件、部署Go代码等。\n本书适合想要掌握Go语言的零基础读者以及对Go语言感兴趣的程序员学习，还可作为高等院校教授Go语言课程的教材。","price":"59.00元"},{"rating":{"max":10,"numRaters":245,"average":"8.8","min":0},"subtitle":"","author":["艾伦 A. A. 多诺万"],"pubdate":"2017-5","tags":[{"count":174,"name":"Go语言","title":"Go语言"},{"count":123,"name":"Go","title":"Go"},{"count":83,"name":"编程","title":"编程"},{"count":81,"name":"计算机","title":"计算机"},{"count":66,"name":"golang","title":"golang"},{"count":65,"name":"计算机科学","title":"计算机科学"},{"count":63,"name":"Golang","title":"Golang"},{"count":54,"name":"go语言","title":"go语言"}],"origin_title":"The Go Programming Language","image":"https://img3.doubanio.com\/view\/subject\/m\/public\/s29458403.jpg","binding":"","translator":["李道兵","高博","庞向才","金鑫鑫","林齐斌"],"catalog":"出版者的话\n译者序\n前言\n第1章 入门 1\n1.1 hello，world 1\n1.2 命令行参数 3\n1.3 找出重复行 6\n1.4 GIF动画 10\n1.5 获取一个URL 12\n1.6 并发获取多个URL 13\n1.7 一个Web服务器 14\n1.8 其他内容 17\n第2章 程序结构 20\n2.1 名称 20\n2.2 声明 21\n2.3 变量 22\n2.3.1 短变量声明 22\n2.3.2 指针 23\n2.3.3 new函数 25\n2.3.4 变量的生命周期 26\n2.4 赋值 27\n2.4.1 多重赋值 27\n2.4.2 可赋值性 28\n2.5 类型声明 29\n2.6 包和文件 30\n2.6.1 导入 31\n2.6.2 包初始化 33\n2.7 作用域 34\n第3章 基本数据 38\n3.1 整数 38\n3.2 浮点数 42\n3.3 复数 45\n3.4 布尔值 47\n3.5 字符串 47\n3.5.1 字符串字面量 49\n3.5.2 Unicode 49\n3.5.3 UTF-8 50\n3.5.4 字符串和字节slice 53\n3.5.5 字符串和数字的相互转换 56\n3.6 常量 56\n3.6.1 常量生成器iota 57\n3.6.2 无类型常量 59\n第4章 复合数据类型 61\n4.1 数组 61\n4.2 slice 63\n4.2.1 append函数 66\n4.2.2 slice就地修改 69\n4.3 map 71\n4.4 结构体 76\n4.4.1 结构体字面量 78\n4.4.2 结构体比较 80\n4.4.3 结构体嵌套和匿名成员 80\n4.5 JSON 82\n4.6 文本和HTML模板 87\n第5章 函数 92\n5.1 函数声明 92\n5.2 递归 93\n5.3 多返回值 96\n5.4 错误 98\n5.4.1 错误处理策略 99\n5.4.2 文件结束标识 101\n5.5 函数变量 102\n5.6 匿名函数 104\n5.7 变长函数 110\n5.8 延迟函数调用 111\n5.9 宕机 115\n5.10 恢复 118\n第6章 方法 120\n6.1 方法声明 120\n6.2 指针接收者的方法 122\n6.3 通过结构体内嵌组成类型 124\n6.4 方法变量与表达式 127\n6.5 示例：位向量 128\n6.6 封装 130\n第7章 接口 133\n7.1 接口即约定 133\n7.2 接口类型 135\n7.3 实现接口 136\n7.4 使用flag.Value来解析参数 139\n7.5 接口值 141\n7.6 使用sort.Interface来排序 144\n7.7 http.Handler接口 148\n7.8 error接口 152\n7.9 示例：表达式求值器 154\n7.10 类型断言 160\n7.11 使用类型断言来识别错误 161\n7.12 通过接口类型断言来查询特性 162\n7.13 类型分支 164\n7.14 示例：基于标记的XML解析 166\n7.15 一些建议 168\n第8章 goroutine和通道 170\n8.1 goroutine 170\n8.2 示例：并发时钟服务器 171\n8.3 示例：并发回声服务器 174\n8.4 通道 176\n8.4.1 无缓冲通道 177\n8.4.2 管道 178\n8.4.3 单向通道类型 180\n8.4.4 缓冲通道 181\n8.5 并行循环 183\n8.6 示例：并发的Web爬虫 187\n8.7 使用select多路复用 190\n8.8 示例：并发目录遍历 192\n8.9 取消 195\n8.10 示例：聊天服务器 198\n第9章 使用共享变量实现并发 201\n9.1 竞态 201\n9.2 互斥锁：sync.Mutex 205\n9.3 读写互斥锁：sync.RWMutex 208\n9.4 内存同步 208\n9.5 延迟初始化：sync.Once 210\n9.6 竞态检测器 212\n9.7 示例：并发非阻塞缓存 212\n9.8 goroutine与线程 218\n9.8.1 可增长的栈 219\n9.8.2 goroutine调度 219\n9.8.3 GOMAXPROCS 219\n9.8.4 goroutine没有标识 220\n第10章 包和go工具 221\n10.1 引言 221\n10.2 导入路径 221\n10.3 包的声明 222\n10.4 导入声明 223\n10.5 空导入 223\n10.6 包及其命名 225\n10.7 go工具 226\n10.7.1 工作空间的组织 227\n10.7.2 包的下载 228\n10.7.3 包的构建 229\n10.7.4 包的文档化 231\n10.7.5 内部包 232\n10.7.6 包的查询 233\n第11章 测试 235\n11.1 go test工具 235\n11.2 Test函数 236\n11.2.1 随机测试 239\n11.2.2 测试命令 240\n11.2.3 白盒测试 242\n11.2.4 外部测试包 245\n11.2.5 编写有效测试 246\n11.2.6 避免脆弱的测试 247\n11.3 覆盖率 248\n11.4 Benchmark函数 250\n11.5 性能剖析 252\n11.6 Example函数 254\n第12章 反射 256\n12.1 为什么使用反射 256\n12.2 reflect.Type和reflect.Value 257\n12.3 Display：一个递归的值显示器 259\n12.4 示例：编码S表达式 263\n12.5 使用reflect.Value来设置值 266\n12.6 示例：解码S表达式 268\n12.7 访问结构体字段标签 271\n12.8 显示类型的方法 273\n12.9 注意事项 274\n第13章 低级编程 276\n13.1 unsafe.Sizeof、Alignof 和Offsetof 276\n13.2 unsafe.Pointer 278\n13.3 示例：深度相等 280\n13.4 使用cgo调用C代码 282\n13.5 关于安全的注意事项 286","pages":"286","images":{"small":"https://img3.doubanio.com\/view\/subject\/s\/public\/s29458403.jpg","large":"https://img3.doubanio.com\/view\/subject\/l\/public\/s29458403.jpg","medium":"https://img3.doubanio.com\/view\/subject\/m\/public\/s29458403.jpg"},"alt":"https:\/\/book.douban.com\/subject\/27044219\/","id":"27044219","publisher":"机械工业出版社","isbn10":"7111558421","isbn13":"9787111558422","title":"Go程序设计语言","url":"https:\/\/api.douban.com\/v2\/book\/27044219","alt_title":"The Go Programming Language","author_intro":"","summary":"本书由《C程序设计语言》的作者Kernighan和谷歌公司Go团队主管Alan Donovan联袂撰写，是学习Go语言程序设计的指南。本书共13章，主要内容包括：Go的基础知识、基本结构、基本数据类型、复合数据类型、函数、方法、接口、goroutine、通道、共享变量的并发性、包、go工具、测试、反射等。\n本书适合作为计算机相关专业的教材，也可供Go语言爱好者阅读。","series":{"id":"1163","title":"计算机科学丛书"},"price":"79"},{"rating":{"max":10,"numRaters":269,"average":"7.7","min":0},"subtitle":"","author":["威廉·肯尼迪 (William Kennedy)","布赖恩·克特森 (Brian Ketelsen)","埃里克·圣马丁 (Erik St.Martin)"],"pubdate":"2017-3-1","tags":[{"count":156,"name":"Go","title":"Go"},{"count":125,"name":"Golang","title":"Golang"},{"count":85,"name":"编程","title":"编程"},{"count":67,"name":"编程语言","title":"编程语言"},{"count":52,"name":"计算机","title":"计算机"},{"count":41,"name":"计算机科学","title":"计算机科学"},{"count":31,"name":"Programming","title":"Programming"},{"count":28,"name":"开发","title":"开发"}],"origin_title":"","image":"https://img9.doubanio.com\/view\/subject\/m\/public\/s29421285.jpg","binding":"平装","translator":["李兆海"],"catalog":"第1章　关于Go语言的介绍　1\n1．1　用Go解决现代编程难题　2\n1．1．1　开发速度　2\n1．1．2　并发　3\n1．1．3　Go语言的类型系统　5\n1．1．4　内存管理　7\n1．2　你好，Go　7\n1．3　小结　8\n第2章　快速开始一个Go程序　9\n2．1　程序架构　9\n2．2　main包　11\n2．3　search包　13\n2．3．1　search．go　13\n2．3．2　feed．go　21\n2．3．3　match．go default．go　24\n2．4　RSS匹配器　30\n2．5　小结　36\n第3章　打包和工具链　37\n3．1　包　37\n3．1．1　包名惯例　38\n3．1．2　main包　38\n3．2　导入　39\n3．2．1　远程导入　40\n3．2．2　命名导入　40\n3．3　函数init　41\n3．4　使用Go的工具　42\n3．5　进一步介绍Go开发工具　44\n3．5．1　go vet　44\n3．5．2　Go代码格式化　45\n3．5．3　Go语言的文档　45\n3．6　与其他Go开发者合作　48\n3．7　依赖管理　48\n3．7．1　第三方依赖　49\n3．7．2　对gb的介绍　50\n3．8　小结　52\n第4章　数组、切片和映射　53\n4．1　数组的内部实现和基础功能　53\n4．1．1　内部实现　53\n4．1．2　声明和初始化　54\n4．1．3　使用数组　55\n4．1．4　多维数组　58\n4．1．5　在函数间传递数组　59\n4．2　切片的内部实现和基础功能　60\n4．2．1　内部实现　60\n4．2．2　创建和初始化　61\n4．2．3　使用切片　63\n4．2．4　多维切片　74\n4．2．5　在函数间传递切片　75\n4．3　映射的内部实现和基础功能　76\n4．3．1　内部实现　76\n4．3．2　创建和初始化　78\n4．3．3　使用映射　79\n4．3．4　在函数间传递映射　81\n4．4　小结　82\n第5章　Go语言的类型系统　83\n5．1　用户定义的类型　83\n5．2　方法　87\n5．3　类型的本质　90\n5．3．1　内置类型　91\n5．3．2　引用类型　91\n5．3．3　结构类型　93\n5．4　接口　95\n5．4．1　标准库　96\n5．4．2　实现　98\n5．4．3　方法集　99\n5．4．4　多态　103\n5．5　嵌入类型　105\n5．6　公开或未公开的标识符　113\n5．7　小结　121\n第6章　并发　122\n6．1　并发与并行　122\n6．2　goroutine　125\n6．3　竞争状态　132\n6．4　锁住共享资源　135\n6．4．1　原子函数　135\n6．4．2　互斥锁　138\n6．5　通道　140\n6．5．1　无缓冲的通道　141\n6．5．2　有缓冲的通道　146\n6．6　小结　149\n第7章　并发模式　150\n7．1　runner　150\n7．2　pool　158\n7．3　work　168\n7．4　小结　174\n第8章　标准库　176\n8．1　文档与源代码　177\n8．2　记录日志　178\n8．2．1　log包　179\n8．2．2　定制的日志记录器　182\n8．2．3　结论　186\n8．3　编码 解码　187\n8．3．1　解码JSON　187\n8．3．2　编码JSON　192\n8．3．3　结论　193\n8．4　输入和输出　193\n8．4．1　Writer和Reader接口　194\n8．4．2　整合并完成工作　195\n8．4．3　简单的curl　199\n8．4．4　结论　200\n8．5　小结　200\n第9章　测试和性能　201\n9．1　单元测试　201\n9．1．1　基础单元测试　202\n9．1．2　表组测试　205\n9．1．3　模仿调用　208\n9．1．4　测试服务端点　212\n9．2　示例　217\n9．3　基准测试　220\n9．4　小结　224","pages":"224","images":{"small":"https://img9.doubanio.com\/view\/subject\/s\/public\/s29421285.jpg","large":"https://img9.doubanio.com\/view\/subject\/l\/public\/s29421285.jpg","medium":"https://img9.doubanio.com\/view\/subject\/m\/public\/s29421285.jpg"},"alt":"https:\/\/book.douban.com\/subject\/27015617\/","id":"27015617","publisher":"人民邮电出版社","isbn10":"7115445354","isbn13":"9787115445353","title":"Go语言实战","url":"https:\/\/api.douban.com\/v2\/book\/27015617","alt_title":"","author_intro":"William Kennedy，是一位熟练的软件开发者，也是博客GoingGo.Net的作者。\nBrian Ketelsen和Erik St. Martin是全球Go语言大会GopherCon的组织者，也是Go语言框架Skynet的联合作者。\n李兆海，多年专注于后端分布式网络服务开发，曾使用过多个流行后端技术和相关架构实践，是Go语言和Docker的早期使用者和推广者，《第1本Docker书》的译者。作为项目技术负责人，成功开发了百万用户级直播系统。","summary":"Go语言结合了底层系统语言的能力以及现代语言的高级特性，旨在降低构建简单、可靠、高效软件的门槛。本书向读者提供一个专注、全面且符合语言习惯的视角。Go语言实战同时关注语言的规范和实现，涉及的内容包括语法、类型系统、并发、管道、测试，以及其他一些主题。","price":"CNY 59.00"},{"rating":{"max":10,"numRaters":540,"average":"7.1","min":0},"subtitle":"","author":["许式伟"],"pubdate":"2012-8","tags":[{"count":320,"name":"go语言","title":"go语言"},{"count":289,"name":"Go","title":"Go"},{"count":180,"name":"编程","title":"编程"},{"count":117,"name":"编程语言","title":"编程语言"},{"count":113,"name":"程序设计","title":"程序设计"},{"count":108,"name":"golang","title":"golang"},{"count":101,"name":"计算机","title":"计算机"},{"count":76,"name":"programming","title":"programming"}],"origin_title":"","image":"https://img9.doubanio.com\/view\/subject\/m\/public\/s11162016.jpg","binding":"平装","translator":[],"catalog":"序 为什么我们需要一门新的语言？\n第1章 初识Go语言\n1.1 Go语言简史\n1.2 语言特性\n1.3 “Hello, world!”\n1.4 编译环境\n1.5 开发工具\n1.6 工程管理\n1.7 问题追踪和调试\n1.8 如何寻求帮助\n本章小结\n第2章 顺序编程\n2.1 变量、常量和类型\n2.1.1 变量\n2.1.2 常量\n2.1.3 类型\n2.2 流程控制\n2.2.1 条件语句\n2.2.2 选择语句\n2.2.3 循环\n2.2.4 跳转语句\n2.3 函数\n2.3.1 函数调用\n2.3.2 不定参数\n2.3.3 多返回值\n2.3.4 匿名函数与闭包\n2.4 错误处理\n2.4.1 error接口\n2.4.2 defer\n2.4.3 panic和recover\n本章小结\n第3章 面向对象编程\n3.1 类型系统\n3.1.1 给类型添加方法\n3.1.2 值语义和引用语义\n3.2 结构体\n3.2.1 初始化\n3.2.2 匿名组合\n3.2.3 成员可访问性\n3.3 接口\n3.3.1 其他语言中的接口\n3.3.2 非侵入式接口\n3.3.3 接口赋值\n3.3.4 接口查询\n3.3.5 类型查询\n3.3.6 Any类型\n本章小结\n第4章 工程管理\n4.1 Go命令行工具\n4.2 代码风格\n4.3 工程组织\n4.4 单元测试\n4.5 文档管理\n4.6 工程构建\n4.7 包的管理与分发\n4.8 跨平台开发\n4.8.1 Go语言的跨平台能力\n4.8.2 交叉编译\n4.8.3 Android支持\n本章小结\n第5章 并发编程\n5.1 初识Goroutine\n5.1.1 基本用法\n5.1.2 Goroutine通信\n5.2 Channel\n5.2.1 基本用法\n5.2.2 关闭\n5.2.3 变量的传递\n5.2.4 单向Channel\n5.2.5 超时处理\n5.3 多核并行化\n5.4 同步机制\n5.4.1 sync包简介\n5.4.2 同步锁\n5.4.3 Once类型\n本章小结\n第6章 网络编程\n6.1 HTTP编程\n6.1.1 客户端编程\n6.1.2 开发HTTP服务器\n6.2 JSON\n6.2.1 JSON简介\n6.2.2 编码\n6.2.3 解码\n6.2.4 未知类型的解码\n6.2.5 流式读写\n6.3 网站开发\n6.3.1 一个最简单的网站\n6.3.2 开发一个相册网站\n6.3.2.1 新建工程\n6.3.2.2 实现网络服务\n6.3.2.3 网页模板渲染\n6.3.2.4 缓存\n6.3.2.5 错误处理\n6.3.2.6 防止程序崩溃\n6.3.2.7 资源分离\n6.3.2.8 重构\n6.4 更多资源\n本章小结\n第7章 进阶话题\n7.1 Go语言中的内存管理\n7.2 反射\n7.3 语言交互性CGO\n7.4 链接符号\n7.5 Goroutine实现机制\n7.6 接口的奥秘\n本章小结\n第8章 开发工具\n8.1 Go语言开发工具\n8.2 gEdit\n8.3 Goclipse - 使用Eclipse开发和调试Go程序\n8.4 VIM\n8.5 Nodepad++，Windows上的Go开发环境搭建\n8.6 GolangIDE\n本章小结\n附录 Go语言包参考","pages":"300","images":{"small":"https://img9.doubanio.com\/view\/subject\/s\/public\/s11162016.jpg","large":"https://img9.doubanio.com\/view\/subject\/l\/public\/s11162016.jpg","medium":"https://img9.doubanio.com\/view\/subject\/m\/public\/s11162016.jpg"},"alt":"https:\/\/book.douban.com\/subject\/11577300\/","id":"11577300","publisher":"人民邮电出版社","isbn10":"7115290369","isbn13":"9787115290366","title":"Go语言编程","url":"https:\/\/api.douban.com\/v2\/book\/11577300","alt_title":"","author_intro":"许式伟\n七牛云存储CEO，曾任盛大创新院资深研究员、金山软件技术总监、WPS Office 2005首席架构师。开源爱好者，发布过包括WINX、TPL等十余个C++开源项目，拥有超过15年的C\/C++开发经验。在接触Go语言后即可被其大道至简、少即是多的设计哲学所倾倒。七牛云存储是国内第一个吃螃蟹的团队，核心服务完全采用Go语言实现。\n吕桂华\n七牛云存储联合创始人，曾在金山软件、盛大游戏等公司担任架构师和部门经理等职务，在企业级系统和大型网游平台领域有较多涉猎。拥有十余年的C\/C++大型项目开发经验，也曾在Java和.NET平台上探索多年。同样被Go语言的魅力所吸引而不可自拔，希望能为推广这门优秀的语言尽自己的绵薄之力。","summary":"这本书从整体的写作风格来说，会以介绍 Go 语言特性为主，示例则尽量采用作者平常的实践，而不是一个没有太大实际意义的语法示范样例。\n本书作者背景极强，许式伟为原金山WPS首席架构师、曾是盛大创新院研究员，目前是国内Go语言实践圈子公认的Go语言专家。参与本书写作的几位作者都是实际用Go语言开发的项目的开发人员，有较强的实战经验。\n本书以介绍Go语言特性为主，示例则尽量采用作者开发团队平常的实践，内容涉及内存管理（堆和栈）、错误处理、OOP、并发编程等关键话题。 这本书面向的读者是所有打算用Go语言的开发者，主要包括目前使用C、C++、Java、C#的开发人员，甚至一些Python、PHP开发人员也可能转为 Go 程序员。","series":{"id":"13000","title":"图灵原创"},"price":"49.00元"},{"rating":{"max":10,"numRaters":255,"average":"9.3","min":0},"subtitle":"","author":["Brian W. Kernighan","Alan Donovan"],"pubdate":"2015-11-23","tags":[{"count":203,"name":"Go","title":"Go"},{"count":124,"name":"golang","title":"golang"},{"count":72,"name":"编程","title":"编程"},{"count":66,"name":"计算机","title":"计算机"},{"count":53,"name":"程序设计","title":"程序设计"},{"count":40,"name":"Programming","title":"Programming"},{"count":34,"name":"programming","title":"programming"},{"count":27,"name":"编程语言","title":"编程语言"}],"origin_title":"","image":"https://img9.doubanio.com\/view\/subject\/m\/public\/s28320194.jpg","binding":"Paperback","translator":[],"catalog":"","pages":"320","images":{"small":"https://img9.doubanio.com\/view\/subject\/s\/public\/s28320194.jpg","large":"https://img9.doubanio.com\/view\/subject\/l\/public\/s28320194.jpg","medium":"https://img9.doubanio.com\/view\/subject\/m\/public\/s28320194.jpg"},"alt":"https:\/\/book.douban.com\/subject\/26337545\/","id":"26337545","publisher":"Addison-Wesley Professional","isbn10":"0134190440","isbn13":"9780134190440","title":"The Go Programming Language","url":"https:\/\/api.douban.com\/v2\/book\/26337545","alt_title":"","author_intro":"","summary":"","series":{"id":"44309","title":"Addison-Wesley Professional Computing Series"},"price":"USD 39.99"},{"rating":{"max":10,"numRaters":0,"average":"0.0","min":0},"subtitle":"Build modern and concurrent applications for Unix and Linux systems using Golang","author":["Alex Guerrieri"],"pubdate":"2019-7-5","tags":[],"origin_title":"","image":"https://img9.doubanio.com\/view\/subject\/m\/public\/s33534626.jpg","binding":"平装","translator":[],"catalog":"1.An Introduction to System Programming\n2.Unix OS Components\n3.An Overview of Go\n4.Working with the Filesystem\n5.Handling Streams\n6.Building Pseudo-Terminals\n7.Handling Processes and Daemons\n8.Exit Codes, Signals, and Pipes\n9.Network Programming\n10.Data Encoding Using Go\n11.Dealing with Channels and Goroutines\n12.Synchronization with sync and atomic\n13.Coordination Using Context\n14.Implementing Concurrency Patterns\n15.Using Reflection\n16.Using CGO","pages":"458","images":{"small":"https://img9.doubanio.com\/view\/subject\/s\/public\/s33534626.jpg","large":"https://img9.doubanio.com\/view\/subject\/l\/public\/s33534626.jpg","medium":"https://img9.doubanio.com\/view\/subject\/m\/public\/s33534626.jpg"},"alt":"https:\/\/book.douban.com\/subject\/34911915\/","id":"34911915","publisher":"Packt Publishing","isbn10":"1789804078","isbn13":"9781789804072","title":"Hands-On System Programming with Go","url":"https:\/\/api.douban.com\/v2\/book\/34911915","alt_title":"","author_intro":"","summary":"System software and applications were largely created using low-level languages such as C or C++. Go is a modern language that combines simplicity, concurrency, and performance, making it a good alternative for building system applications for Linux and macOS.\nThis Go book introduces Unix and systems programming to help you understand the components the OS has to offer, ranging from the kernel API to the filesystem, and familiarize yourself with Go and its specifications. You'll also learn how to optimize input and output operations with files and streams of data, which are useful tools in building pseudo terminal applications. You'll gain insights into how processes communicate with each other, and learn about processes and daemon control using signals, pipes, and exit codes. This book will also enable you to understand how to use network communication using various protocols, including TCP and HTTP.\nAs you advance, you'll focus on Go's best feature-concurrency helping you handle communication with channels and goroutines, other concurrency tools to synchronize shared resources, and the context package to write elegant applications.\nBy the end of this book, you will have learned how to build concurrent system applications using Go","price":"USD 22.39"},{"rating":{"max":10,"numRaters":187,"average":"8.1","min":0},"subtitle":"","author":["雨痕"],"pubdate":"2016-6","tags":[{"count":222,"name":"Go","title":"Go"},{"count":146,"name":"Golang","title":"Golang"},{"count":95,"name":"编程","title":"编程"},{"count":76,"name":"计算机","title":"计算机"},{"count":64,"name":"编程语言","title":"编程语言"},{"count":56,"name":"程序设计","title":"程序设计"},{"count":42,"name":"程序设计语言","title":"程序设计语言"},{"count":28,"name":"programming","title":"programming"}],"origin_title":"","image":"https://img3.doubanio.com\/view\/subject\/m\/public\/s28878681.jpg","binding":"平装","translator":[],"catalog":"上卷 语言详解\n第1 章 概述 ................................................................................................................. 3\n1.1 特征 ......................................................................................................................... 3\n1.2 简介 ......................................................................................................................... 6\n第2 章 类型 ............................................................................................................... 18\n2.1 变量 ....................................................................................................................... 18\n2.2 命名 ....................................................................................................................... 22\n2.3 常量 ....................................................................................................................... 24\n2.4 基本类型 ............................................................................................................... 28\n2.5 引用类型 ............................................................................................................... 31\n2.6 类型转换 ............................................................................................................... 33\n2.7 自定义类型 ........................................................................................................... 34\n第3 章 表达式 ........................................................................................................... 38\n3.1 保留字 ................................................................................................................... 38\n3.2 运算符 ................................................................................................................... 38\n3.3 初始化 ................................................................................................................... 44\n3.4 流控制 ................................................................................................................... 45\n第4 章 函数 ............................................................................................................... 59\n4.1 定义 ....................................................................................................................... 59\n4.2 参数 ....................................................................................................................... 63\n4.3 返回值 ................................................................................................................... 67\n4.4 匿名函数 ............................................................................................................... 69\n4.5 延迟调用 ............................................................................................................... 76\n4.6 错误处理 ............................................................................................................... 80\n第5 章 数据 ............................................................................................................... 86\n5.1 字符串 ................................................................................................................... 86\n5.2 数组 ....................................................................................................................... 95\n5.3 切片 ..................................................................................................................... 100\n5.4 字典 ..................................................................................................................... 110\n5.5 结构 ..................................................................................................................... 118\n第6 章 方法 ............................................................................................................. 130\n6.1 定义 ..................................................................................................................... 130\n6.2 匿名字段 ............................................................................................................. 133\n6.3 方法集 ................................................................................................................. 134\n6.4 表达式 ................................................................................................................. 136\n第7 章 接口 ............................................................................................................. 141\n7.1 定义 ..................................................................................................................... 141\n7.2 执行机制 ............................................................................................................. 145\n7.3 类型转换 ............................................................................................................. 150\n7.4 技巧 ..................................................................................................................... 151\n第8 章 并发 ............................................................................................................. 153\n8.1 并发的含义 ......................................................................................................... 153\n8.2 通道 ..................................................................................................................... 163\n8.3 同步 ..................................................................................................................... 183\n第9 章 包结构 ......................................................................................................... 187\n9.1 工作空间 ............................................................................................................. 187\n9.2 导入包 ................................................................................................................. 188\n9.3 组织结构 ............................................................................................................. 192\n9.4 依赖管理 ............................................................................................................. 197\n第10 章 反射 ........................................................................................................... 200\n10.1 类型 ................................................................................................................... 200\n10.2 值 ....................................................................................................................... 207\n10.3 方法 ................................................................................................................... 210\n10.4 构建 ................................................................................................................... 212\n10.5 性能 ................................................................................................................... 213\n第11 章 测试 ........................................................................................................... 216\n11.1 单元测试 ........................................................................................................... 216\n11.2 性能测试 ........................................................................................................... 221\n11.3 代码覆盖率 ....................................................................................................... 224\n11.4 性能监控 ........................................................................................................... 226\n第12 章 工具链 ........................................................................................................ 229\n12.1 安装 ................................................................................................................... 229\n12.2 工具 ................................................................................................................... 231\n12.3 编译 ................................................................................................................... 234\n下卷 源码剖析\n第13 章 准备 ............................................................................................................ 243\n第14 章 引导 ............................................................................................................ 244\n第15 章 初始化 ........................................................................................................ 247\n第16 章 内存分配 ..................................................................................................... 255\n16.1 概述 ................................................................................................................... 255\n16.2 初始化 ............................................................................................................... 259\n16.3 分配 ................................................................................................................... 265\n16.4 回收 ................................................................................................................... 279\n16.5 释放 ................................................................................................................... 283\n16.6 其他 ................................................................................................................... 285\n第17 章 垃圾回收 ...................................................................................................... 291\n17.1 概述 ................................................................................................................... 291\n17.2 初始化 ............................................................................................................... 293\n17.3 启动 ................................................................................................................... 294\n17.4 标记 ................................................................................................................... 300\n17.5 清理 ................................................................................................................... 311\n17.6 监控 ................................................................................................................... 314\n17.7 其他 ................................................................................................................... 317\n第18 章 并发调度 ...................................................................................................... 326\n18.1 概述 ................................................................................................................... 326\n18.2 初始化 ............................................................................................................... 327\n18.3 任务 ................................................................................................................... 332\n18.4 线程 ................................................................................................................... 344\n18.5 执行 ................................................................................................................... 353\n18.6 连续栈 ............................................................................................................... 370\n18.7 系统调用 ........................................................................................................... 385\n18.8 监控 ................................................................................................................... 390\n18.9 其他 ................................................................................................................... 396\n第19 章 通道 ............................................................................................................. 407\n19.1 创建 ................................................................................................................... 407\n19.2 收发 ................................................................................................................... 408\n19.3 选择 ................................................................................................................... 418\n第20 章 延迟 ............................................................................................................. 427\n20.1 定义 ................................................................................................................... 427\n20.2 性能 ................................................................................................................... 433\n20.3 错误 ................................................................................................................... 434\n第21 章 析构 ............................................................................................................. 438\n21.1 设置 ................................................................................................................... 438\n21.2 清理 ................................................................................................................... 443\n21.3 执行 ................................................................................................................... 445\n第22 章 缓存池 ......................................................................................................... 450\n22.1 初始化 ............................................................................................................... 450\n22.2 操作 ................................................................................................................... 453\n22.3 清理 ................................................................................................................... 455","ebook_url":"https:\/\/read.douban.com\/ebook\/35728636\/","pages":"468","images":{"small":"https://img3.doubanio.com\/view\/subject\/s\/public\/s28878681.jpg","large":"https://img3.doubanio.com\/view\/subject\/l\/public\/s28878681.jpg","medium":"https://img3.doubanio.com\/view\/subject\/m\/public\/s28878681.jpg"},"alt":"https:\/\/book.douban.com\/subject\/26832468\/","id":"26832468","publisher":"电子工业出版社","isbn10":"7121291606","isbn13":"9787121291609","title":"Go语言学习笔记","url":"https:\/\/api.douban.com\/v2\/book\/26832468","alt_title":"","author_intro":"自 1996 年从事计算机软件开发工作以来，已 20 春秋。期间供职于北大方正、西单电子商务、九城数码、知乎等公司。主要从事核心开发、架构设计，以及部分管理工作。","summary":"作为时下流行的一种系统编程语言，Go 简单易学，性能很好，且支持各类主流平台。已有大量项目采用 Go 编写，这其中就包括 Docker 等明星作品，其开发和执行效率早已被证明。本书经四年多逐步完善，内容覆盖了语言、运行时、性能优化、工具链等各层面知识。且内容经大量读者反馈和校对，没有明显的缺陷和错误。上卷细致解析了语言规范相关细节，便于读者深入理解语言相关功能的使用方法和注意事项。下卷则对运行时源码做出深度剖析，引导读者透彻了解语言功能背后的支持环境和运行体系，诸如内存分配、垃圾回收和并发调度等。本书不适合编程初学入门，可供有实际编程经验或正在使用Go 工作的人群参考。","ebook_price":"44.50","price":"89"},{"rating":{"max":10,"numRaters":258,"average":"7.6","min":0},"subtitle":"","author":["谢孟军"],"pubdate":"2013-6-1","tags":[{"count":167,"name":"Go","title":"Go"},{"count":147,"name":"golang","title":"golang"},{"count":81,"name":"编程","title":"编程"},{"count":78,"name":"go语言","title":"go语言"},{"count":68,"name":"web","title":"web"},{"count":45,"name":"计算机","title":"计算机"},{"count":35,"name":"软件开发","title":"软件开发"},{"count":24,"name":"programming","title":"programming"}],"origin_title":"","image":"https://img1.doubanio.com\/view\/subject\/m\/public\/s26376659.jpg","binding":"平装","translator":[],"catalog":"第1章 GO语言环境配置\n1.1 Go语言安装\nGo语言的三种安装方式\nGo语言源码安装\nGo语言标准包安装\n第三方工具安装\n1.2 GOPATH与工作空间\nGOPATH设置\n应用目录结构\n编译应用\n获取远程包\n程序的整体结构\n1.3 Go语言命令\nGo语言命令\ngo build\ngo clean\ngo fmt\ngo get\ngo install\ngo test\ngo doc\n其他命令\n1.4 Go语言开发工具\nLiteIDE\nSublime Text\nVim\nEmacs\nEclipse\nIntelliJ IDEA\n1.5 总结\n第2章 Go语言基础\n2.1 你好，Go\n程序\n详解\n小结\n2.2 Go语言基础\n定义变量\n常量\n内置基础类型\n一些技巧\narray、slice、map\n2.3 流程和函数\n流程控制\n函数\n2.4 struct类型\nstruct\n2.5 面向对象\nmethod\n2.6 interface\ninterface\n2.7 并发\ngoroutine\nchannels\nBuffered Channels\nRange和Close\nSelect\n超时\nruntime goroutine\n2.8 总结\n第3章 Web基础\n3.1 Web工作方式\nURL和DNS解析\nHTTP协议详解\n请求实例\n3.2 GO语言搭建一个Web服务器\nhttp包建立Web服务器\n3.3 Go语言如何使Web工作\nWeb工作方式的几个概念\n分析http包运行机制\n3.4 Go语言的http包详解\nConn的goroutine\nServeMux的自定义\nGo语言代码的执行流程\n3.5 总结\n第4章 表单\n4.1 处理表单的输入\n4.2 验证表单的输入\n必填字段\n数字\n中文\n英文\n电子邮件地址\n手机号码\n下拉菜单\n单选按钮\n复选框\n日期和时间\n身份证号码\n4.3 预防跨站脚本\n4.4 防止多次递交表单\n4.5 处理文件上传\n客户端上传文件\n4.6 总结\n第5章 访问数据库\n5.1 database\/sql接口\nsql.Register\ndriver.Driver\ndriver.Conn\ndriver.Stmt\ndriver.Tx\ndriver.Execer\ndriver.Result\ndriver.Rows\ndriver.RowsAffected\ndriver.Value\ndriver.ValueConverter\ndriver.Valuer\ndatabase\/sql\n5.2 使用MySQL数据库\nMySQL驱动\n示例代码\n5.3 使用SQLite数据库\n驱动\n实例代码\n5.4 使用PostgreSQL数据库\n驱动\n实例代码\n5.5 使用beedb库进行ORM开发\n安装\n如何初始化\n插入数据\n更新数据\n查询数据\n删除数据\n关联查询\nGroup By和Having\n进一步的发展\n5.6 NOSQL数据库操作\nredis\nMongoDB\n5.7 总结\n第6章 Session和数据存储\n6.1 Session和Cookie\nCookie\nSession\n小结\n6.2 Go语言如何使用Session\nSession创建过程\nGo语言实现Session管理\n6.3 Session存储\n6.4 预防Session劫持\nSession劫持过程\nSession劫持防范\n6.5 总结\n第7章 文本处理\n7.1 XML处理\n解析XML\n输出XML\n7.2 JSON处理\n解析JSON\n生成JSON\n7.3 正则处理\n通过正则判断是否匹配\n通过正则获取内容\n7.4 模板处理\n什么是模板\nGo语言模板使用\n模板中如何插入数据\nMust操作\n嵌套模板\n小结\n7.5 文件操作\n目录操作\n文件操作\n7.6 字符串处理\n字符串操作\n字符串转换\n7.7 总结\n第8章 Web服务\n8.1 Socket编程\n什么是Socket\nSocket如何通信\nSocket基础知识\nTCP Socket\nUDP Socket\n小结\n8.2 WebSocket\nWebSocket原理\nGo语言实现WebSocket\n8.3 REST\n什么是REST\nRESTful的实现\n小结\n8.4 RPC\nRPC工作原理\nGo RPC\n小结\n8.5 总结\n第9章 安全与加密\n9.1 预防CSRF攻击\n什么是CSRF\nCSRF的原理\n如何预防CSRF\n总结\n9.2 确保输入过滤\n识别数据\n过滤数据\n区分过滤数据\n小结\n9.3 避免XSS攻击\n什么是XSS\nXSS的原理\n如何预防XSS\n小结\n9.4 避免SQL注入\n什么是SQL注入\nSQL注入实例\n如何预防SQL注入\n小结\n9.5 存储密码\n普通方案\n进阶方案\n专家方案\n总结\n9.6 加密和解密数据\nbase64加解密\n高级加解密\n小结\n9.7 总结\n第10章 国际化和本地化\n10.1 设置默认地区\n什么是Locale\n设置Locale\n小结\n10.2 本地化资源\n本地化文本信息\n本地化日期和时间\n本地化货币值\n本地化视图和资源\n小结\n10.3 国际化站点\n管理多个本地包\n自动加载本地包\ntemplate mapfunc\n小结\n10.4 总结\n第11章 错误处理，调试和测试\n11.1 错误处理\nError类型\n自定义error\n错误处理\n小结\n11.2 使用GDB调试\nGDB调试简介\n常用命令\n调试过程\n小结\n11.3 Go语言怎么写测试用例\n如何编写测试用例\n如何编写压力测试\n小结\n11.4 总结\n第12章 部署与维护\n12.1 应用日志\nseelog介绍\n基于seelog的自定义日志处理\n发生错误发送邮件\n使用应用日志\n小结\n12.2 网站错误处理\n错误处理的目标\n如何处理错误\n如何处理异常\n小结\n12.3 应用部署\ndaemon\nSupervisord\n小结\n12.4 备份和恢复\n应用备份\nMySQL备份\nMySQL恢复\nredis备份\nredis恢复\n小结\n12.5 总结\n第13章 如何设计一个Web框架\n13.1 项目规划\ngopath以及项目设置\n应用程序流程图\n目录结构\n框架设计\n总结\n13.2 自定义路由器设计\nHTTP路由\n默认的路由实现\nbeego框架路由实现\n13.4 日志和配置设计\n日志和配置的重要性\nbeego的日志设计\nbeego的配置设计\n应用指南\n13.5 实现博客的增删改\n博客目录\n博客路由\n数据库结构\n控制器\nmodel层\nview层\n13.6 总结\n第14章 扩展Web框架\n14.1 静态文件支持\nbeego静态文件实现和设置\nBootstrap集成\n14.2 Session支持\nSession集成\nSession使用\n14.3 表单及验证支持\n表单和验证\n表单类型\n表单验证\n14.4 用户认证\nHTTP Basic和HTTP Digest认证\noauth和oauth2的认证\n自定义认证\n14.5 多语言支持\ni18n集成\n多语言开发使用\n14.6 pprof支持\nbeego支持pprof 使用入门\n14.7 小结\n附录A 参考资料","ebook_url":"https:\/\/read.douban.com\/ebook\/5956758\/","pages":"329","images":{"small":"https://img1.doubanio.com\/view\/subject\/s\/public\/s26376659.jpg","large":"https://img1.doubanio.com\/view\/subject\/l\/public\/s26376659.jpg","medium":"https://img1.doubanio.com\/view\/subject\/m\/public\/s26376659.jpg"},"alt":"https:\/\/book.douban.com\/subject\/24316255\/","id":"24316255","publisher":"电子工业出版社","isbn10":"7121200910","isbn13":"9787121200915","title":"Go Web编程","url":"https:\/\/api.douban.com\/v2\/book\/24316255","alt_title":"","author_intro":"谢孟军，网名ASTA谢，现就职于盛大云，高级研究员，技术经理，主要从事盛大云分发的系统研发工作，努力为盛大游戏、盛大文学、酷六等提供更好的CDN服务。热爱技术，尤其关注实现服务器端高性能、高可用等相关技术。开发了beego、beedb等各类基于Go语言的开源框架和库，致力于Go语言的推广和研究。","summary":"《Go Web编程》介绍如何用Go语言进行Web应用的开发，将Go语言的特性与Web开发实战组合到一起，帮读者成功地构建跨平台的应用程序，节省Go语言开发Web的宝贵时间。有了这些针对真实问题的解决方案放在手边，大多数编程难题都会迎刃而解。\n在《Go Web编程》中，读者可以更加方便地找到各种编程问题的解决方案，内容涵盖文本处理、表单处理、Session管理、数据库交互、加\/解密、国际化和标准化，以及程序的部署维护等运维方面的知识，最后还介绍了一个快速开发的框架帮助您迅速进入Go语言的Web开发。","ebook_price":"30.00","price":"65.00元"},{"rating":{"max":10,"numRaters":2,"average":"0.0","min":0},"subtitle":"Implement solutions by leveraging the power of the GO standard library and reducing dependency on external crates","author":[],"pubdate":"2018-2-27","tags":[{"count":3,"name":"golang","title":"golang"}],"origin_title":"","image":"https://img3.doubanio.com\/view\/subject\/m\/public\/s29724220.jpg","binding":"Paperback","translator":[],"catalog":"","pages":"338","images":{"small":"https://img3.doubanio.com\/view\/subject\/s\/public\/s29724220.jpg","large":"https://img3.doubanio.com\/view\/subject\/l\/public\/s29724220.jpg","medium":"https://img3.doubanio.com\/view\/subject\/m\/public\/s29724220.jpg"},"alt":"https:\/\/book.douban.com\/subject\/30179004\/","id":"30179004","publisher":"Packt Publishing","isbn10":"1788475275","isbn13":"9781788475273","title":"Go Standard Library Cookbook: Over 120 specific ways to make full use of the standard library components in Golang","url":"https:\/\/api.douban.com\/v2\/book\/30179004","alt_title":"","author_intro":"About the Author\nRadomír Sohlich received the master's degree in Applied Informatics from Faculty of Applied Informatics at Tomas Bata University in Zlín. After that, he got a job in a start-up company as a software developer and worked on various projects, usually based on the Java platform. Currently, he continues a software developer career as a contractor for a large international company.In 2015, he fell in love with Go and kept exploring the endless power and possibilities of the language. He is passionate about learning new approaches and technology and feels the same about sharing the knowledge with others.\nRead more","summary":"Key Features\nDevelop high quality, fast and portable applications by leveraging the power of Go Standard Library.Practical recipes that will help you work with the standard library algorithms to boost your productivity as a Go developer.Compose your own algorithms without forfeiting the simplicity and elegance of the Standard Library.\nBook Description\nGoogle's Golang will be the next talk of the town, with amazing features and a powerful library. This book will gear you up for using golang by taking you through recipes that will teach you how to leverage the standard library to implement a particular solution. This will enable Go developers to take advantage of using a rock-solid standard library instead of third-party frameworks.\nThe book begins by exploring the functionalities available for interaction between the environment and the operating system. We will explore common string operations, date\/time manipulations, and numerical problems.\nWe'll then move on to working with the database, accessing the filesystem, and performing I\/O operations. From a networking perspective, we will touch on client and server-side solutions. The basics of concurrency are also covered, before we wrap up with a few tips and tricks.\nBy the end of the book, you will have a good overview of the features of the Golang standard library and what you can achieve with them. Ultimately, you will be proficient in implementing solutions with powerful standard libraries.\nWhat you will learn\nAccess environmental variablesExecute and work with child processesManipulate strings by performing operations such as search, concatenate, and so onParse and format the output of date\/time informationOperate on complex numbers and effective conversions between different number formats and basesWork with standard input and outputHandle filesystem operations and file permissionsCreate TCP and HTTP servers, and access those servers with a clientUtilize synchronization primitivesTest your code\nWho This Book Is For\nThis book is for Go developers who would like to explore the power of Golang and learn how to use the Go standard library for various functionalities. The book assumes basic Go programming knowledge.\nTable of Contents\nInteracting With EnvironmentStrings and ThingsDealing with NumbersOnce upon a TimeIn and OutDiscover the FilesystemConnect the networkWorking with DatabaseCome to the server sideFun with ConcurrencyTips and Tricks","price":"USD 49.99"},{"rating":{"max":10,"numRaters":1,"average":"0.0","min":0},"subtitle":"Discover practical techniques to build cloud-native apps that are scalable, reliable, and always available.","author":["Mina Andrawos","Martin Helmich"],"pubdate":"2017-12-28","tags":[{"count":1,"name":"GoLang","title":"GoLang"}],"origin_title":"","image":"https://img1.doubanio.com\/view\/subject\/m\/public\/s29702149.jpg","binding":"Paperback","translator":[],"catalog":"","pages":"404","images":{"small":"https://img1.doubanio.com\/view\/subject\/s\/public\/s29702149.jpg","large":"https://img1.doubanio.com\/view\/subject\/l\/public\/s29702149.jpg","medium":"https://img1.doubanio.com\/view\/subject\/m\/public\/s29702149.jpg"},"alt":"https:\/\/book.douban.com\/subject\/30154908\/","id":"30154908","publisher":"Packt Publishing","isbn10":"178712598X","isbn13":"9781787125988","title":"Cloud Native programming with Golang: Develop microservice-based high performance web apps for the cloud with Go","url":"https:\/\/api.douban.com\/v2\/book\/30154908","alt_title":"","author_intro":"About the Author\nMina Andrawos is an experienced engineer who has developed deep experience in Go from using it personally and professionally. He regularly authors articles and tutorials about the language, and also shares Go's open source projects. He has written numerous Go applications with varying degrees of complexity.Other than Go, he has skills in Java, C#, Python, and C++. He has worked with various databases and software architectures. He is also skilled with the agile methodology for software development. Besides software development, he has working experience of scrum mastering, sales engineering, and software product management.For Nabil, Mervat, Catherine, and Fady.Thanks to all my family for their amazing support, and continuous encouragement.Martin Helmich studied computer science at the University of Applied Sciences in Osnabrück and lives in Rahden, Germany. He works as a software architect, specializing in building distributed applications using web technologies and Microservice Architectures. Besides programming in Go, PHP, Python, and Node.js, he also builds infrastructures using configuration management tools such as SaltStack and container technologies such as Docker and Kubernetes.He is an Open Source enthusiast and likes to make fun of people who are not using Linux. In his free time, you'll probably find him coding on one of his open source pet projects, listening to music, or reading science-fiction literature.\nRead more","summary":"Key Features\nBuild well-designed and secure microservices. Enrich your microservices with continous integration and monitoring.Containerize your application with DockerDeploy your application to AWS. Learn how to utilize the powerful AWS services from within your application\nBook Description\nCloud computing and microservices are two very important concepts in modern software architecture. They represent key skills that ambitious software engineers need to acquire in order to design and build software applications capable of performing and scaling. Go is a modern cross-platform programming language that is very powerful yet simple; it is an excellent choice for microservices and cloud applications. Go is gaining more and more popularity, and becoming a very attractive skill..\nThe book will take you on a journey into the world of microservices and cloud computing with the help of Go. It will start by covering the software architectural patterns of cloud applications, as well as practical concepts regarding how to scale, distribute, and deploy those applications. You will also learn how to build a JavaScript-based front-end for your application, using TypeScript and React.\nFrom there, we dive into commercial cloud offerings by covering AWS. Finally, we conclude our book by providing some overviews of other concepts and technologies that the reader can explore to move from where the book leaves off.\nWhat you will learn\nUnderstand modern software applications architecturesBuild secure microservices that can effectively communicate with other servicesGet to know about event-driven architectures by diving into message queues such as Kafka, Rabbitmq, and AWS SQS.Understand key modern database technologies such as MongoDB, and Amazon's DynamoDBLeverage the power of containersExplore Amazon cloud services fundamentalsKnow how to utilize the power of the Go language to access key services in the Amazon cloud such as S3, SQS, DynamoDB and more.Build front-end applications using ReactJS with GoImplement CD for modern applications\nWho This Book Is For\nThis book is for developers who want to begin building secure, resilient, robust, and scalable Go applications that are cloud native. Some knowledge of the Go programming language should be sufficient.To build the front-end application, you will also need some knowledge of JavaScript programming.\nTable of Contents\nModern Microservice ArchitecturesBuilding Microservices using Rest APIsSecuring MicroservicesAsynchronous Microservice Architectures Using Message QueuesBuilding a Frontend with ReactDeploying Your Application in ContainersAWSAWS- IIContinuous DeliveryMonitoringMigrationWhere to go from here","price":"USD 44.99"},{"rating":{"max":10,"numRaters":5,"average":"0.0","min":0},"subtitle":"Explore the necessary concepts of REST API development by building few real world services from scratch.","author":["Naren Yellavula"],"pubdate":"2017-12-28","tags":[{"count":2,"name":"Golang","title":"Golang"},{"count":1,"name":"webservice","title":"webservice"}],"origin_title":"","image":"https://img1.doubanio.com\/view\/subject\/m\/public\/s29702147.jpg","binding":"Paperback","translator":[],"catalog":"","pages":"316","images":{"small":"https://img1.doubanio.com\/view\/subject\/s\/public\/s29702147.jpg","large":"https://img1.doubanio.com\/view\/subject\/l\/public\/s29702147.jpg","medium":"https://img1.doubanio.com\/view\/subject\/m\/public\/s29702147.jpg"},"alt":"https:\/\/book.douban.com\/subject\/30154905\/","id":"30154905","publisher":"Packt Publishing","isbn10":"1788294289","isbn13":"9781788294287","title":"Building RESTful Web services with Go: Learn how to build powerful RESTful APIs with Golang that scale gracefully","url":"https:\/\/api.douban.com\/v2\/book\/30154905","alt_title":"","author_intro":"About the Author\nNaren Yellavula-fondly called by the developer community as Naren Arya-started his programming career in the funniest way. He ditched mechanical engineering for computer science after watching The Matrix for the first time. With dreams of coding a mini world, he continuously sharpened his practical skills. Initially, he built few a mobile applications. Then, he completely moved into the space of full stack development. He always believed that computers and software can help make this world a better place. He wrote 120+ development articles on various open source technologies, including Go and Python. He is also one of the few young speakers at the PyCon India conference (he spoke at Bangalore in 2015 and Delhi in 2017). With detailed knowledge of web scraping and REST APIs, he dived into multiple domains such as cloud telephony and cloud-based web services. On this journey, he bathed in a lot of design decisions. He currently works as a software engineer for Citrix R&D, India. Naren is a great fan of Go personally because of the speed and intuitiveness of the language. In his spare time, he tries to educate the youth in programming and software development. He loves reading nonfiction most of the time, and Victorian and Russian fiction sometimes.\nRead more","summary":"Key Features\nFollow best practices and explore techniques such as clustering and caching to achieve a reactive, scalable web serviceLeverage the Gin Framework to quickly implement RESTful endpointsLearn to implement a client library for a RESTful web service using Go\nBook Description\nREST is an architectural style that tackles the challenges of building scalable web services and in today's connected world, APIs have taken a central role on the web. APIs provide the fabric through which systems interact, and REST has become synonymous with APIs. The depth, breadth, and ease of use of Go, makes it a breeze for developers to work with it to build robust Web APIs. This book takes you through the design of RESTful web services and leverages a framework like Gin to implement these services.\nThe book starts with a brief introduction to REST API development and how it transformed the modern web. You will learn how to handle routing and authentication of web services along with working with middleware for internal service. The book explains how to use Go frameworks to build RESTful web services and work with MongoDB to create REST API. You will learn how to integrate Postgres SQL and JSON with a Go web service and build a client library in Go for consuming REST API. You will learn how to scale APIs using the microservice architecture and deploy the REST APIs using Nginx as a proxy server. Finally you will learn how to metricize a REST API using an API Gateway.\nBy the end of the book you will be proficient in building RESTful APIs in Go.\nWhat you will learn\nCreate HTTP handler and introspect the Gorilla Mux routerOAuth 2 implementation with GoBuild RESTFul API with Gin FrameworkCreate REST API with MongoDB and GoBuild a working client library and unit test for REST APIDebug, test, and profile RESTful APIs with each of the frameworksOptimize and scale REST API using microservices\nWho This Book Is For\nThis book is intended for those who want to learn to build RESTful web services with a framework like Gin. To make best use of the code samples included in the book, you should have a basic knowledge of Go programming.\nTable of Contents\nGetting started with the REST API developmentHandling Routing for our REST servicesWorking with Middleware & RPCSimplifying RESTFul Services with popular Go frameworksWorking with MongoDB and Go to create REST APIWorking with Protocol BuffersWorking with PostgreSQL, JSON and GoBuilding a REST API client in Go & Unit testing APIScaling our REST API using MicroServicesDeploying our REST servicesUsing an API Gateway to monitor and metricize REST APIHandling Authentication for our REST Services","price":"USD 44.99"},{"rating":{"max":10,"numRaters":0,"average":"0.0","min":0},"subtitle":"Design and architect highly scalable and robust applications using Go","author":["Jyotiswarup Raiturkar"],"pubdate":"2019-2-11","tags":[{"count":2,"name":"Golang","title":"Golang"}],"origin_title":"","image":"https://img1.doubanio.com\/view\/subject\/m\/public\/s30000568.jpg","binding":"Paperback","translator":[],"catalog":"","pages":"500","images":{"small":"https://img1.doubanio.com\/view\/subject\/s\/public\/s30000568.jpg","large":"https://img1.doubanio.com\/view\/subject\/l\/public\/s30000568.jpg","medium":"https://img1.doubanio.com\/view\/subject\/m\/public\/s30000568.jpg"},"alt":"https:\/\/book.douban.com\/subject\/30455214\/","id":"30455214","publisher":"Packt Publishing","isbn10":"1788622596","isbn13":"9781788622592","title":"Hands-On Software Architecture with Golang","url":"https:\/\/api.douban.com\/v2\/book\/30455214","alt_title":"","author_intro":"","summary":"","price":"USD 49.99"},{"rating":{"max":10,"numRaters":1,"average":"0.0","min":0},"subtitle":"Level up your Go programming skills to develop faster and more efficient code","author":["Bhagvan Kommadi"],"pubdate":"2019-3-30","tags":[],"origin_title":"Bhagvan Kommadi","image":"https://img3.doubanio.com\/view\/subject\/m\/public\/s33451401.jpg","binding":"Paperback","translator":[],"catalog":"Data Structures & Algorithms\nGetting Started with Go for Data Structures & Algorithms\nLinear Data Structures\nNon Linear Data Structures\nHomogeneous Data Structures\nHeterogeneous Data Structures\nDynamic Data Structures\nClassic Algorithms\nNetwork and Sparse Matrix Representation\nMemory Management\nNext Steps (Appendix)","pages":"336","images":{"small":"https://img3.doubanio.com\/view\/subject\/s\/public\/s33451401.jpg","large":"https://img3.doubanio.com\/view\/subject\/l\/public\/s33451401.jpg","medium":"https://img3.doubanio.com\/view\/subject\/m\/public\/s33451401.jpg"},"alt":"https:\/\/book.douban.com\/subject\/34786366\/","id":"34786366","publisher":"Packt Publishing","isbn10":"1789618509","isbn13":"9781789618501","title":"Learn Data Structures and Algorithms with Golang","url":"https:\/\/api.douban.com\/v2\/book\/34786366","alt_title":"Bhagvan Kommadi","author_intro":"Bhagvan Kommadi is the Founder of Architect Corner & has around 19 years’ experience in the industry, ranging from large scale enterprise development to helping incubate software product start-ups. He has done Masters in Industrial Systems Engineering at Georgia Institute of Technology (1997) and Bachelors in Aerospace Engineering from Indian Institute of Technology, Madras (1993). He is member of IFX forum,Oracle JCP and participant in Java Community Process. He is part of the Acta Scientific Medical Sciences Review Board.\nBhagvan Kommadi founded Quantica Computacao, the first quantum computing startup in India. Markets and Markets have positioned Quantica Computacao in ‘Emerging Companies’ section of Quantum Computing quadrants. Bhagvan has engineered and developed simulators and tools in the area of quantum technology using IBM Q, Microsoft Q#, and Google QScript. Company's focus is on developing quantum cryptographic tools which will be able to provide quantum proof data security, which will help the banking institution to protect their transactions.\nHe is a hands-on CTO who has been contributing to open source, blogs, latest technologies stack like go, Python, Django, node.js & Java, MySQL, Postgres, Mongo and Cassandra. He is an Individual member of Oracle JCP: https:\/\/jcp.org\/en\/participation\/members\/K. He is the technical reviewer for Packt publishing and reviewed the book titled building-serverless-python-web-services- zappa. He has written Packt Publishing - Hands-On Data Structures and Algorithms with Go. He is writing books titled Learn-Q-Programming---Fundamentals-of-Q# and Hands-On Quantum Computing with Python. He has presented in PyCon before on topics such as Adaptive Learning etc.,","summary":"Explore Golang's data structures and algorithms to design, implement, and analyze code in the professional setting\nKey Features\nLearn the basics of data structures and algorithms and implement them efficiently\nUse data structures such as arrays, stacks, trees, lists and graphs in real-world scenarios\nCompare the complexity of different algorithms and data structures for improved code performance\nBook Description\nGolang is one of the fastest growing programming languages in the software industry. Its speed, simplicity, and reliability make it the perfect choice for building robust applications. This brings the need to have a solid foundation in data structures and algorithms with Go so as to build scalable applications. Complete with hands-on tutorials, this book will guide you in using the best data structures and algorithms for problem solving.\nThe book begins with an introduction to Go data structures and algorithms. You'll learn how to store data using linked lists, arrays, stacks, and queues. Moving ahead, you'll discover how to implement sorting and searching algorithms, followed by binary search trees. This book will also help you improve the performance of your applications by stringing data types and implementing hash structures in algorithm design. Finally, you'll be able to apply traditional data structures to solve real-world problems.\nBy the end of the book, you'll have become adept at implementing classic data structures and algorithms in Go, propelling you to become a confident Go programmer.\nWhat you will learn\nImprove application performance using the most suitable data structure and algorithm\nExplore the wide range of classic algorithms such as recursion and hashing algorithms\nWork with algorithms such as garbage collection for efficient memory management\nAnalyze the cost and benefit trade-off to identify algorithms and data structures for problem solving\nExplore techniques for writing pseudocode algorithm and ace whiteboard coding in interviews\nDiscover the pitfalls in selecting data structures and algorithms by predicting their speed and efficiency\nWho this book is for\nThis book is for developers who want to understand how to select the best data structures and algorithms that will help solve coding problems. Basic Go programming experience will be an added advantage.\nTable of Contents\nData Structures & Algorithms\nGetting Started with Go for Data Structures & Algorithms\nLinear Data Structures\nNon Linear Data Structures\nHomogeneous Data Structures\nHeterogeneous Data Structures\nDynamic Data Structures\nClassic Algorithms\nNetwork and Sparse Matrix Representation\nMemory Management\nNext Steps (Appendix)","price":"USD 39.99"},{"rating":{"max":10,"numRaters":104,"average":"7.0","min":0},"subtitle":"","author":["Mark Summerfield"],"pubdate":"2013-8-1","tags":[{"count":81,"name":"go语言","title":"go语言"},{"count":62,"name":"golang","title":"golang"},{"count":44,"name":"Go","title":"Go"},{"count":40,"name":"编程","title":"编程"},{"count":32,"name":"计算机","title":"计算机"},{"count":18,"name":"Programming","title":"Programming"},{"count":17,"name":"软件开发","title":"软件开发"},{"count":17,"name":"programming","title":"programming"}],"origin_title":"Programming in Go","image":"https://img3.doubanio.com\/view\/subject\/m\/public\/s27979270.jpg","binding":"平装","translator":["许式伟","吕桂华","徐立","何李石"],"catalog":"Go语言程序设计》\n第1章　5个例子　1\n1.1　开始　1\n1.2　编辑、编译和运行　3\n1.3　Hello Who?　6\n1.4　大数字——二维切片　8\n1.5　栈——自定义类型及其方法　12\n1.6　americanise示例——文件、映射和闭包　18\n1.7　从极坐标到笛卡儿坐标——并发　28\n1.8　练习　33\n第2章　布尔与数值类型　35\n2.1　基础　35\n2.2　布尔值和布尔表达式　39\n2.3　数值类型　40\n2.3.1　整型　42\n2.3.2　浮点类型　46\n2.4　例子：statistics　53\n2.4.1　实现一个简单的统计函数　54\n2.4.2　实现一个基本的HTTP服务器　55\n2.5　练习　58\n第3章　字符串　60\n3.1　字面量、操作符和转义　61\n3.2　比较字符串　63\n3.3　字符和字符串　65\n3.4　字符串索引与切片　67\n3.5　使用fmt包来格式化字符串　69\n3.5.1　格式化布尔值　73\n3.5.2　格式化整数　74\n3.5.3　格式化字符　75\n3.5.4　格式化浮点数　75\n3.5.5　格式化字符串和切片　76\n3.5.6　为调试格式化　78\n3.6　其他字符处理相关的包　80\n3.6.1　strings包　81\n3.6.2　strconv包　86\n3.6.3　utf8包　90\n3.6.4　unicode包　91\n3.6.5　regexp包　92\n3.7　例子：m3u2pls　101\n3.8　练习　106\n第4章　集合类型　108\n4.1　值、指针和引用类型　108\n4.2　数组和切片　115\n4.2.1　索引与分割切片　119\n4.2.2　遍历切片　119\n4.2.3　修改切片　121\n4.2.4　排序和搜索切片　125\n4.3　映射　128\n4.3.1　创建和填充映射　129\n4.3.2　映射查询　131\n4.3.3　修改映射　132\n4.3.4　键序遍历映射　132\n4.3.5　映射反转　133\n4.4　例子　134\n4.4.1　猜测分隔符　134\n4.4.2　词频统计　136\n4.5　练习　141\n第5章　过程式编程　144\n5.1　语句基础　144\n5.1.1　类型转换　147\n5.1.2　类型断言　148\n5.2　分支　149\n5.2.1　if语句　150\n5.2.2　switch语句　151\n5.3　for循环语句　158\n5.4　通信和并发语句　160\n5.5　defer、panic和recover　166\n5.6　自定义函数　171\n5.6.1　函数参数　172\n5.6.2　init()函数和main()函数　175\n5.6.3　闭包　176\n5.6.4　递归函数　178\n5.6.5　运行时选择函数　181\n5.6.6　泛型函数　183\n5.6.7　高阶函数　187\n5.7　例子：缩进排序　192\n5.8　练习　197\n第6章　面向对象编程　199\n6.1　几个关键概念　199\n6.2　自定义类型　201\n6.2.1　添加方法　203\n6.2.2　验证类型　207\n6.3　接口　209\n6.4　结构体　217\n6.5　例子　224\n6.5.1　FuzzyBool——一个单值自定义类型　224\n6.5.2　Shapes——一系列自定义类型　229\n6.5.3　有序映射——一个通用的集合类型　240\n6.6　练习　248\n第7章　并发编程　251\n7.1　关键概念　252\n7.2　例子　256\n7.2.1　过滤器　256\n7.2.2　并发的Grep　260\n7.2.3　线程安全的映射　266\n7.2.4　Apache报告　271\n7.2.5　查找副本　278\n7.3　练习　285\n第8章　文件处理　287\n8.1　自定义数据文件　287\n8.1.1　处理JSON文件　290\n8.1.2　处理XML文件　295\n8.1.3　处理纯文本文件　301\n8.1.4　处理Go语言二进制文件　307\n8.1.5　处理自定义的二进制文件　309\n8.2　归档文件　317\n8.2.1　创建zip归档文件　317\n8.2.2　创建可压缩的tar包　319\n8.2.3　解开zip归档文件　321\n8.2.4　解开tar归档文件　322\n8.3　练习　324\n第9章　包　326\n9.1　自定义包　326\n9.1.1　创建自定义的包　327\n9.1.2　导入包　333\n9.2　第三方包　334\n9.3　Go命令行工具简介　335\n9.4　Go标准库简介　336\n9.4.1　归档和压缩包　336\n9.4.2　字节流和字符串相关的包　336\n9.4.3　容器包　337\n9.4.4　文件和操作系统相关的包　339\n9.4.5　图像处理相关的包　341\n9.4.6　数学处理包　341\n9.4.7　其他一些包　341\n9.4.8　网络包　342\n9.4.9　反射包　343\n9.5　练习　346\n附录A　后记　348\n附录B　软件专利的危害　350\n附录C　精选书目　353","pages":"354","images":{"small":"https://img3.doubanio.com\/view\/subject\/s\/public\/s27979270.jpg","large":"https://img3.doubanio.com\/view\/subject\/l\/public\/s27979270.jpg","medium":"https://img3.doubanio.com\/view\/subject\/m\/public\/s27979270.jpg"},"alt":"https:\/\/book.douban.com\/subject\/24869910\/","id":"24869910","publisher":"人民邮电出版社","isbn10":"7115317909","isbn13":"9787115317902","title":"Go 语言程序设计","url":"https:\/\/api.douban.com\/v2\/book\/24869910","alt_title":"Programming in Go","author_intro":"Mark Summerfield Qtrac公司创始人，独立的培训讲师、顾问、技术编辑，Go、Python、C++、Qt和PyQt方面的技术作家。他的著作包括Rapid GUI Programming with Python and Qt、C++ GUI Programming with Qt 4（与Jasmin Blanchette合著）、Programming in Python 3和Advanced Qt Programming等。\n许式伟——七牛云存储CEO，开源爱好者，发布过十余个C++开源项目，拥有超过15年的C\/C++开发经验。\n吕桂华——七牛云存储联合创始人，拥有十余年的C\/C++大型项目开发经验，也曾在Java和.NET平台上探索多年。\n徐 立——七牛云存储首席布道师，前盛大创新院高级研究员。\n何李石——七牛云存储布道师。\n七牛云存储技术团队是国内第一个核心服务完全采用Go语言实现的团队。","summary":"国外最经典的Go语言著作，Go语言编程的先驱者Mark Summerfield的实践经验总结。\n这是一本Go语言实战指南，帮你了解Go语言，按Go语言的方式思考，以及使用Go语言来编写高性能软件。\n作者展示了如何编写充分利用Go语言突破性的特性和惯用法的代码，以及Go语言在其他语言之上所做的改进，并着重强调了Go语言的关键创新。\n注重实践教学，每章都提供了多个经过精心设计的代码示例。\n由国内第一个核心服务完全采用Go语言实现的团队——七牛团队核心成员翻译。","series":{"id":"18948","title":"新锐编程语言集萃"},"price":"CNY 69.00"},{"rating":{"max":10,"numRaters":79,"average":"6.3","min":0},"subtitle":"Go并发编程实战","author":["郝林"],"pubdate":"2015-1","tags":[{"count":64,"name":"GO","title":"GO"},{"count":39,"name":"编程","title":"编程"},{"count":35,"name":"Golang","title":"Golang"},{"count":21,"name":"高并发","title":"高并发"},{"count":19,"name":"编程语言","title":"编程语言"},{"count":15,"name":"Programming","title":"Programming"},{"count":13,"name":"计算机","title":"计算机"},{"count":12,"name":"软件开发","title":"软件开发"}],"origin_title":"","image":"https://img9.doubanio.com\/view\/subject\/m\/public\/s27763085.jpg","binding":"平装","translator":[],"catalog":"","ebook_url":"https:\/\/read.douban.com\/ebook\/12187287\/","pages":"572","images":{"small":"https://img9.doubanio.com\/view\/subject\/s\/public\/s27763085.jpg","large":"https://img9.doubanio.com\/view\/subject\/l\/public\/s27763085.jpg","medium":"https://img9.doubanio.com\/view\/subject\/m\/public\/s27763085.jpg"},"alt":"https:\/\/book.douban.com\/subject\/26244729\/","id":"26244729","publisher":"人民邮电出版社","isbn10":"7115373981","isbn13":"9787115373984","title":"Go并发编程实战","url":"https:\/\/api.douban.com\/v2\/book\/26244729","alt_title":"","author_intro":"","summary":"","ebook_price":"39.99","price":"89元"},{"rating":{"max":10,"numRaters":84,"average":"9.4","min":0},"subtitle":"","author":["艾伦A.A.多诺万 (Alan A.A.Donovan)","布莱恩W.柯尼汉 (Brian W.Kemighan)"],"pubdate":"2016-1-1","tags":[{"count":79,"name":"Go","title":"Go"},{"count":55,"name":"golang","title":"golang"},{"count":34,"name":"编程","title":"编程"},{"count":33,"name":"计算机","title":"计算机"},{"count":28,"name":"编程语言","title":"编程语言"},{"count":19,"name":"软件开发","title":"软件开发"},{"count":18,"name":"Programming","title":"Programming"},{"count":17,"name":"程序设计","title":"程序设计"}],"origin_title":"","image":"https://img3.doubanio.com\/view\/subject\/m\/public\/s29140891.jpg","binding":"平装","translator":[],"catalog":"","pages":"366","images":{"small":"https://img3.doubanio.com\/view\/subject\/s\/public\/s29140891.jpg","large":"https://img3.doubanio.com\/view\/subject\/l\/public\/s29140891.jpg","medium":"https://img3.doubanio.com\/view\/subject\/m\/public\/s29140891.jpg"},"alt":"https:\/\/book.douban.com\/subject\/26859123\/","id":"26859123","publisher":"机械工业出版社","isbn10":"7111526287","isbn13":"9787111526285","title":"Go程序设计语言(英文版)","url":"https:\/\/api.douban.com\/v2\/book\/26859123","alt_title":"","author_intro":"","summary":"","series":{"id":"1895","title":"经典原版书库"},"price":"CNY 79.00"},{"rating":{"max":10,"numRaters":42,"average":"6.4","min":0},"subtitle":"","author":["孙宏亮"],"pubdate":"2015-8-1","tags":[{"count":52,"name":"Docker","title":"Docker"},{"count":21,"name":"golang","title":"golang"},{"count":16,"name":"计算机","title":"计算机"},{"count":15,"name":"docker","title":"docker"},{"count":14,"name":"编程","title":"编程"},{"count":12,"name":"源码分析","title":"源码分析"},{"count":8,"name":"池健强推荐","title":"池健强推荐"},{"count":5,"name":"programming","title":"programming"}],"origin_title":"","image":"https://img9.doubanio.com\/view\/subject\/m\/public\/s28265214.jpg","binding":"平装","translator":[],"catalog":"目录\n赞誉\n序\n前言\n第1章　Docker架构\t1\n1.1　引言\t1\n1.2　Docker总架构图\t2\n1.3　Docker各模块功能与实现分析\t3\n1.3.1　Docker Client\t4\n1.3.2　Docker Daemon\t4\n1.3.3　Docker Registry\t6\n1.3.4　Graph\t7\n1.3.5　Driver\t7\n1.3.6　libcontainer\t10\n1.3.7　Docker Container\t10\n1.4　Docker运行案例分析\t11\n1.4.1　docker pull\t11\n1.4.2　docker run\t12\n1.5　总结\t14\n第2章　Docker Client创建与命令执行\t15\n2.1　引言\t15\n2.2　创建Docker Client\t16\n2.2.1　Docker命令的flag参数解析\t17\n2.2.2　处理flag信息并收集Docker Client的配置信息\t20\n2.2.3　如何创建Docker Client\t22\n2.3　Docker命令执行\t24\n2.3.1　Docker Client解析请求命令\t24\n2.3.2　Docker Client执行请求命令\t25\n2.4　总结\t27\n第3章　启动Docker Daemon\t28\n3.1　引言\t28\n3.2　Docker Daemon的启动流程\t29\n3.3　mainDaemon()的具体实现\t30\n3.3.1　配置初始化\t30\n3.3.2　flag参数检查\t32\n3.3.3　创建engine对象\t33\n3.3.4　设置engine的信号捕获\t34\n3.3.5　加载builtins\t35\n3.3.6　使用goroutine加载daemon\n对象并运行\t38\n3.3.7　打印Docker版本及驱动信息\t41\n3.3.8　serveapi的创建与运行\t42\n3.4　总结\t42\n第4章　Docker Daemon之NewDaemon实现\t43\n4.1　引言\t43\n4.2　NewDaemon具体实现\t44\n4.3　应用配置信息\t45\n4.3.1　配置Docker容器的MTU\t45\n4.3.2　检测网桥配置信息\t46\n4.3.3　查验容器间的通信配置\t46\n4.3.4　处理网络功能配置\t47\n4.3.5　处理PID文件配置\t47\n4.4　检测系统支持及用户权限\t48\n4.5　配置工作路径\t49\n4.6　加载并配置graphdriver\t49\n4.6.1　创建graphdriver\t49\n4.6.2　验证btrfs与SELinux的兼容性\t51\n4.6.3　创建容器仓库目录\t51\n4.6.4　迁移容器至aufs类型\t51\n4.6.5　创建镜像graph\t52\n4.6.6　创建volumesdriver以及volumes graph\t53\n4.6.7　创建TagStore\t53\n4.7　配置Docker Daemon网络环境\t54\n4.7.1　创建Docker网络设备\t55\n4.7.2　启用iptables功能\t55\n4.7.3　启用系统数据包转发功能\t56\n4.7.4　创建DOCKER链\t56\n4.7.5　注册处理方法至Engine\t57\n4.8　创建graphdb并初始化\t57\n4.9　创建execdriver\t58\n4.10　创建daemon实例\t59\n4.11　检测DNS配置\t60\n4.12　启动时加载已有Docker容器\t61\n4.13　设置shutdown的处理方法\t61\n4.14　返回daemon对象实例\t62\n4.15　总结\t62\n第5章　Docker Server的创建\t63\n5.1　引言\t63\n5.2　Docker Server创建流程\t63\n5.2.1　创建名为“serveapi”的Job\t64\n5.2.2　配置Job环境变量\t64\n5.2.3　运行Job\t65\n5.3　ServeApi运行流程\t65\n5.4　ListenAndServe实现\t68\n5.4.1　创建router路由实例\t69\n5.4.2　创建listener监听实例\t74\n5.4.3　创建http.Server\t74\n5.4.4　启动API服务\t75\n5.5　总结\t75\n第6章　Docker Daemon网络\t76\n6.1　引言\t76\n6.2　Docker Daemon网络介绍\t77\n6.3　Docker Daemon网络配置接口\t78\n6.4　Docker Daemon网络初始化\t79\n6.4.1　启动Docker Daemon传递flag参数\t80\n6.4.2　解析网络flag参数\t80\n6.4.3　预处理flag参数\t80\n6.4.4　确定Docker网络模式\t81\n6.5　创建Docker网桥\t82\n6.5.1　提取环境变量\t83\n6.5.2　确定Docker网桥设备名\t83\n6.5.3　查找bridgeIface网桥设备\t83\n6.5.4　bridgeIface已创建\t84\n6.5.5　bridgeIface未创建\t85\n6.5.6　获取网桥设备的网络地址\t88\n6.5.7　配置Docker Daemon的iptables\t88\n6.5.8　配置网络设备间数据报转发功能\t88\n6.5.9　注册网络Handler\t89\n6.6　总结\t89\n第7章　Docker容器网络\t90\n7.1　引言\t90\n7.2　Docker容器网络模式\t93\n7.2.1　bridge桥接模式\t93\n7.2.2　host模式\t95\n7.2.3　other container模式\t96\n7.2.4　none模式\t97\n7.3　Docker Client配置容器网络模式\t97\n7.3.1　使用Docker Client\t98\n7.3.2　runconfig包解析\t98\n7.3.3　CmdRun执行\t102\n7.4　Docker Daemon创建容器网络流程\t103\n7.4.1　创建容器之网络配置\t103\n7.4.2　启动容器之网络配置\t105\n7.5　execdriver网络执行流程\t111\n7.5.1　创建libcontainer的Config对象\t112\n7.5.2　调用libcontainer的namespaces启动容器\t116\n7.6　libcontainer实现内核态网络配置\t117\n7.6.1　创建exec.Cmd\t118\n7.6.2　启动exec.Cmd创建进程\t119\n7.6.3　为容器进程初始化网络环境\t120\n7.7　总结\t122\n第8章　Docker镜像\t123\n8.1　引言\t123\n8.2　Docker镜像介绍\t124\n8.3　rootfs\t124\n8.4　Union Mount\t125\n8.5　image\t127\n8.6　layer\t128\n8.7　总结\t129\n第9章　Docker镜像下载\t130\n9.1　引言\t130\n9.2　Docker镜像下载流程\t131\n9.3　Docker Client\t131\n9.3.1　解析镜像参数\t132\n9.3.2　配置认证信息\t136\n9.3.3　发送API请求\t137\n9.4　Docker Server\t138\n9.4.1　解析请求参数\t138\n9.4.2　创建并配置Job\t139\n9.4.3　触发执行Job\t139\n9.5　Docker Daemon\t140\n9.5.1　解析Job参数\t140\n9.5.2　创建session对象\t141\n9.5.3　执行镜像下载\t142\n9.6　总结\t147\n第10章　Docker镜像存储\t149\n10.1　引言\t149\n10.2　镜像注册\t150\n10.3　验证镜像ID\t151\n10.4　创建镜像路径\t152\n10.4.1　创建mnt、diff和layers子目录\t153\n10.4.2　挂载祖先镜像并返回根目录\t155\n10.5　存储镜像内容\t157\n10.5.1　解压镜像内容\t158\n10.5.2　收集镜像大小并记录\t160\n10.5.3　存储jsonData信息\t161\n10.6　注册镜像ID\t162\n10.7　总结\t163\n第11章　docker build实现\t164\n11.1　引言\t164\n11.2　docker build执行流程\t165\n11.2.1　Docker Client与docker build\t166\n11.2.2　Docker Server与docker build\t170\n11.2.3　Docker Daemon与docker build\t171\n11.3　Dockerfile命令解析流程\t174\n11.4　Dockerfile命令分析\t177\n11.4.1　FROM命令\t177\n11.4.2　RUN命令\t178\n11.4.3　ENV命令\t182\n11.5　总结\t182\n第12章　Docker容器创建\t183\n12.1　引言\t183\n12.2　Docker容器运行流程\t184\n12.3　Docker Daemon创建容器对象\t185\n12.3.1　LookupImage\t186\n12.3.2　CheckDepth\t188\n12.3.3　mergeAndVerifyConfig\t188\n12.3.4　newContainer\t189\n12.3.5　createRootfs\t190\n12.3.6　ToDisk\t190\n12.3.7　Register\t191\n12.4　Docker Daemon启动容器\t191\n12.4.1　setupContainerDns\t192\n12.4.2　Mount\t193\n12.4.3　initializeNetworking\t194\n12.4.4　verifyDaemonSetting\t194\n12.4.5　prepareVolumesForContainer\t195\n12.4.6　setupLinkedContainers\t196\n12.4.7　setupWorkingDirectory\t199\n12.4.8　createDaemonEnvironment\t199\n12.4.9　populateCommand\t200\n12.4.10　setupMountsForContainer\t200\n12.4.11　waitForStart\t201\n12.5　总结\t202\n第13章　dockerinit启动\t203\n13.1　引言\t203\n13.2　dockerinit介绍\t204\n13.2.1　dockerinit初始化内容\t204\n13.2.2　dockerinit与Docker Daemon\t204\n13.3　dockerinit执行入口\t205\n13.3.1　createCommand分析\t205\n13.3.2　namespace.exec\t207\n13.4　dockerinit运行\t208\n13.4.1　reexec.Init()的分析\t208\n13.4.2　dockerinit的执行流程\t210\n13.5　libcontainer的运行\t211\n13.5.1　Docker Daemon设置cgroups参数\t213\n13.5.2　Docker Daemon创建网络栈资源\t213\n13.5.3　dockerinit配置网络栈\t213\n13.5.4　dockerinit初始化mount namespace\t215\n13.5.5　dockerinit完成namespace配置\t215\n13.5.6　dockerinit执行用户命令Entrypoint\t217\n13.6　总结\t218\n第14章　libcontainer介绍\t219\n14.1　引言\t219\n14.2　Docker、libcontainer以及LXC的关系\t220\n14.3　libcontainer模块分析\t221\n14.3.1　namespace\t221\n14.3.2　cgroup\t224\n14.3.3　网络\t225\n14.3.4　挂载\t226\n14.3.5　设备\t227\n14.3.6　nsinit\t227\n14.3.7　其他模块\t227\n14.4　总结\t228\n第15章　Swarm架构设计与实现\t229\n15.1　引言\t229\n15.2　Swarm架构\t230\n15.2.1　Swarm Node\t231\n15.2.2　Docker Node\t231\n15.2.3　node discovery\t231\n15.2.4　scheduler\t232\n15.3　Swarm命令\t232\n15.3.1　swarm create\t232\n15.3.2　swarm manage\t232\n15.3.3　swarm join\t233\n15.3.4　swarm list\t234\n15.4　总结\t234\n第16章　Machine架构设计与实现\t235\n16.1　引言\t235\n16.2　Machine架构\t236\n16.2.1　Machine\t237\n16.2.2　Store\t237\n16.2.3　Host\t237\n16.2.4　Driver\t238\n16.2.5　Provisioner\t238\n16.2.6　Machine运行流程\t239\n16.3　Machine与Swarm的结合\t240\n16.4　总结\t241\n第17章　Compose架构设计与实现\t242\n17.1　引言\t242\n17.2　Compose介绍\t242\n17.3　Compose架构\t243\n17.4　Compose评价\t246\n17.4.1　Compose单机能力\t246\n17.4.2　Compose跨节点能力\t247\n17.4.3　Compose与Swarm\t247\n17.5　总结\t247","pages":"264","images":{"small":"https://img9.doubanio.com\/view\/subject\/s\/public\/s28265214.jpg","large":"https://img9.doubanio.com\/view\/subject\/l\/public\/s28265214.jpg","medium":"https://img9.doubanio.com\/view\/subject\/m\/public\/s28265214.jpg"},"alt":"https:\/\/book.douban.com\/subject\/26581184\/","id":"26581184","publisher":"机械工业出版社","isbn10":"7111510720","isbn13":"9787111510727","title":"Docker源码分析","url":"https:\/\/api.douban.com\/v2\/book\/26581184","alt_title":"","author_intro":"孙宏亮\n硕士，浙江大学毕业，现为DaoCloud软件工程师，主要负责企业级容器云平台的研发工作。数年来一直从事云计算、PaaS领域的研究与实践，是国内较早一批接触Docker的先行者，同时也是Docker技术的推广者。","summary":"本书是一本引导读者深入了解Docker实现原理的技术普及读物，主要目标是通过对Docker架构和源代码的详细讲解和解剖，帮助读者对Docker的底层实现有一个全面的理解。\n作者通过大量的流程图和代码片段对Docker的架构、Docker的重要模块，特别是对Swarm、Machine和Compose这三个模块进行了详细介绍和深度剖析，无论是Docker的使用者还是开发者，通过阅读此书都可以对Docker有更深刻的理解，能够更好的使用或者开发Docker。","series":{"id":"33805","title":"容器技术系列"},"price":"59.00"},{"rating":{"max":10,"numRaters":47,"average":"7.2","min":0},"subtitle":"","author":["郝　林"],"pubdate":"2017-4","tags":[{"count":44,"name":"Go","title":"Go"},{"count":26,"name":"并发编程","title":"并发编程"},{"count":18,"name":"Golang","title":"Golang"},{"count":15,"name":"计算机","title":"计算机"},{"count":11,"name":"编程","title":"编程"},{"count":10,"name":"并行","title":"并行"},{"count":9,"name":"程序设计","title":"程序设计"},{"count":8,"name":"golang","title":"golang"}],"origin_title":"","image":"https://img9.doubanio.com\/view\/subject\/m\/public\/s29421945.jpg","binding":"平装","translator":[],"catalog":"第1章　初识Go语言　　1\n1.1　语言特性　　1\n1.2　安装和设置　　2\n1.3　工程结构　　3\n1.3.1　工作区　　3\n1.3.2　GOPATH　　4\n1.3.3　源码文件　　5\n1.3.4　代码包　　8\n1.4　标准命令简述　　11\n1.5　问候程序　　13\n1.6　小结　　14\n第2章　语法概览　　15\n2.1　基本构成要素　　15\n2.1.1　标识符　　15\n2.1.2　关键字　　16\n2.1.3　字面量　　17\n2.1.4　操作符　　17\n2.1.5　表达式　　19\n2.2　基本类型　　20\n2.3　高级类型　　22\n2.3.1　数组　　23\n2.3.2　切片　　23\n2.3.3　字典　　24\n2.3.4　函数和方法　　25\n2.3.5　接口　　28\n2.3.6　结构体　　29\n2.4　流程控制　　30\n2.4.1　代码块和作用域　　30\n2.4.2　if语句　　32\n2.4.3　switch语句　　32\n2.4.4　for语句　　34\n2.4.5　defer语句　　36\n2.4.6　panic和recover　　38\n2.5　聊天机器人　　40\n2.6　小结　　44\n第3章　并发编程综述　　45\n3.1　并发编程基础　　45\n3.1.1　串行程序与并发程序　　46\n3.1.2　并发程序与并行程序　　46\n3.1.3　并发程序与并发系统　　47\n3.1.4　并发程序的不确定性　　47\n3.1.5　并发程序内部的交互　　47\n3.2　多进程编程　　48\n3.2.1　进程　　48\n3.2.2　关于同步　　55\n3.2.3　管道　　60\n3.2.4　信号　　65\n3.2.5　socket　　74\n3.3　多线程编程　　97\n3.3.1　线程　　98\n3.3.2　线程的同步　　107\n3.4　多线程与多进程　　125\n3.5　多核时代的并发编程　　126\n3.6　小结　　130\n第4章　Go的并发机制　　131\n4.1　原理探究　　131\n4.1.1　线程实现模型　　132\n4.1.2　调度器　　142\n4.1.3　更多细节　　158\n4.2　goroutine　　160\n4.2.1　go语句与goroutine　　160\n4.2.2　主goroutine的运作　　166\n4.2.3　runtime包与goroutine　　166\n4.3　channel　　169\n4.3.1　channel的基本概念　　169\n4.3.2　单向channel　　180\n4.3.3　for语句与channel　　184\n4.3.4　select语句　　185\n4.3.5　非缓冲的channel　　190\n4.3.6　time包与channel　　192\n4.4　实战演练：载荷发生器　　198\n4.4.1　参数和结果　　199\n4.4.2　基本结构　　201\n4.4.3　初始化　　206\n4.4.4　启动和停止　　212\n4.4.5　调用器和功能测试　　221\n4.5　小结　　231\n第5章　同　　步　　232\n5.1　锁的使用　　232\n5.1.1　互斥锁　　232\n5.1.2　读写锁　　236\n5.1.3　锁的完整示例　　238\n5.2　条件变量　　244\n5.3　原子操作　　247\n5.3.1　增或减　　247\n5.3.2　比较并交换　　249\n5.3.3　载入　　250\n5.3.4　存储　　251\n5.3.5　交换　　251\n5.3.6　原子值　　252\n5.3.7　应用于实际　　256\n5.4　只会执行一次　　257\n5.5　WaitGroup　　258\n5.6　临时对象池　　262\n5.7　实战演练——Concurrent Map　　265\n5.8　小结　　280\n第6章　网络爬虫框架设计和实现　　281\n6.1　网络爬虫与框架　　281\n6.2　功能需求和分析　　283\n6.3　总体设计　　284\n6.4　详细设计　　286\n6.4.1　基本数据结构　　286\n6.4.2　接口的设计　　293\n6.5　工具的实现　　309\n6.5.1　缓冲器　　309\n6.5.2　缓冲池　　311\n6.5.3　多重读取器　　317\n6.6　组件的实现　　318\n6.6.1　内部基础接口　　319\n6.6.2　组件注册器　　321\n6.6.3　下载器　　323\n6.6.4　分析器　　325\n6.6.5　条目处理管道　　328\n6.7　调度器的实现　　329\n6.7.1　基本结构　　329\n6.7.2　初始化　　331\n6.7.3　启动　　333\n6.7.4　停止　　343\n6.7.5　其他方法　　344\n6.7.6　总结　　345\n6.8　一个简单的图片爬虫　　346\n6.8.1　概述　　346\n6.8.2　命令参数　　346\n6.8.3　初始化调度器　　348\n6.8.4　监控调度器　　354\n6.8.5　启动调度器　　364\n6.9　扩展与思路　　365\n6.10　本章小结　　368\n附录A　Go语言的学习资源　　369","pages":"380","images":{"small":"https://img9.doubanio.com\/view\/subject\/s\/public\/s29421945.jpg","large":"https://img9.doubanio.com\/view\/subject\/l\/public\/s29421945.jpg","medium":"https://img9.doubanio.com\/view\/subject\/m\/public\/s29421945.jpg"},"alt":"https:\/\/book.douban.com\/subject\/27016236\/","id":"27016236","publisher":"人民邮电出版社","isbn10":"7115452512","isbn13":"9787115452511","title":"Go并发编程实战（第2版）","url":"https:\/\/api.douban.com\/v2\/book\/27016236","alt_title":"","author_intro":"郝林\n从业12年有余的软件工匠，国内知名的Go语言技术布道者，Go语言北京用户组和GoHackers社群的发起人和组织者，多套免费在线Go语言教程的作者，深信Go语言在人工智能时代和机器人时代也能大放异彩的科技信徒。","summary":"本书首先介绍了Go语言的优秀特性、安装设置方法、工程结构、标准命令和工具、语法基础、数据类型以及流程控制方法，接着阐述了与多进程编程和多线程编程有关的知识，然后重点介绍了goroutine、channel以及Go提供的传统同步方法，最后通过一个完整实例——网络爬虫框架进一步阐述Go语言的哲学和理念，同时分享作者在多年编程生涯中的一些见解和感悟。\n与上一版相比，本书不仅基于Go 1.8对上一版进行了全面更新，而且更深入地描绘了Go运行时系统的内部机理，并且大幅改进了示例代码。\n本书适用于有一定计算机编程基础的从业者以及对Go语言编程感兴趣的爱好者，非常适合作为Go语言编程进阶教程。","series":{"id":"13000","title":"图灵原创"},"price":"79.00元"},{"rating":{"max":10,"numRaters":47,"average":"7.4","min":0},"subtitle":"Tools and Techniques for Developers","author":["Katherine Cox-Buday"],"pubdate":"2017-7-25","tags":[{"count":25,"name":"Golang","title":"Golang"},{"count":17,"name":"concurrency","title":"concurrency"},{"count":17,"name":"Go","title":"Go"},{"count":7,"name":"计算机","title":"计算机"},{"count":7,"name":"程序设计","title":"程序设计"},{"count":4,"name":"并发","title":"并发"},{"count":4,"name":"O'Reilly","title":"O'Reilly"},{"count":2,"name":"多线程","title":"多线程"}],"origin_title":"","image":"https://img3.doubanio.com\/view\/subject\/m\/public\/s29395253.jpg","binding":"Paperback","translator":[],"catalog":"","pages":"238","images":{"small":"https://img3.doubanio.com\/view\/subject\/s\/public\/s29395253.jpg","large":"https://img3.doubanio.com\/view\/subject\/l\/public\/s29395253.jpg","medium":"https://img3.doubanio.com\/view\/subject\/m\/public\/s29395253.jpg"},"alt":"https:\/\/book.douban.com\/subject\/26994591\/","id":"26994591","publisher":"O'Reilly Media","isbn10":"1491941197","isbn13":"9781491941195","title":"Concurrency in Go","url":"https:\/\/api.douban.com\/v2\/book\/26994591","alt_title":"","author_intro":"","summary":"","price":"USD 49.99"},{"rating":{"max":10,"numRaters":84,"average":"7.3","min":0},"subtitle":"","author":["Brian Ketelsen","Erik St. Martin","William Kennedy"],"pubdate":"2015-11-26","tags":[{"count":39,"name":"golang","title":"golang"},{"count":31,"name":"Go","title":"Go"},{"count":16,"name":"Programming","title":"Programming"},{"count":10,"name":"Golang","title":"Golang"},{"count":9,"name":"编程","title":"编程"},{"count":8,"name":"程序设计语言","title":"程序设计语言"},{"count":6,"name":"计算机","title":"计算机"},{"count":5,"name":"软件开发","title":"软件开发"}],"origin_title":"","image":"https://img3.doubanio.com\/view\/subject\/m\/public\/s28372870.jpg","binding":"平装","translator":[],"catalog":"1. Introducing Go - FREE\n2. Go Quick Start - AVAILABLE\n3. Packaging and Tooling\n4. Data Structures\n5. Understanding Go's Type System\n6. Putting Your Computer to Work With Concurrency\n7. Using the Go Standard Library\n8. Writing Network Applications in Go\n9. Debugging and Testing Go Programs\n10. Reflection\n11. Making Your Applications More Performant\n12. Interoperating with C Libraries\n13. Using Go for Devops","pages":"300","images":{"small":"https://img3.doubanio.com\/view\/subject\/s\/public\/s28372870.jpg","large":"https://img3.doubanio.com\/view\/subject\/l\/public\/s28372870.jpg","medium":"https://img3.doubanio.com\/view\/subject\/m\/public\/s28372870.jpg"},"alt":"https:\/\/book.douban.com\/subject\/25858023\/","id":"25858023","publisher":"Manning","isbn10":"1617291781","isbn13":"9781617291784","title":"Go in Action","url":"https:\/\/api.douban.com\/v2\/book\/25858023","alt_title":"","author_intro":"Brian Ketelsen and Erik St. Martin are the organizers of GopherCon an annual conference for Go developers and coauthors of the Go-based Skynet framework.Both Brian and Eric work with Go daily in a high-stakes production setting. William Kennedy is a seasoned software developer, author of the blog GoingGo.Net, and organizer for the Go-Miami and Miami MongoDB meetups.","summary":"Many of the normal concerns you face as an application developer are amplified by the challenges of web-scale concurrency, real-time performance expectations, multi-core support, and efficiently consuming services without constantly managing I\/O blocks. Although it's possible to solve most of these issues with existing languages and frameworks, Go is designed to handle them right out of the box, making for a more natural and productive coding experience. Developed at Google for its own internal use, Go now powers dozens of nimble startups, along with name brands like Canonical, Heroku, SoundCloud, and Mozilla, who rely on highly performant services for their infrastructure.\nGo in Action introduces the Go language, guiding you from inquisitive developer to Go guru. The book begins by introducing the unique features and concepts of Go. (We assume you're up to speed with another programming language already, so don't expect to spend a lot of time rehearsing stuff you already know.) Then, you'll get hands-on experience writing real-world applications including web sites and network servers, as well as techniques to manipulate and convert data at speeds that will make your friends jealous. In the final chapters, you'll go in-depth with the language and see the tricks and secrets that the Go masters are using to make their applications perform. For example, you'll learn to use Go's powerful reflection libraries and work with real-world examples of integration with C code.","price":"USD 39.99"},{"rating":{"max":10,"numRaters":61,"average":"5.5","min":0},"subtitle":"","author":["[新加坡]　樊虹剑"],"pubdate":"2012-6","tags":[{"count":50,"name":"go语言","title":"go语言"},{"count":37,"name":"Go","title":"Go"},{"count":19,"name":"编程","title":"编程"},{"count":14,"name":"GOOGLE","title":"GOOGLE"},{"count":10,"name":"计算机","title":"计算机"},{"count":10,"name":"程序设计","title":"程序设计"},{"count":8,"name":"golang","title":"golang"},{"count":6,"name":"programming","title":"programming"}],"origin_title":"","image":"https://img1.doubanio.com\/view\/subject\/m\/public\/s10214867.jpg","binding":"平装","translator":[],"catalog":"目  录\n第1章　 快速入门　 　 1\n1.1　 编辑和编译　 　 2\n1.2　 世界，你好！　 　 9\n1.3　 自我复制　 　 11\n1.4　 猜数游戏　 　 14\n1.5　 图灵机　 　 19\n1.6　 排版工具　 　 23\n1.7　 游乐场　 　 30\n1.8　 位钱　 　 36\n1.9　 小结　 　 43\n第2章　 静态类型　 　 44\n2.1　 数制　 　 45\n2.1.1　 整数　 　 45\n2.1.2　 二进制补码　 　 46\n2.1.3　 整数比较　 　 47\n2.1.4　 按位运算　 　 48\n2.1.5　 浮点数　 　 50\n2.1.6　 复数　 　 51\n2.1.7　 优先级　 　 52\n2.1.8　 表达式　 　 53\n2.2　 字符和字符串　 　 54\n2.2.1　 UTF-8编码　 　 54\n2.2.2　 Unicode字符　 　 55\n2.2.3　 转义字符　 　 56\n2.2.4　 字符串　 　 56\n2.2.5　 字符串转换　 　 57\n2.3　 数组　 　 60\n2.3.1　 声明　 　 60\n2.3.2　 下标　 　 61\n2.3.3　 赋值　 　 61\n2.4　 切片　 　 63\n2.5　 结构体　 　 67\n2.5.1　 项　 　 68\n2.5.2　 内置　 　 69\n2.6　 指针　 　 71\n2.7　 小结　 　 73\n第3章　 流程控制　 　 74\n3.1　 简单语句　 　 75\n3.2　 判断语句if　 　 77\n3.3　 多分支语句switch　 　 79\n3.4　 循环语句for 　 　 82\n3.5　 遍历　 　 84\n3.6　 标号和跳转　 　 85\n3.7　 作用域　 　 86\n3.8　 小结　 　 88\n第4章　 函数　 　 89\n4.1　 签名　 　 90\n4.2　 参数　 　 91\n4.3　 返回语句　 　 93\n4.4　 函数调用　 　 95\n4.5　 闭包　 　 97\n4.6　 压后　 　 99\n4.7　 派错和恢复　 　 100\n4.8　 方法　 　 102\n4.9　 包　 　 105\n4.10　 导入　 　 107\n4.11　 程序初始化　 　 108\n4.12　 小结　 　 110\n第5章　 动态类型　 　 111\n5.1　 映射　 　 112\n5.2　 界面类型　 　 116\n5.3　 界面值　 　 119\n5.4　 error界面　 　 122\n5.5　 有界无类　 　 124\n5.6　 排序　 　 126\n5.7　 类型断言　 　 130\n5.8　 类型分支　 　 133\n5.9　 反射　 　 135\n5.10　 小结　 　 141\n第6章　 面向对象　 　 142\n6.1　 背景　 　 143\n6.2　 术语　 　 146\n6.3　 与C++对比　 　 149\n6.3.1　 继承　 　 149\n6.3.2　 抽象类　 　 151\n6.3.3　 泛型　 　 153\n6.4　 小结　 　 154\n第7章　 并发编程　 　 155\n7.1　 背景　 　 156\n7.2　 同步通信　 　 158\n7.3　 去程　 　 162\n7.4　 程道　 　 164\n7.5　 遍历与关闭　 　 166\n7.6　 MapReduce　 　 168\n7.7　 select语句　 　 170\n7.8　 程道值　 　 173\n7.9　 互斥　 　 175\n7.10　 小结　 　 177\n第8章　 云计算　 　 178\n8.1　 背景　 　 179\n8.2　 GAE　 　 181\n8.3　 Hello 世界！　 　 183\n8.4　 画胡子　 　 185\n8.5　 留言录　 　 191\n8.6　 用户API　 　 195\n8.7　 数据库API　 　 196\n8.7.1　 术语　 　 197\n8.7.2　 Go数据库API　 　 197\n8.7.3　 实体键　 　 199\n8.7.4　 查询和索引　 　 200\n8.7.5　 实体组　 　 201\n8.7.6　 限制　 　 201\n8.8　 交易　 　 203\n8.9　 散段　 　 205\n8.10　 内存缓冲　 　 208\n8.11　 大件库　 　 210\n8.12　 URL抓取　 　 213\n8.13　 任务队列　 　 214\n8.13.1　 任务　 　 216\n8.13.2　 任务执行　 　 217\n8.13.3　 队列　 　 218\n8.14　 后端　 　 220\n8.15　 能力API 　 　 221\n8.16　 电子邮件API 　 　 222\n8.16.1　 发送　 　 222\n8.16.2　 接收　 　 223\n8.17　 信道API　 　 224\n8.18　 小结　 　 226\n第9章　 标准包　 　 227\n9.1　 格式包　 　 228\n9.1.1　 格式输出Printf　 　 229\n9.1.2　 动词表　 　 230\n9.1.3　 宽度和精度　 　 231\n9.1.4　 报错　 　 232\n9.1.5　 额外标记　 　 232\n9.1.6　 格式输入　 　 233\n9.1.7　 字符串格式　 　 234\n9.2　 字节包　 　 236\n9.3　 模板包　 　 239\n9.4　 正则表达式包　 　 245\n9.5　 时间包　 　 253\n9.6　 超链接包　 　 258\n9.6.1　 http服务器和客户机　 　 258\n9.6.2　 https加密通信　 　 260\n9.6.3　 Get　 　 263\n9.6.4　 Post　 　 265\n9.6.5　 Cookie　 　 268\n9.7　 编码包　 　 271\n9.7.1　 gob　 　 271\n9.7.2　 json　 　 275\n附录A　 Go的安装和使用　 　 277\n附录B　 EBNF　 　 284\n附录C　 中英术语对照表　 　 291","ebook_url":"https:\/\/read.douban.com\/ebook\/1198516\/","pages":"300","images":{"small":"https://img1.doubanio.com\/view\/subject\/s\/public\/s10214867.jpg","large":"https://img1.doubanio.com\/view\/subject\/l\/public\/s10214867.jpg","medium":"https://img1.doubanio.com\/view\/subject\/m\/public\/s10214867.jpg"},"alt":"https:\/\/book.douban.com\/subject\/10770080\/","id":"10770080","publisher":"人民邮电出版社","isbn10":"7115283079","isbn13":"9787115283078","title":"Go语言·云动力","url":"https:\/\/api.douban.com\/v2\/book\/10770080","alt_title":"","author_intro":"作者简介：\n樊虹剑\n15岁迷上Apple II，立志成为程序员。从Applesoft BASIC，到Microsoft C、C++、C#，再到Apple Objective-C，其间使用过大小十几种编程语言，始终不得要领。不明白起源于数学和电子学的计算机科学，为何不去追求诗歌般至简至纯的美学，而是纠结于繁复的形式和空洞的哲学。几欲放弃。直到偶然发现Plan 9，才获得返璞归真的乐趣，并一路欢喜走过Inferno，快乐走入Go语言的世界。","summary":"内容简介：\n云计算时代，对编程语言的要求也越来越高，而现有编程语言都无法满足大规模网络应用的需求，更无法同时满足程序员高效编译、高效执行和轻松编程的要求。2007年，Go语言应运而生。它面向Web和多核计算，强调速度，并引入了高效、低延迟的垃圾回收算法，同时精简了类型，摒弃了危险的指针运算。所有这些特点，都使得Go既容易学习，也便于使用，无论是要解决手边的小问题，还是要集体完成大项目，Go都是合适的通用语言。\n本书作者是将Go语言在国内传播的第一人，对Go的编译器、运行器和各种包有深入研究，目前已正式成为Go语言的Contributor。本书是他这几年研究心血之结晶，旨在为读者了解Go语言、掌握Go语言提供专业的入门指导。\n书中内容共分为9章，全面介绍了Go语言的基础知识，以及Go语言在云计算中的应用。作者还提供了70多个完整的示例程序，方便读者边学边练，加深记忆。通过轻松简洁的介绍，读者定能顺利进入Go语言的世界。","ebook_price":"18.00","series":{"id":"13000","title":"图灵原创"},"price":"39.00元"},{"rating":{"max":10,"numRaters":65,"average":"7.6","min":0},"subtitle":"","author":["Caleb Doxsey"],"pubdate":"2012-9-3","tags":[{"count":31,"name":"Go","title":"Go"},{"count":16,"name":"计算机","title":"计算机"},{"count":15,"name":"programming","title":"programming"},{"count":14,"name":"编程语言","title":"编程语言"},{"count":9,"name":"golang","title":"golang"},{"count":4,"name":"英文版","title":"英文版"},{"count":4,"name":"2012","title":"2012"},{"count":3,"name":"编程","title":"编程"}],"origin_title":"","image":"https://img1.doubanio.com\/view\/subject\/m\/public\/s11368508.jpg","binding":"Paperback","translator":[],"catalog":"","pages":"166","images":{"small":"https://img1.doubanio.com\/view\/subject\/s\/public\/s11368508.jpg","large":"https://img1.doubanio.com\/view\/subject\/l\/public\/s11368508.jpg","medium":"https://img1.doubanio.com\/view\/subject\/m\/public\/s11368508.jpg"},"alt":"https:\/\/book.douban.com\/subject\/19897704\/","id":"19897704","publisher":"CreateSpace Independent Publishing Platform","isbn10":"1478355824","isbn13":"9781478355823","title":"An Introduction to Programming in Go","url":"https:\/\/api.douban.com\/v2\/book\/19897704","alt_title":"","author_intro":"","summary":"","price":"USD 10.00"},{"rating":{"max":10,"numRaters":24,"average":"7.2","min":0},"subtitle":"","author":["David Chisnall"],"pubdate":"2012-5-10","tags":[{"count":13,"name":"GO","title":"GO"},{"count":8,"name":"golang","title":"golang"},{"count":6,"name":"程序设计","title":"程序设计"},{"count":5,"name":"计算机","title":"计算机"},{"count":4,"name":"Go","title":"Go"},{"count":3,"name":"go语言","title":"go语言"},{"count":3,"name":"Phrasebook","title":"Phrasebook"},{"count":2,"name":"计算机科学","title":"计算机科学"}],"origin_title":"","image":"https://img3.doubanio.com\/view\/subject\/m\/public\/s11123591.jpg","binding":"Paperback","translator":[],"catalog":"","pages":"288","images":{"small":"https://img3.doubanio.com\/view\/subject\/s\/public\/s11123591.jpg","large":"https://img3.doubanio.com\/view\/subject\/l\/public\/s11123591.jpg","medium":"https://img3.doubanio.com\/view\/subject\/m\/public\/s11123591.jpg"},"alt":"https:\/\/book.douban.com\/subject\/7952516\/","id":"7952516","publisher":"Addison-Wesley Professional","isbn10":"0321817141","isbn13":"9780321817143","title":"The Go Programming Language Phrasebook","url":"https:\/\/api.douban.com\/v2\/book\/7952516","alt_title":"","author_intro":"","summary":"The Go Programming Language Phrasebook Essential Go code and idioms for all facets of the development process This guide gives you the code \"phrases\" you need to quickly and effectively complete a wide variety of projects with Go, today,s most exciting new programming language. Tested, easy-to-adapt code examples illuminate every step of Go development, helping you write highly scalable, concurrent software. You,ll master Go-specific idioms for working with strings, collections, arrays, error handling, goroutines, slices, maps, channels, numbers, dates, times, files, networking, web apps, the runtime, and more. Concise and Accessible  Easy to carry and easy to use: Ditch all those bulky books for one portable pocket guide Flexible and Functional  Packed with more than 100 customizable code snippets: Quickly create solid Go code to solve just about any problem Register your book at informit.com\/register for convenient access to downloads, updates, and corrections as they become available.","price":"USD 29.99"},{"rating":{"max":10,"numRaters":19,"average":"6.5","min":0},"subtitle":"","author":["Sau Sheong Chang"],"pubdate":"2015","tags":[{"count":12,"name":"go","title":"go"},{"count":10,"name":"web","title":"web"},{"count":8,"name":"golang","title":"golang"},{"count":7,"name":"Go","title":"Go"},{"count":2,"name":"Programming","title":"Programming"},{"count":1,"name":"计算机","title":"计算机"},{"count":1,"name":"编程","title":"编程"},{"count":1,"name":"Web","title":"Web"}],"origin_title":"","image":"https://img9.doubanio.com\/view\/subject\/m\/public\/s28046045.jpg","binding":"平装","translator":[],"catalog":"Part 1: INTRODUCTION\n1 Go and Web Applications\n2 Go ChitChat\nPart 2: BASIC GO\n3 Handling Requests\n4 Processing Requests\n5 Go Microservices\n6 Storing Data\nPart 3: BEING REAL\n7 Testing Your Application\n8 Leveraging Go Concurrency\n9 Deploying Go\n10 Frameworks, Frameworks Everywhere\nAPPENDIXES\nA Touring Go","pages":"325","images":{"small":"https://img9.doubanio.com\/view\/subject\/s\/public\/s28046045.jpg","large":"https://img9.doubanio.com\/view\/subject\/l\/public\/s28046045.jpg","medium":"https://img9.doubanio.com\/view\/subject\/m\/public\/s28046045.jpg"},"alt":"https:\/\/book.douban.com\/subject\/26340005\/","id":"26340005","publisher":"Manning","isbn10":"1617292567","isbn13":"9781617292569","title":"Go Web Programming","url":"https:\/\/api.douban.com\/v2\/book\/26340005","alt_title":"","author_intro":"Sau Sheong Chang is a Director of Regional Solutions Engineering at PayPal. He is active in the Ruby and Go developer communities, and has written books, contributed to open source projects and spoken at meetups and conferences.","summary":"Google built the Go language from the ground up to simplify the challenges of modern application development, such as concurrency, memory management, and scalable performance. For web developers, Go is ideal for writing server-side components that route and process data and manage the event-driven nature of modern web applications. Go's instantly-familiar syntax and structure make it easy to build application components from scratch, and a full-featured standard library along with a growing ecosystem of libraries and frameworks provide an abundance of pre-built functionality so you can be super-productive quickly.\nGo Web Programming teaches you how to build web applications in Go using modern design principles. You'll work through numerous examples that introduce core concepts like processing requests and sending responses, template engines, and data persistence. You'll also dive into more advanced topics, such as concurrency, web application testing and deployment both to barebones servers and PaaS providers. Readers just getting started with Go will appreciate the quick Go language tutorial appendix.","price":"USD 44.99"},{"rating":{"max":10,"numRaters":2,"average":"0.0","min":0},"subtitle":"Use Go to Build Scalable Backends","author":["Matthew Campbell"],"pubdate":"2016-3-1","tags":[{"count":15,"name":"Go","title":"Go"},{"count":8,"name":"golang","title":"golang"},{"count":7,"name":"分布式","title":"分布式"},{"count":6,"name":"系统分布并行并发","title":"系统分布并行并发"},{"count":5,"name":"微服务","title":"微服务"},{"count":3,"name":"microservices","title":"microservices"},{"count":1,"name":"游戏","title":"游戏"},{"count":1,"name":"3年计划","title":"3年计划"}],"origin_title":"","image":"https://img9.doubanio.com\/view\/subject\/m\/public\/s28325844.jpg","binding":"Paperback","translator":[],"catalog":"","pages":"400","images":{"small":"https://img9.doubanio.com\/view\/subject\/s\/public\/s28325844.jpg","large":"https://img9.doubanio.com\/view\/subject\/l\/public\/s28325844.jpg","medium":"https://img9.doubanio.com\/view\/subject\/m\/public\/s28325844.jpg"},"alt":"https:\/\/book.douban.com\/subject\/26650145\/","id":"26650145","publisher":"O'Reilly Media","isbn10":"149194255X","isbn13":"9781491942550","title":"Microservices in Go","url":"https:\/\/api.douban.com\/v2\/book\/26650145","alt_title":"","author_intro":"Matthew Campbell is the back-end server lead for EikonMessenger, the largest financial instant messenger at Thomson Reuters. With over 300k users, it presents a large amount of scaling in a grueling environment of stock traders. He recently presented at GopherCon India, and blogs at kanwisher.com. He has upcoming talks at Gotham Go and Velocity. Matthew was a founder of Errplane and Langfight. He is working on a book for Microservices in GO.","summary":"Microservices in Go teaches you how to handle advanced server side development in Go; it uses microservices to accomplish this, but is relevant to all server-side developers. The author gives you tips on how to deploy Go apps to popular cloud platforms like Amazon, Google, and Digital ocean. The book has a lot of meaty chapters, including:\nQueuing architectures such as Kafka, and how to practically use them\nInfluxdb, and how to monitor production systems with metrics\nHow to use Docker to make deployments simpler\nUsing ETCD\/Consul to do service discovery and automated failover of mysql\/redis\nBuilding mobile clients on IOS and Android","price":"USD 49.99"},{"rating":{"max":10,"numRaters":12,"average":"6.8","min":0},"subtitle":"构建基于Go和React的云原生Web应用与微服务","author":["Kevin Hoffman;Dan Nemeth"],"pubdate":"2017-7-1","tags":[{"count":18,"name":"Go","title":"Go"},{"count":10,"name":"云原生","title":"云原生"},{"count":6,"name":"计算机","title":"计算机"},{"count":6,"name":"云计算","title":"云计算"},{"count":6,"name":"golang","title":"golang"},{"count":1,"name":"前端技术","title":"前端技术"},{"count":1,"name":"之后下单的书","title":"之后下单的书"}],"origin_title":"","image":"https://img3.doubanio.com\/view\/subject\/m\/public\/s29873850.jpg","binding":"平装","translator":["宋净超","吴迎松","徐蓓","马超"],"catalog":"1  云之道\t1\n云之道的优点\t2\n-- 遵循简单\t2\n-- 测试优先，测试一切\t3\n-- 尽早发布，频繁发布\t5\n-- 自动化一切\t6\n-- 建立服务生态系统\t7\n为什么使用Go\t8\n-- 简单\t8\n-- 开源\t8\n-- 易于自动化和IDE自由化\t8\n本章小结\t9\n2  开始\t11\n正确的工具\t11\n配置Git\t12\n-- 安装Homebrew\t12\n-- 安装Git客户端\t13\n-- 安装Mercurial和Bazaar\t13\n-- 创建GitHub账户\t14\n创建Go环境\t14\n-- 配置Go工作区\t14\n检查环境\t15\n本章小结\t16\n3  Go入门\t17\n建立Hello cloud\t18\n使用基本函数\t19\n使用结构体\t22\n介绍Go接口\t25\n向结构体添加方法\t25\n-- Go中的接口动态类型检查\t26\n使用第三方包\t28\n创建自有包\t30\n-- 导出函数和数据\t31\n-- 创建包\t31\n本章小结\t34\n4  持续交付\t35\nDocker介绍\t36\n-- 为什么要使用Docker\t36\n-- 安装Docker\t36\n-- 运行Docker镜像\t38\n与Wercker的持续集成\t39\n-- 持续集成的最佳实践\t39\n-- 为什么使用Wercker\t40\n-- 创建Wercker应用程序\t41\n-- 安装Wercker CLI\t42\n-- 创建Wercker配置文件\t43\n-- 使用Wercker进行构建\t48\n-- 部署到Docker Hub\t50\n读者练习：创建完整的开发管道\t51\n-- 高级挑战：集成第三方库\t53\n本章小结\t53\n5  在Go中构建微服务\t55\n设计API First的服务\t55\n-- 设计match API\t56\n-- 创建API Blueprint\t56\n-- 通过Apiary测试和发布文档\t58\n架设微服务\t59\n构建Test First的服务\t62\n-- 创建第一个失败测试\t63\n-- 测试Location Header\t66\n-- 壮丽的蒙太奇：迭代测试\t67\n在云端部署和运行\t70\n-- 创建PWS账户\t70\n-- 配置PCF开发环境\t70\n-- 提交到Cloud Foundry\t71\n本章小结\t72\n6  运用后端服务\t75\n设计服务系统\t75\n测试优先构建依赖服务\t77\n-- 构建fulfillment服务\t78\n-- 构建catalog服务\t81\n在服务之间共享结构化数据\t87\n-- 客户端引用服务端包\t88\n-- 客户端复制服务端结构\t88\n-- 客户端与服务端引用共享包\t89\n使用服务捆绑来外部化地址与元数据\t90\n服务发现\t93\n-- 动态服务发现\t94\n--  Netflix的服务发现系统Eureka\t94\n读者练习\t97\n-- 进阶操作\t97\n本章小结\t98\n7  构建数据服务\t99\n构建MongoDB存储库\t100\n-- 为什么选择MongoDB\t100\n-- 更新存储库模型\t100\n-- 通过Go来操作MongoDB\t101\n-- 以Test-First方式编写MongoDB存储库\t102\n集成测试一个Mongo-Backed服务\t107\n-- 集成临时MongoDB数据库\t108\n-- 编写一个集成测试\t110\n在云中运行\t115\n-- 后端服务的配置\t115\n本章小结\t117\n8  事件溯源和CQRS\t119\n现实源自事件\t120\n-- 幂等\t121\n-- 隔离\t121\n-- 可测试\t122\n-- 可再现，可恢复\t123\n-- 大数据\t123\n拥抱最终一致性\t123\nCQRS简介\t124\n事件溯源案例\t126\n-- 天气监测\t126\n-- 互联网汽车\t127\n-- 社交媒体消息处理\t127\n代码示例：管理无人机舰队\t128\n构建命令处理程序服务\t129\n-- RabbitMQ介绍\t129\n-- 构建命令处理器服务\t133\n构建事件处理器\t135\n-- 对事件处理器进行集成测试\t140\n构建查询处理程序服务\t140\n本章小结\t141\n9  使用Go构建Web应用程序\t143\n处理静态文件和asset\t143\n支持JavaScript客户端\t145\n使用服务端模板\t148\n处理表单\t150\n使用cookie和会话状态\t151\n-- 写入cookie\t152\n-- 读取cookie\t153\n使用Wercker构建和部署\t153\n本章小结\t155\n10  云安全\t157\n保护Web应用程序\t157\n-- 应用程序安全性选项\t158\n-- 设置Auth0账户\t159\n-- 构建一个OAuth安全的Web应用程序\t160\n-- 运行安全的Web应用程序\t164\n保护微服务\t166\n-- 客户端凭据模式概述\t166\n-- 使用客户端凭据保护微服务\t168\n-- 关于SSL的注意事项\t169\n隐私和数据安全\t170\n-- 黑客不能得到你没有的\t170\n读者练习\t172\n本章小结\t173\n11  使用WebSockets\t175\nWebSockets解析\t175\n--  WebSockets如何工作\t176\n--  WebSockets与服务器发送事件对比\t177\n-- 设计WebSockets服务器\u2028\t177\nWebSockets的云原生适应性\t178\n使用消息服务创建WebSockets应用\t180\n-- 关于JavaScript框架\t183\n-- 运行WebSockets示例\t183\n本章小结\t184\n12  使用React构建Web视图\t185\nJavaScript的形势\u2028\t186\n为什么选择React\t186\n-- 虚拟DOM\t187\n-- 组件组合\t187\n-- 响应式数据流\t188\n-- 集中焦点\t188\n-- 使用的便利性\t189\nReact应用程序剖析\t189\n--  package.json文件\t189\n--  Webpack.config.js文件\t191\n-- .babelrc文件\t191\n-- 理解JSX和Webpack\t191\n-- React组件\t192\n构建简单的React应用程序\t192\n-- 不赞成的做法\t199\n测试React应用程序\t200\n进一步阅读\t200\n-- React网站\t200\n-- React书籍\t201\n-- 其他资料\u2028\t201\n本章小结\u2028\t201\n13  使用Flux构建可扩展的UI\t203\nFlux介绍\t203\n-- dispatcher\t204\n-- store\t204\n-- view\t205\n-- action\t205\n-- source\t205\n-- Flux的复杂性\t205\n创建Flux应用程序\t206\n本章小结\t215\n14  创建完整应用World of FluxCraft\t217\nWorld of FluxCraft介绍\t218\n架构概览\t219\n-- 独立扩展、版本控制和部署\t221\n-- 数据库不是集成层\t221\n-- 单向不可变数据流\t221\nFlux GUI\t222\n-- Go UI宿主服务\t223\n-- 玩家移动时序图\t224\n命令处理\t225\n事件处理\t226\n维持现实服务的状态\t227\n地图管理\t227\n自动验收测试\t228\n本章小结\t230\n15  结论\t231\n我们学到了什么\t231\n-- Go不是小众语言\t231\n-- 微服务应该有多“微”\t232\n-- 持续交付和部署\t232\n-- 测试一切\t232\n-- 尽早发布，频繁发布\t232\n-- 事件溯源、CQRS和更多首字母缩略词\t233\n下一步\t233\n附录A  云应用的故障排查\t235","pages":"262","images":{"small":"https://img3.doubanio.com\/view\/subject\/s\/public\/s29873850.jpg","large":"https://img3.doubanio.com\/view\/subject\/l\/public\/s29873850.jpg","medium":"https://img3.doubanio.com\/view\/subject\/m\/public\/s29873850.jpg"},"alt":"https:\/\/book.douban.com\/subject\/27090948\/","id":"27090948","publisher":"电子工业出版社","isbn10":"7121321092","isbn13":"9787121321092","title":"Cloud Native Go","url":"https:\/\/api.douban.com\/v2\/book\/27090948","alt_title":"","author_intro":"作者简介\nKevin Hoffman通过现代化和以多种不同语言构建云原生服务的方式帮助企业将其应用程序引入云端。他10岁时开始编程，从那时起便已经沉迷于构建软件，并花了很多时间学习语言、框架和模式。他已经构建了从遥控摄影无人机、仿生性安全系统、超低延迟金融应用程序到移动应用程序等一系列软件，并且在构建需要与Pivotal Cloud Foundry配合使用的自定义组件时爱上了Go语言。\nDan Nemeth目前在Pivotal担任咨询解决方案架构师，负责支持Pivotal Cloud Foundry。他从1995年开始从事专业编码，使用ANSI C编写了用于本地ISP的CGI脚本。他职业生涯的大部分时间都是作为独立顾问为金融、制药等各个行业提供解决方案，其间不断使用当时流行的各种语言和框架。Dan最近接受了Go作为自己的\"归宿\"，其间不断热情地将它用于所有的项目。\n译者简介\n宋净超，TalkingData技术运营团队工程师。拥有多年的Hadoop大数据平台运维管理经验，熟悉Hadoop技术、Docker生态系统以及PaaS平台，主导了 TalkingData的Yarn on Docker项目改造和微服务落地，关注开源软件及Docker、Kubernetes的前沿发展，关注Kubernetes和TensorFlow的实践。多次在全球架构师峰会、QCon 、CNUTCon、云栖大会等技术会议上作为讲师进行技术分享，博客地址：http:\/\/rootsongjc.github.io\/。","summary":"《Cloud Native Go：构建基于Go和React的云原生Web应用与微服务》旨在向开发人员展示如何构建适用于大流量、高并发场景下的云原生Web应用。《Cloud Native Go：构建基于Go和React的云原生Web应用与微服务》从搭建开发测试环境开始，逐步介绍使用Go语言构建微服务的方法，通过引入CI\/CD流程和Wercker、Docker等工具将应用推送到云中。结合微服务构建中的后端服务、数据服务、事件溯源和CQRS模式、基于React和Flux的UI设计等，本书最后构建了一个基于Web的RPG游戏World of FluxCraft，可以作为使用Go构建云原生Web应用的参考，适合于云计算与Go语言编程从业者们阅读。","price":"CNY 69.00"},{"rating":{"max":10,"numRaters":8,"average":"0.0","min":0},"subtitle":"","author":["Nathan Kozyra"],"pubdate":"2014-7-25","tags":[{"count":12,"name":"Go","title":"Go"},{"count":5,"name":"golang","title":"golang"},{"count":2,"name":"计算机","title":"计算机"},{"count":2,"name":"并发","title":"并发"},{"count":2,"name":"programming","title":"programming"},{"count":1,"name":"软件工程","title":"软件工程"},{"count":1,"name":"计算机科学","title":"计算机科学"},{"count":1,"name":"程序员","title":"程序员"}],"origin_title":"","image":"https://img9.doubanio.com\/view\/subject\/m\/public\/s27406475.jpg","binding":"Paperback","translator":[],"catalog":"Table of Contents\nMastering Concurrency in Go\nCredits\nAbout the Author\nAbout the Reviewers\nwww.PacktPub.com\nSupport files, eBooks, discount offers, and more\nWhy subscribe?\nFree access for Packt account holders\nPreface\nWhat this book covers\nWhat you need for this book\nWho this book is for\nConventions\nReader feedback\nCustomer support\nDownloading the example code\nErrata\nPiracy\nQuestions\n1. An Introduction to Concurrency in Go\nIntroducing goroutines\nA patient goroutine\nImplementing the defer control mechanism\nUsing Go's scheduler\nUsing system variables\nUnderstanding goroutines versus coroutines\nImplementing channels\nChannel-based sorting at the letter capitalization factory\nCleaning up our goroutines\nBuffered or unbuffered channels\nUsing the select statement\nClosures and goroutines\nBuilding a web spider using goroutines and channels\nSummary\n2. Understanding the Concurrency Model\nUnderstanding the working of goroutines\nSynchronous versus asynchronous goroutines\nDesigning the web server plan\nVisualizing concurrency\nRSS in action\nAn RSS reader with self diagnostics\nImposing a timeout\nA little bit about CSP\nThe dining philosophers problem\nGo and the actor model\nObject orientation\nDemonstrating simple polymorphism in Go\nUsing concurrency\nManaging threads\nUsing sync and mutexes to lock data\nSummary\n3. Developing a Concurrent Strategy\nApplying efficiency in complex concurrency\nIdentifying race conditions with race detection\nUsing mutual exclusions\nExploring timeouts\nImportance of consistency\nSynchronizing our concurrent operations\nThe project – multiuser appointment calendar\nVisualizing a concurrent pattern\nDeveloping our server requirements\nWeb server\nThe Gorilla toolkit\nUsing templates\nTime\nEndpoints\nCustom structs\nA multiuser Appointments Calendar\nA note on style\nA note on immutability\nSummary\n4. Data Integrity in an Application\nGetting deeper with mutexes and sync\nThe cost of goroutines\nWorking with files\nGetting low – implementing C\nTouching memory in cgo\nThe structure of cgo\nThe other way around\nGetting even lower – assembly in Go\nDistributed Go\nSome common consistency models\nDistributed shared memory\nFirst-in-first-out – PRAM\nLooking at the master-slave model\nThe producer-consumer problem\nLooking at the leader-follower model\nAtomic consistency \/ mutual exclusion\nRelease consistency\nUsing memcached\nCircuit\nSummary\n5. Locks, Blocks, and Better Channels\nUnderstanding blocking methods in Go\nBlocking method 1 – a listening, waiting channel\nSending more data types via channels\nCreating a function channel\nUsing an interface channel\nUsing structs, interfaces, and more complex channels\nThe net package – a chat server with interfaced channels\nHandling direct messages\nExamining our client\nBlocking method 2 – the select statement in a loop\nCleaning up goroutines\nBlocking method 3 – network connections and reads\nCreating channels of channels\nPprof – yet another awesome tool\nHandling deadlocks and errors\nSummary\n6. C10K – A Non-blocking Web Server in Go\nAttacking the C10K problem\nFailing of servers at 10,000 concurrent connections\nUsing concurrency to attack C10K\nTaking another approach\nBuilding our C10K web server\nBenchmarking against a blocking web server\nHandling requests\nRouting requests\nServing pages\nParsing our template\nExternal dependencies\nConnecting to MySQL\nMultithreading and leveraging multiple cores\nExploring our web server\nTiming out and moving on\nSummary\n7. Performance and Scalability\nHigh performance in Go\nGetting deeper into pprof\nParallelism's and concurrency's impact on I\/O pprof\nUsing the App Engine\nDistributed Go\nTypes of topologies\nType 1 – star\nType 2 – mesh\nThe Publish and Subscribe model\nSerialized data\nRemote code execution\nOther topologies\nMessage Passing Interface\nSome helpful libraries\nNitro profiler\nHeka\nGoFlow\nMemory preservation\nGarbage collection in Go\nSummary\n8. Concurrent Application Architecture\nDesigning our concurrent application\nIdentifying our requirements\nUsing NoSQL as a data store in Go\nMongoDB\nRedis\nTiedot\nCouchDB\nCassandra\nCouchbase\nSetting up our data store\nMonitoring filesystem changes\nManaging logfiles\nHandling configuration files\nDetecting file changes\nSending changes to clients\nChecking records against Couchbase\nBacking up our files\nDesigning our web interface\nReverting a file's history – command line\nUsing Go in daemons and as a service\nChecking the health of our server\nSummary\n9. Logging and Testing Concurrency in Go\nHandling errors and logging\nBreaking out goroutine logs\nUsing the LiteIDE for richer and easier debugging\nSending errors to screen\nLogging errors to file\nLogging errors to memory\nUsing the log4go package for robust logging\nPanicking\nRecovering\nLogging our panics\nCatching stack traces with concurrent code\nUsing the runtime package for granular stack traces\nSummary\n10. Advanced Concurrency and Best Practices\nGoing beyond the basics with channels\nBuilding workers\nImplementing nil channel blocks\nUsing nil channels\nImplementing more granular control over goroutines with tomb\nTiming out with channels\nBuilding a load balancer with concurrent patterns\nChoosing unidirectional and bidirectional channels\nUsing receive-only or send-only channels\nUsing an indeterminate channel type\nUsing Go with unit testing\nGoCheck\nGinkgo and Gomega\nUsing Google App Engine\nUtilizing best practices\nStructuring your code\nDocumenting your code\nMaking your code available via go get\nKeeping concurrency out of your packages\nSummary\nIndex","pages":"301","images":{"small":"https://img9.doubanio.com\/view\/subject\/s\/public\/s27406475.jpg","large":"https://img9.doubanio.com\/view\/subject\/l\/public\/s27406475.jpg","medium":"https://img9.doubanio.com\/view\/subject\/m\/public\/s27406475.jpg"},"alt":"https:\/\/book.douban.com\/subject\/25959823\/","id":"25959823","publisher":"Packt Publishing - ebooks Account","isbn10":"1783983485","isbn13":"9781783983483","title":"Mastering Concurrency in Go","url":"https:\/\/api.douban.com\/v2\/book\/25959823","alt_title":"","author_intro":"","summary":"","price":"USD 50.99"},{"rating":{"max":10,"numRaters":25,"average":"6.5","min":0},"subtitle":"Build Reliable, Scalable Programs","author":["Caleb Doxsey"],"pubdate":"2016-2-1","tags":[{"count":8,"name":"Go","title":"Go"},{"count":7,"name":"golang","title":"golang"},{"count":6,"name":"计算机","title":"计算机"},{"count":1,"name":"英文版","title":"英文版"},{"count":1,"name":"英文","title":"英文"},{"count":1,"name":"程序员","title":"程序员"},{"count":1,"name":"电子书","title":"电子书"},{"count":1,"name":"Golang","title":"Golang"}],"origin_title":"","image":"https://img1.doubanio.com\/view\/subject\/m\/public\/s28380718.jpg","binding":"Paperback","translator":[],"catalog":"","pages":"124","images":{"small":"https://img1.doubanio.com\/view\/subject\/s\/public\/s28380718.jpg","large":"https://img1.doubanio.com\/view\/subject\/l\/public\/s28380718.jpg","medium":"https://img1.doubanio.com\/view\/subject\/m\/public\/s28380718.jpg"},"alt":"https:\/\/book.douban.com\/subject\/26705793\/","id":"26705793","publisher":"O'Reilly Media","isbn10":"1491941952","isbn13":"9781491941959","title":"Introducing Go","url":"https:\/\/api.douban.com\/v2\/book\/26705793","alt_title":"","author_intro":"","summary":"","price":"USD 24.99"},{"rating":{"max":10,"numRaters":17,"average":"7.5","min":0},"subtitle":"","author":["Matt Butcher","Matt Farina"],"pubdate":"2015-12-20","tags":[{"count":12,"name":"Go","title":"Go"},{"count":9,"name":"golang","title":"golang"},{"count":4,"name":"编程","title":"编程"},{"count":3,"name":"计算机","title":"计算机"},{"count":3,"name":"Go语言","title":"Go语言"},{"count":2,"name":"Programming","title":"Programming"},{"count":1,"name":"练习","title":"练习"},{"count":1,"name":"程序员","title":"程序员"}],"origin_title":"","image":"https://img3.doubanio.com\/view\/subject\/m\/public\/s29095292.jpg","binding":"平装","translator":[],"catalog":"Table of Contents\nPART 1: BACKGROUND AND FUNDAMENTALS\n1 Getting in to Go - FREE\nPART 2: WELL ROUNDED APPLICATIONS\n2 A Solid Foundation - AVAILABLE\n3 Working with packages - AVAILABLE\n4 Error handling, Testing, and Debugging\nPART 3: WEB INTERFACES FOR YOUR APPLICATIONS\n5 Building websites, from html to assets\n6 Working with Web Services (REST APIs)\nPART 4: TAKING YOUR APPLICATIONS TO THE CLOUD\n7 Using cloud infrastructure\n8 Communicating between your cloud services\n9 Bringing it Together: A REST Service Client and Server","pages":"275","images":{"small":"https://img3.doubanio.com\/view\/subject\/s\/public\/s29095292.jpg","large":"https://img3.doubanio.com\/view\/subject\/l\/public\/s29095292.jpg","medium":"https://img3.doubanio.com\/view\/subject\/m\/public\/s29095292.jpg"},"alt":"https:\/\/book.douban.com\/subject\/26345890\/","id":"26345890","publisher":"Manning","isbn10":"1633430073","isbn13":"9781633430075","title":"Go in Practice","url":"https:\/\/api.douban.com\/v2\/book\/26345890","alt_title":"","author_intro":"Matt Farina is a Master Technologist developing HP Helion, a cloud distribution and public cloud based on OpenStack and Cloud Foundry. Matt Butcher is a Senior Software Engineer at Google's Nest Labs. Both Matt and Matt are familiar authors and speakers on various technical subjects.","summary":"Go may be the perfect systems language. Built with simplicity, concurrency, and modern applications in mind, Go provides the core tool set for rapidly building web, cloud, and systems applications. With superstar projects like Docker giving the language a high-visibility boost; it's no wonder that companies are clamoring for experienced Go engineers. If you know a language like Java or C#, it's easy to get started with Go; the trick is finding the practical dirt-under-the-fingernails techniques that you need to build production-ready code\nGo in Practice guides you through dozens of real-world techniques in key areas like package management, microservice communication, and more. Following a cookbook-style Problem\/Solution\/Discussion format, this practical handbook builds on the foundational concepts of the Go language and introduces specific strategies you can use in your day-to-day applications. You'll learn techniques for building web services, using Go in the cloud, testing and debugging, routing, network applications, and much more.","price":"USD 44.99"},{"rating":{"max":10,"numRaters":4,"average":"0.0","min":0},"subtitle":"","author":["Mat Ryer"],"pubdate":"2015-1-16","tags":[{"count":4,"name":"golang","title":"golang"},{"count":3,"name":"go","title":"go"}],"origin_title":"","image":"https://img1.doubanio.com\/view\/subject\/m\/public\/s28014398.jpg","binding":"Paperback","translator":[],"catalog":"Table of Contents\n1.Chat Application With Web Sockets\n2.Adding Authentication\n3.Three Ways to Implement Profile Pictures\n4.Command-Line Tools to Find Domain Names\n5.Building Distributed Systems and Working with Flexible Data\n6.Exposing Data and Functionality Through a Restful Data Web Service Api\n7.Random Recommendations Web Service\n8.Filesystem Backup","pages":"251","images":{"small":"https://img1.doubanio.com\/view\/subject\/s\/public\/s28014398.jpg","large":"https://img1.doubanio.com\/view\/subject\/l\/public\/s28014398.jpg","medium":"https://img1.doubanio.com\/view\/subject\/m\/public\/s28014398.jpg"},"alt":"https:\/\/book.douban.com\/subject\/26331858\/","id":"26331858","publisher":"Packt Publishing - ebooks Account","isbn10":"1783988029","isbn13":"9781783988020","title":"Go Programming Blueprints","url":"https:\/\/api.douban.com\/v2\/book\/26331858","alt_title":"","author_intro":"About the Author\nMat Ryer has a family legend (or conspiracy) that tells of him programming computers from the age of 6—he and his father would build games and programs, first BASIC on a ZX Spectrum then later AmigaBASIC and AMOS on their Commodore Amiga. Many hours were spent manually copying out code from the Amiga Format magazine, before spending more still tweaking variables or moving GOTO statements around to see what might happen.The same spirit of exploration and obsession with programming led Mat to start work for a local agency in Mansfield, England, when he was 18, where he started to build websites and services. After contracting around London for a few years, coding everything from C# and Objective-C to Ruby and JavaScript, Mat noticed a new systems language called Go that Google was pioneering. Because it addressed very pertinent and relevant modern technical challenges, Mat started using it to solve problems while the language was still in beta and he has used it ever since.","summary":"Book Description\nDive headfirst into solving actual enterprise problems and start cutting code from the word go. You will build complete applications around a variety of subjects using a range of different technologies and techniques, all of which are directly applicable to today's tech start-up world.\nScale, performance, and high availability lie at the heart of the projects, and the lessons learned throughout this book will arm you with everything you need to build world-class solutions. Well-designed applications and sensible architectures can scale horizontally to cope with the demands of up to millions of users, while avoiding the prohibitive up-front investment that can bring a project to its knees.\nWhat you will Learn\nBuild quirky and fun projects from scratch while exploring widely applicable skills, patterns, practices, and techniques, as well as a range of different technologies\nCreate websites and data services capable of massive scale using Go's net\/http package, exploring RESTful patterns as well as low-latency WebSocket APIs\nInteract with a variety of remote web services to consume capabilities ranging from authentication and authorization to a fully functioning thesaurus\nDevelop high-quality command-line tools that utilize the powerful shell capabilities and have great performance using Go's in-built concurrency mechanisms\nImplement a modern document database as well as high-throughput messaging queue technology to put together an architecture that is truly ready for scale\nWrite concurrent programs and gracefully manage their execution and communication with smart use of channels","price":"USD 49.99"},{"rating":{"max":10,"numRaters":3,"average":"0.0","min":0},"subtitle":"","author":["John P. Baugh"],"pubdate":"2010-6-16","tags":[{"count":4,"name":"计算机","title":"计算机"},{"count":3,"name":"Go","title":"Go"},{"count":2,"name":"英文版","title":"英文版"},{"count":2,"name":"编程语言","title":"编程语言"},{"count":2,"name":"技术","title":"技术"},{"count":2,"name":"golang","title":"golang"},{"count":1,"name":"编程","title":"编程"},{"count":1,"name":"程序员","title":"程序员"}],"origin_title":"","image":"https://img1.doubanio.com\/view\/subject\/m\/public\/s6381789.jpg","binding":"Paperback","translator":[],"catalog":"","pages":"172","images":{"small":"https://img1.doubanio.com\/view\/subject\/s\/public\/s6381789.jpg","large":"https://img1.doubanio.com\/view\/subject\/l\/public\/s6381789.jpg","medium":"https://img1.doubanio.com\/view\/subject\/m\/public\/s6381789.jpg"},"alt":"https:\/\/book.douban.com\/subject\/6427900\/","id":"6427900","publisher":"CreateSpace","isbn10":"1453636676","isbn13":"9781453636671","title":"Go Programming","url":"https:\/\/api.douban.com\/v2\/book\/6427900","alt_title":"","author_intro":"","summary":"","price":"USD 14.99"},{"rating":{"max":10,"numRaters":5,"average":"0.0","min":0},"subtitle":"","author":["Shiju Varghese"],"pubdate":"2015-12-25","tags":[{"count":3,"name":"Go","title":"Go"},{"count":1,"name":"计算机","title":"计算机"},{"count":1,"name":"golang","title":"golang"},{"count":1,"name":"Web","title":"Web"}],"origin_title":"","image":"https://img1.doubanio.com\/view\/subject\/m\/public\/s28390818.jpg","binding":"Paperback","translator":[],"catalog":"","pages":"289","images":{"small":"https://img1.doubanio.com\/view\/subject\/s\/public\/s28390818.jpg","large":"https://img1.doubanio.com\/view\/subject\/l\/public\/s28390818.jpg","medium":"https://img1.doubanio.com\/view\/subject\/m\/public\/s28390818.jpg"},"alt":"https:\/\/book.douban.com\/subject\/26715912\/","id":"26715912","publisher":"Apress","isbn10":"1484210530","isbn13":"9781484210536","title":"Web Development with Go: Building Scalable Web Apps and RESTful Services","url":"https:\/\/api.douban.com\/v2\/book\/26715912","alt_title":"","author_intro":"","summary":"Go, the open-source programming language originally developed at Google, makes it easy to build simple, reliable, and efficient software. It's a fast, statically typed, compiled language that feels like a dynamically typed, interpreted language. Its concurrency mechanisms, coupled with modern hardware, makes Go an effective general purpose programming language for a wide range of applications such as, system programming and embedded systems, desktop development and distributed systems, backend services for mobile and web, DevOps, and cloud application development.\nWeb Development with Go will teach you how to develop scalable real-world web apps, RESTful services, and backend systems with Go. The book starts off by covering Go programming language fundamentals as a prerequisite for web development. After a thorough understanding of the basics, the book delves into web development using the built-in package, net\/http. With each chapter you’ll be introduced to new concepts for gradually building a real-world web system.\nThe book further shows you how to integrate Go with other technologies. For example, it provides an overview of using MongoDB as a means of persistent storage, and providesan end-to-end REST API sample features MongoDB as well. Developers looking for a full-fledged web development framework for building web apps will be introduced to Beego. The book then moves on to demonstrate how to deploy web apps to the cloud using the Google Cloud platform. Finally, the book introduces Docker, a revolutionary container technology platform for deploying containerized Go web apps to the Cloud.\nWeb Development with Go provides:\nBasic fundamentals for building real-world web apps in Go.Through coverage of prerequisites and practical code examples. Demo web apps for attaining a deeper understandi\nng of web development\nA reference REST API app which can be used to build scalable real-world backend services in Go.\nA through demonstration of deploying web apps to the Cloud using the Google Cloud platform, and Docker for deploying Go Servers.\nIn totality, Go is a high-performance language while providing greater level of developer productivity, therefore\nWeb Development with Go\nequips you\nwith the necessary skills and knowledge required for effectively building robust and efficient web apps by leveraging the features of Go, and find yourself become the sought after person on Go among your peers and employers alike, in no time.","price":"USD 39.99"},{"rating":{"max":10,"numRaters":2,"average":"0.0","min":0},"subtitle":"Real Code. Real Productivity. Master The Go Standard Library","author":["Daniel Huckstep"],"pubdate":"2013-12-18","tags":[{"count":4,"name":"golang","title":"golang"},{"count":1,"name":"程序员","title":"程序员"}],"origin_title":"","image":"https://img3.doubanio.com\/view\/subject\/m\/public\/s27256873.jpg","binding":"平装","translator":[],"catalog":"Introduction\nTarget Audience\nHow To Read This Book\nCode In The Book\nThanks\nCredits\narchive\nMeet The Archive Package\nWriting tar Files\nWriting zip Files\nReading tar Files\nReading zip Files\nCaveats\nbufio\nIs That A Buffer In Your Pocket?\nReading\nWriting\nScanning\nbuiltin\nBatteries Included\nBuilding Objects\nMaps, Slices, And Channels\nAll The Sizes\nCausing And Handling Panics\nComplex Numbers\nbytes\nBits and Bytes and Everything Nice\nComparison\nSearching\nManipulating\nSplitting and Joining\nCase\nTrimming\nBuffer\nReader\ncompress\nHoney, I Shrunk The Kids\nALL THE CODE\nAccept-Encoding: gzip\ncontainer\nheap\nlist\nring\nThread Pool Example\nRound Robin Load Balancer Example\nPriority Queue Load Balancer Example\ncrypto\nDisclaimer\nBlock Ciphers\nDigital Signatures\nHashes\nHMAC\nRC4\nRSA\nTLS\/x509\nRandom Numbers\nConstant Time Functions\nA Timing Attack In Action\ngo.crypto\nFinal Warning\ndatabase\nOpen\nExec\nQuery\nPrepared Statements\nTransactions\nExample\ndebug\nelf\nmacho\npe\ngosym\ndwarf\nencoding\nascii85\nasn1\nbase32\nbase64\nbinary\ncsv\ngob\nhex\njson\npem\nxml\nerrors\nexpvar\nflag\nThe Basic Interface\nThe *Var Interface\nFlagSet\nCustom\nfmt\nPrinting\nScanning\nPrinting Custom Types\nScanning Custom Types\ngo\nCross Platform Go Code\nIntrospecting Packages\nLexing Go Code\nParsing Go Code\nAnalyzing Go Code: Cyclomatic Complexity\nAltering Go Code: Mutation Testing\nhash\nadler32\ncrc32\ncrc64\nfnv\nhtml\nEscape Artist\nTemplating\nimage\nConverting images formats\nResizing\nCropping\nCompositing: Building images from other images\ngostagram\nindex\nsuffixarray\nio (wip)\nlog\nBasic Logging\nSyslog\nmath\nBig Numbers\nRandom Numbers\nmime\nMultipart Parsing\nMultipart Generation\nnet (wip)\nmail\nos (wip)\npath\npath\npath\/filepath\nfind\nreflect (wip)\nregexp\nMatching\nIndexes\nCapture Groups and Submatches\nReplace\nio\nruntime (wip)\nsort\nBasic Sorting\nAdvanced Sorting\nSearching\nstrconv (wip)\nstrings (wip)\nsync (wip)\nsyscall (wip)\ntesting (wip)\ntext (wip)\ntime (wip)\nunicode (wip)\nunsafe (wip)","pages":"280","images":{"small":"https://img3.doubanio.com\/view\/subject\/s\/public\/s27256873.jpg","large":"https://img3.doubanio.com\/view\/subject\/l\/public\/s27256873.jpg","medium":"https://img3.doubanio.com\/view\/subject\/m\/public\/s27256873.jpg"},"alt":"https:\/\/book.douban.com\/subject\/25863578\/","id":"25863578","publisher":"leanpub.com","isbn10":"1617291870","isbn13":"9781617291876","title":"Go The Standard Library","url":"https:\/\/api.douban.com\/v2\/book\/25863578","alt_title":"","author_intro":"I am a software engineer (EIT) in Edmonton, Alberta, Canada. I enjoy all kinds of programming, except assembly, which is the bane of my existence.","summary":"Some smart people working at Google came out with a language called Go, and it's got a wicked awesome standard library. The problem is, the standard library of anything language plays second fiddle to the syntax and other libraries and come out on Github\nWith Go, The Standard Library, I give you the tools to take Go by the horns and be productive without installing every library on Github.","price":"USD 29.00"},{"rating":{"max":10,"numRaters":6,"average":"0.0","min":0},"subtitle":"","author":["Matt Aimonetti"],"pubdate":"2014-3-25","tags":[{"count":3,"name":"golang","title":"golang"},{"count":3,"name":"go","title":"go"},{"count":2,"name":"programming","title":"programming"},{"count":1,"name":"go语言","title":"go语言"},{"count":1,"name":"ProgrammingLanguage","title":"ProgrammingLanguage"}],"origin_title":"","image":"https://img3.doubanio.com\/view\/subject\/m\/public\/s27256870.jpg","binding":"平装","translator":[],"catalog":"Chapter 1 Intro\n1.1 Schedule of the day\n1.2 Objectives\n1.2.1 Knowledge\n1.2.2 Skills\n1.2.3 Attitudes\nChapter 2 Basic concepts\n2.1 Packages and imports\n2.2 Exported names\n2.3 Functions, signature, return values, named results\n2.3.1 Resources\n2.4 Variables \/ inferred typing, short assignment\n2.5 Basic types\n2.6 Type conversion\n2.7 Constants\n2.8 For Loop\n2.9 If statement\n2.10 Exercise: Loops and Functions\n2.11 Structs\n2.12 Pointers\n2.13 Initializing\n2.13.1 Resources\n2.14 Arrays\n2.14.1 Printing arrays\n2.14.2 Multi-dimensional arrays\n2.15 Slices\n2.15.1 Slicing a slice\n2.15.2 Making slices\n2.15.3 Appending to a slice\n2.15.4 Length\n2.15.5 Nil slices\n2.15.6 Resources\n2.16 Range\n2.16.1 Break & continue\n2.16.2 Range and maps\n2.17 Exercise: Slice\n2.17.1 Solution\n2.18 Maps\n2.18.1 Mutating maps\n2.18.2 Resources\n2.19 Exercise: Map\n2.19.1 Solution\nChapter 3 Methods and interfaces\n3.1 Methods\n3.1.1 Code organization\n3.1.2 Type aliasing\n3.1.3 Method receivers\n3.2 Interfaces\n3.2.1 Interfaces are satisfied implicitly\n3.3 Composition vs inheritance\n3.4 Errors\n3.5 Exercise: Errors\n3.5.1 Solution\nChapter 4 Concurrency\n4.1 Goroutines\n4.2 Channels\n4.2.1 Buffered channels\n4.3 Range and close\n4.4 Select\n4.4.1 Default case\n4.4.2 Timeout\n4.5 Exercise: Equivalent Binary Trees\n4.5.1 Solution\nChapter 5 Get Setup\n5.1 OS X\n5.1.1 Setup your paths\n5.1.2 Install mercurial and bazaar\n5.2 Windows\n5.3 Linux\n5.4 Extras\nChapter 6 Get Your Feet Wet\nChapter 7 Tips and Tricks\n7.1 140 char tips\n7.2 goimports\n7.3 Organization\n7.3.1 Custom Constructors\n7.3.2 Breaking down code in packages\n7.4 Dependency package management\n7.5 Using errors\n7.6 Return statements and conditions\n7.7 Expvar\n7.8 Set the build id using git’s SHA\n7.9 How to see what packages my app imports\n7.10 Web resources\nChapter 8 Exercises","pages":"86","images":{"small":"https://img3.doubanio.com\/view\/subject\/s\/public\/s27256870.jpg","large":"https://img3.doubanio.com\/view\/subject\/l\/public\/s27256870.jpg","medium":"https://img3.doubanio.com\/view\/subject\/m\/public\/s27256870.jpg"},"alt":"https:\/\/book.douban.com\/subject\/25863577\/","id":"25863577","publisher":"softcover.io","isbn10":"1617291773","isbn13":"9781617291777","title":"Go Bootcamp","url":"https:\/\/api.douban.com\/v2\/book\/25863577","alt_title":"","author_intro":"","summary":"Everything you need to know to get started with Go","price":"USD 0.00"},{"rating":{"max":10,"numRaters":7,"average":"0.0","min":0},"subtitle":"","author":["[英] 乔治，奥尔波（George Ornbo）"],"pubdate":"2018-8-1","tags":[{"count":5,"name":"golang","title":"golang"},{"count":2,"name":"编程","title":"编程"},{"count":2,"name":"concurrency","title":"concurrency"},{"count":1,"name":"计算机","title":"计算机"}],"origin_title":"","image":"https://img1.doubanio.com\/view\/subject\/m\/public\/s29882539.jpg","binding":"平装","translator":["张海燕"],"catalog":"","pages":"261","images":{"small":"https://img1.doubanio.com\/view\/subject\/s\/public\/s29882539.jpg","large":"https://img1.doubanio.com\/view\/subject\/l\/public\/s29882539.jpg","medium":"https://img1.doubanio.com\/view\/subject\/m\/public\/s29882539.jpg"},"alt":"https:\/\/book.douban.com\/subject\/30339297\/","id":"30339297","publisher":"人民邮电出版社","isbn10":"7115485038","isbn13":"9787115485038","title":"Go语言入门经典","url":"https:\/\/api.douban.com\/v2\/book\/30339297","alt_title":"","author_intro":"","summary":"","price":"59.00元"},{"rating":{"max":10,"numRaters":0,"average":"0.0","min":0},"subtitle":"Go Programming For Hackers and Pentesters","author":["Tom Steele","Chris Patten","Dan Kottmann"],"pubdate":"2020-1-21","tags":[{"count":8,"name":"Golang","title":"Golang"},{"count":4,"name":"黑帽子","title":"黑帽子"},{"count":4,"name":"安全","title":"安全"},{"count":3,"name":"golang","title":"golang"},{"count":2,"name":"计算机","title":"计算机"},{"count":1,"name":"黑客","title":"黑客"},{"count":1,"name":"服务器","title":"服务器"}],"origin_title":"","image":"https://img3.doubanio.com\/view\/subject\/m\/public\/s29484422.jpg","binding":"平装","translator":[],"catalog":"Chapter 1: Go Fundamentals and Concepts\nChapter 2: TCP and Go: Scanners and Proxies\nChapter 3: HTTP Clients: Remote Interaction with Tools\nChapter 4: HTTP Servers: Routing and Middleware\nChapter 5: Exploiting DNS: Recon and More\nChapter 6: SMB and NTLM: A Peek Down the Rabbit Hole\nChapter 7: Databases and Filesystems: Pilfering and Abusing\nChapter 8: Packet Processing: Living on the Wire\nChapter 9: Exploit Code: Writing and Porting\nChapter 10: Extendable Tools: Using Go Plugins and LUA\nChapter 11: Cryptography: Implementing and Attacking\nChapter 12: Windows: System Interaction and Analysis\nChapter 13: Steganography: Hiding Data\nChapter 14: Command and Control: Building a RAT","pages":"368","images":{"small":"https://img3.doubanio.com\/view\/subject\/s\/public\/s29484422.jpg","large":"https://img3.doubanio.com\/view\/subject\/l\/public\/s29484422.jpg","medium":"https://img3.doubanio.com\/view\/subject\/m\/public\/s29484422.jpg"},"alt":"https:\/\/book.douban.com\/subject\/27078706\/","id":"27078706","publisher":"No Starch Press","isbn10":"1593278659","isbn13":"9781593278656","title":"Black Hat Go","url":"https:\/\/api.douban.com\/v2\/book\/27078706","alt_title":"","author_intro":"Tom Steele, Dan Kottmann, and Chris Patten share over 30 years in penetration testing and offensive security experience, and have delivered multiple Go training and development sessions.","summary":"In Black Hat Go, you'll learn how to write powerful and effective penetration testing tools in Go, a language revered for its speed and scalability. Start off with an introduction to Go fundamentals like data types, control structures, and error handling; then, dive into the deep end of Go’s offensive capabilities as you learn how to:\nWrite a simple TCP proxy to use concurrency for non-parallel tasks\nCreate HTTP clients to perform common web interactions\nWrite a custom DNS server and proxy\nSniff and process packets using the gopacket library\nCreate extendable tools to expand program functionality\nWrite your own exploits with the help of insider techniques\nBlack Hat Go will show you how to build powerful security tools to pen test huge networks, fast.","price":"USD 39.95"},{"rating":{"max":10,"numRaters":1,"average":"0.0","min":0},"subtitle":"Implement Regression, Classification, Clustering, Time-series Models, Neural Networks, and More using the Go Programming Language","author":["Daniel Whitenack"],"pubdate":"2017-9-26","tags":[{"count":1,"name":"Programming","title":"Programming"},{"count":1,"name":"MachineLearning","title":"MachineLearning"},{"count":1,"name":"Golang","title":"Golang"}],"origin_title":"","image":"https://img3.doubanio.com\/view\/subject\/m\/public\/s29676133.jpg","binding":"Paperback","translator":[],"catalog":"Table of Contents\n1.Gathering and Organizing Data\n2.Matrices, Probability, and Statistics\n3.Evaluation and Validation\n4.Regression\n5.Classification\n6.Clustering\n7.Time Series and Anomaly Detection\n8.Neural Networks and “Deep” Learning\n9.Deploying and distributing Analyses and Models\n10.Appendix: Algorithms\/Techniques Related to ML","pages":"392","images":{"small":"https://img3.doubanio.com\/view\/subject\/s\/public\/s29676133.jpg","large":"https://img3.doubanio.com\/view\/subject\/l\/public\/s29676133.jpg","medium":"https://img3.doubanio.com\/view\/subject\/m\/public\/s29676133.jpg"},"alt":"https:\/\/book.douban.com\/subject\/30127313\/","id":"30127313","publisher":"Packt Publishing","isbn10":"1785882104","isbn13":"9781785882104","title":"Machine Learning With Go","url":"https:\/\/api.douban.com\/v2\/book\/30127313","alt_title":"","author_intro":"Daniel Whitenack (@dwhitena), PhD, is a trained data scientist working with Pachyderm (@pachydermIO). Daniel develops innovative, distributed data pipelines that include predictive models, data visualizations, statistical analyses, and more. He has spoken at conferences around the world (GopherCon, JuliaCon, PyCon, ODSC, Spark Summit, and more), teaches data science\/engineering at Purdue University (@LifeAtPurdue), and, with Ardan Labs (@ardanlabs), maintains the Go kernel for Jupyter, and is actively helping to organize contributions to various open source data science projects.","summary":"The mission of this book is to turn readers into productive, innovative data analysts who leverage Go to build robust and valuable applications. To this end, the book clearly introduces the technical aspects of building predictive models in Go, but it also helps the reader understand how machine learning workflows are being applied in real-world scenarios.\nMachine Learning with Go shows readers how to be productive in machine learning while also producing applications that maintain a high level of integrity. It also gives readers patterns to overcome challenges that are often encountered when trying to integrate machine learning in an engineering organization.\nThe readers will begin by gaining a solid understanding of how to gather, organize, and parse real-work data from a variety of sources. Readers will then develop a solid statistical toolkit that will allow them to quickly understand gain intuition about the content of a dataset. Finally, the readers will gain hands-on experience implementing essential machine learning techniques (regression, classification, clustering, and so on) with the relevant Go packages.\nFinally, the reader will have a solid machine learning mindset and a powerful Go toolkit of techniques, packages, and example implementations.\nWhat you will learn\nLearn about data gathering, organization, parsing, and cleaning.\nExplore matrices, linear algebra, statistics, and probability.\nSee how to evaluate and validate models.\nLook at regression, classification, clustering.\nLearn about neural networks and deep learning\nUtilize times series models and anomaly detection.\nGet to grip with techniques for deploying and distributing analyses and models.\nOptimize machine learning workflow techniques","price":"USD 49.99"},{"rating":{"max":10,"numRaters":3,"average":"0.0","min":0},"subtitle":"","author":["郑东旭","杨明珠","潘盈瑜","翟萌"],"pubdate":"2019-7-5","tags":[{"count":3,"name":"区块链开发","title":"区块链开发"},{"count":3,"name":"go","title":"go"},{"count":2,"name":"区块链","title":"区块链"},{"count":1,"name":"编程","title":"编程"},{"count":1,"name":"程序员","title":"程序员"},{"count":1,"name":"比原链","title":"比原链"},{"count":1,"name":"Go语言","title":"Go语言"},{"count":1,"name":"Golang","title":"Golang"}],"origin_title":"","image":"https://img3.doubanio.com\/view\/subject\/m\/public\/s33439523.jpg","binding":"平装","translator":[],"catalog":"推荐序一\n推荐序二\n前言\n第1章　公链设计架构\n第2章　交互工具\n第3章　守护进程的初始化与运行\n第4章　接口层\n第5章　内核层：区块与区块链\n第6章　内核层：交易\n第7章　内核层：智能合约\n第8章　内核层：虚拟机\n第9章　钱包层\n第10章　P2P分布式网络\n第11章　数据存储\n第12章　共识算法\n第13章　矿池及挖矿流程\n第14章　展望","pages":"296","images":{"small":"https://img3.doubanio.com\/view\/subject\/s\/public\/s33439523.jpg","large":"https://img3.doubanio.com\/view\/subject\/l\/public\/s33439523.jpg","medium":"https://img3.doubanio.com\/view\/subject\/m\/public\/s33439523.jpg"},"alt":"https:\/\/book.douban.com\/subject\/34659372\/","id":"34659372","publisher":"机械工业出版社","isbn10":"7111629876","isbn13":"9787111629870","title":"GO语言公链开发实战","url":"https:\/\/api.douban.com\/v2\/book\/34659372","alt_title":"","author_intro":"","summary":"本书的目标是引导读者全面了解区块链技术实现原理，笔者也一直坚信，了解某一系统最直接的方式就是研读它的源码，所以本书并不是只介绍区块链技术，而是深入分析其背后的实现原理。通过阅读本书，读者可以全面地了解一条公链的技术实现。本书基于比原链的源代码进行分析，比原链是一个开源的有智能合约功能的公共区块链平台，是国内优秀的公链，目前比原链的代码量不多，而且源码结构清晰，特别适合初学者学习。","series":{"id":"43703","title":"区块链技术丛书"},"price":"CNY 89.00"},{"rating":{"max":10,"numRaters":0,"average":"0.0","min":0},"subtitle":"","author":["Books, Hephaestus"],"pubdate":"","tags":[],"origin_title":"","image":"https://img1.doubanio.com\/view\/subject\/m\/public\/s10507239.jpg","binding":"","translator":[],"catalog":"","pages":"304","images":{"small":"https://img1.doubanio.com\/view\/subject\/s\/public\/s10507239.jpg","large":"https://img1.doubanio.com\/view\/subject\/l\/public\/s10507239.jpg","medium":"https://img1.doubanio.com\/view\/subject\/m\/public\/s10507239.jpg"},"alt":"https:\/\/book.douban.com\/subject\/10913721\/","id":"10913721","publisher":"","isbn10":"1243240776","isbn13":"9781243240774","title":"Golan-Globus Films, Including","url":"https:\/\/api.douban.com\/v2\/book\/10913721","alt_title":"","author_intro":"","summary":"Hephaestus Books represents a new publishing paradigm, allowing disparate content sources to be curated into cohesive, relevant, and informative books. To date, this content has been curated from Wikipedia articles and images under Creative Commons licensing, although as Hephaestus Books continues to increase in scope and dimension, more licensed and public domain content is being added. We believe books such as this represent a new and exciting lexicon in the sharing of human knowledge. This particular book is a collaboration focused on Golan-Globus films.","price":"$ 33.62"}]}
